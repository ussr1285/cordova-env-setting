<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>joyfuI의 잡동사니 블로그</title>
<link>https://blog.joyfui.com/</link>
<description>프로그래밍, 게임, 컴퓨터 등 개인적으로 저장해놓는 블로그</description>
<language>ko</language>
<pubDate>Fri, 28 Jul 2023 15:26:43 +0900</pubDate>
<generator>TISTORY</generator>
<ttl>100</ttl>
<managingEditor>joyfuI</managingEditor>
<item>
<title>OpenWrt에서 외부 네트워크 WOL 패킷 받기</title>
<link>https://blog.joyfui.com/1274</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;일단 공유기단에서의 WOL 세팅 글이기 때문에 컴퓨터의 WOL 세팅 방법은 패스한다. (그냥 바이오스에서 설정 한두 개만 키면 끝이다)&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;Wake On Lan은 특수한 패킷을 받으면(매직 패킷이라고 부른다) 장치를 키는 기능이다. 나는 외부에서 컴퓨터 사용할 일이 있을 때 보통 원격 데스크톱으로 집컴을 사용하는데 이때 굉장히 유용하게 자주 사용하고 있다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;일단 wol 개념을 이해할 필요가 있다. 매직 패킷에는 맥주소 정보가 들어 있는데 랜카드가 이를 받으면 날 깨우라는 게 맞는지 확인하고 맞으면 장치를 켠다. 즉 외부에서 온 매직 패킷이 장치에 도달해야 한다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;외부 패킷을 특정 장치로 보내는 건 공유기의 포트 포워딩 기능을 사용하면 된다. 매직 패킷은 udp 7번 또는 9번을 사용하기로 약속되어 있으므로 해당 포트로 오는 패킷을 대상 장치로 붙여주면 된다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;하지만 여기까지만 진행하면 컴퓨터 종료 직후에만 wol이 작동하고 시간이 조금 지나면 작동하지 않는 현상이 있을 것이다. 왜냐하면 공유기는 arp 테이블이라고 해서 ip 주소와 mac 주소를 매칭시켜 놓은 정보를 가지고 특정 ip로 패킷을 보낼 때 어디로 보내야 하는지 파악하기 때문이다. 장치가 꺼지고 시간이 지나면 arp 테이블에 등록된 정보가 날아가고 공유기는 받은 매직 패킷을 누구한테 보내야 하는지 몰라서 패킷이 장치에 도달하지 못한다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;두 가지 해결 방법이 있다. 첫 번째는 매직 패킷을 받으면 브로드캐스팅으로 쏴주도록 설정하는 건데 내 공유기는 포트 포워딩 설정에 브로드캐스팅 주소를 넣어도 작동하지 않았다. (이 공유기가 안 되는 건지 원래 전부 안 되는 건지는 모르겠다. 이론상으론 되어야 할 거 같은데...)&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;두 번째 방법은 arp 테이블에 ip/mac 주소 매칭 정보를 영구적으로 등록하는 것이다. 내가 사용하고 있는 공유기는 tp-link 공유기인데 원래 제조사 펌웨어에는 &amp;ldquo;IP &amp;amp; MAC 바인딩&amp;rdquo;이란 기능이 있어서 간단하게 값을 고정할 수 있었다. 하지만 펌웨어 업데이트가 끊긴 지 오래되고 나도 그냥 심심해서 OpenWrt를 설치했는데 LuCI에서는 관련 기능을 찾을 수 없었다. 그래도 약간의 삽질 끝에 ssh 접속 없이 luci 상에서 arp 고정 방법을 알아내서 정리해 둔다.&lt;/p&gt;
&lt;h3 data-ke-size=&quot;size23&quot;&gt;OpenWrt LuCI 상에서 WOL 세팅법&lt;/h3&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;1. 고정 IP를 설정한다. 네트워크&amp;rarr;DHCP 및 DNS&amp;rarr;정적 임대에서 추가할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='1352' data-origin-height='462' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/WxcWI/btsmQqp1qPw/KchwyhGaeqbjijm2gc7Sm1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/WxcWI/btsmQqp1qPw/KchwyhGaeqbjijm2gc7Sm1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FWxcWI%2FbtsmQqp1qPw%2FKchwyhGaeqbjijm2gc7Sm1%2Fimg.png' data-filename='Screenshot 2023-07-09 at 00-36-50 OpenWrt - DHCP 및 DNS - LuCI.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;2. 포트포워딩 설정을 한다. 네트워크&amp;rarr;방화벽&amp;rarr;Port Forward에서 할 수 있다. 나는 wol 포트로 9번을 열어줬다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='1369' data-origin-height='707' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/zE3DR/btsmQev5nHU/MoUv7VVJq85awOKYwU4i10/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/zE3DR/btsmQev5nHU/MoUv7VVJq85awOKYwU4i10/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FzE3DR%2FbtsmQev5nHU%2FMoUv7VVJq85awOKYwU4i10%2Fimg.png' data-filename='Screenshot 2023-07-09 at 00-40-00 OpenWrt - Port Forward - LuCI.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;3. 시스템&amp;rarr;소프트웨어 메뉴에서 &amp;ldquo;ip-full&amp;rdquo; 패키지를 설치한다. arp 테이블 등록할 때 ip 명령어가 필요하다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='1369' data-origin-height='510' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/evObl4/btsmOKvMyzJ/cR2RcPcGTwcqTjEkGObyfk/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/evObl4/btsmOKvMyzJ/cR2RcPcGTwcqTjEkGObyfk/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FevObl4%2FbtsmOKvMyzJ%2FcR2RcPcGTwcqTjEkGObyfk%2Fimg.png' data-filename='Screenshot 2023-07-09 at 00-45-39 OpenWrt - 소프트웨어 - LuCI.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;4. 시스템&amp;rarr;작업 관리 메뉴에 들어가서 아래 명령어를 추가한다.&lt;/p&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;* * * * * ip neigh change [아이피주소] lladdr [맥주소] nud permanent dev br-lan&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;아이피주소와 맥주소를 포트포워딩과 고정 IP 설정한 거에 맞춰서 적어주면 된다. arp 테이블을 등록하는 명령어이다. 사실 저 명령어가 영구 등록인 걸로 알고 있는데 실제로 테스트해 보니 어느 정도 시간이 지나면 테이블에서 사라져서 작동하지 않았다. (추측건대 장치 종료랑 연관이 있을 듯?) 그래서 cron에 등록해서 1분 간격으로 계속 재등록하도록 했다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;근데 나는 인터페이스 이름이 br-lan인데 시라도 다를 수도 있으니 네트워크&amp;rarr;인터페이스 메뉴에서 한번 확인해 보는 게 좋겠다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이제 wol 세팅이 끝났다. 매직 패킷 보내는 건 관련 앱이 많으니 그런 걸 받아서 사용하면 된다. 나는 어디서 php 코드 받아다가 간단한 웹페이지 만들어 놓았다.ㅎ&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>기타 OS</category>
<category>openwrt</category>
<category>공유기</category>
<category>네트워크</category>
<category>인터넷</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1274</guid>
<comments>https://blog.joyfui.com/1274#entry1274comment</comments>
<pubDate>Sun, 09 Jul 2023 01:35:11 +0900</pubDate>
</item>
<item>
<title>EA app 설치 오류 해결</title>
<link>https://blog.joyfui.com/1273</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;이번에 엑박 게임패스 가격 인상 소식을 듣고 인상 전 게임패스 찍먹을 위해 1년 치를 결제했다. 공식(?) 꼼수인 라이브골드 전환을 사용했다. (13개월에 44,900원!)&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;게임패스에 EA Play가 포함되어 있는데 EA Play 게임을 플레이하기 위해선 EA앱(구 오리진)이 필요하다고 해서 설치를 하려니까 설치가 안 된다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='480' data-origin-height='480' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/pXMeZ/btslaIMmAhY/XKyersRsxc6PtV2BKEAjXk/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/pXMeZ/btslaIMmAhY/XKyersRsxc6PtV2BKEAjXk/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FpXMeZ%2FbtslaIMmAhY%2FXKyersRsxc6PtV2BKEAjXk%2Fimg.png' data-filename='EAappInstaller_TcfGSKS830.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;INST-21-577 오류가 떴는데 이건 아래처럼 설치 프로그램을 관리자 권한으로 실행하면 해결된다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='408' data-origin-height='243' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/uDHdn/btsldOdKHbX/VNdVauOcYqjsv3TDFeIjY1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/uDHdn/btsldOdKHbX/VNdVauOcYqjsv3TDFeIjY1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FuDHdn%2FbtsldOdKHbX%2FVNdVauOcYqjsv3TDFeIjY1%2Fimg.png' data-filename='NVIDIA_Share_FWYS9Z7feZ.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;근데 이번엔 다른 오류가 뜬다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='480' data-origin-height='480' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/ckcOhn/btslfd5Du53/5KLrE6GIM966FsKIcHkI2K/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/ckcOhn/btslfd5Du53/5KLrE6GIM966FsKIcHkI2K/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FckcOhn%2Fbtslfd5Du53%2F5KLrE6GIM966FsKIcHkI2K%2Fimg.png' data-filename='EAappInstaller_Fj15XmSHRx.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;INST-21-32 오류인데 이건 찾아보니까 여러 해결법이 나왔는데 이 중에 효과가 있었던 방법을 소개한다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;1. 탐색기를 열고 TEMP 폴더로 이동한다. 일반적으로 &lt;code&gt;C:\Windows\Temp&lt;/code&gt;인데 설정에 따라 다를 수 있으니 확실하게 &lt;code&gt;%TEMP%&lt;/code&gt;로 이동하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='1117' data-origin-height='660' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/c2pV28/btslaGVkX1E/tyLp68KMShKDZwToISvxT1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/c2pV28/btslaGVkX1E/tyLp68KMShKDZwToISvxT1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fc2pV28%2FbtslaGVkX1E%2FtyLp68KMShKDZwToISvxT1%2Fimg.png' data-filename='explorer_D9XNrkfPnc.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;2. 나중에 새로 생성된 폴더를 쉽게 찾기 위해 한번 비워준다. 아니면 그냥 수정한 날짜순으로 정렬해서 찾으면 된다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='1117' data-origin-height='660' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/5UUIN/btslaSIeO91/wD7MUq2KDrkS07OA8KmJak/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/5UUIN/btslaSIeO91/wD7MUq2KDrkS07OA8KmJak/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F5UUIN%2FbtslaSIeO91%2FwD7MUq2KDrkS07OA8KmJak%2Fimg.png' data-filename='explorer_lNEUBNHVTq.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;3. EA앱 설치파일을 실행하면 새로운 폴더가 생성된다. 내 경우 &lt;code&gt;{5C0D6BD8-D206-4ED5-A8D8-E1E6BDA66CFB}&lt;/code&gt;와 &lt;code&gt;{FF4EDDB0-878D-457D-8A7D-DFEBEB3CA5D2}&lt;/code&gt; 폴더가 생성되었다. 어차피 폴더명은 랜덤이라 중요한 건 아니다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='1004' data-origin-height='1011' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/l8GJW/btsljgANArF/nSplUFprgJWibU9lIA4kw0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/l8GJW/btsljgANArF/nSplUFprgJWibU9lIA4kw0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fl8GJW%2FbtsljgANArF%2FnSplUFprgJWibU9lIA4kw0%2Fimg.png' data-filename='Notepad2_SAy3CjIBIZ.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;4. 해당 폴더를 뒤져서 &lt;code&gt;BootstrapperApplicationData.xml&lt;/code&gt;이라는 파일을 찾아 메모장으로 연다. EA앱 인스톨러를 닫으면 생성된 폴더가 삭제되니 계속 열어둬야 한다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='1004' data-origin-height='1011' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/cJftjQ/btsk9CF9ziy/EH4LmQc8pkK4tA5UzkBq60/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/cJftjQ/btsk9CF9ziy/EH4LmQc8pkK4tA5UzkBq60/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcJftjQ%2Fbtsk9CF9ziy%2FEH4LmQc8pkK4tA5UzkBq60%2Fimg.png' data-filename='Notepad2_5Q7fJTybop.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;5. &lt;code&gt;DownloadUrl&lt;/code&gt; 라는 키워드로 검색하면 여러 개가 나오는데 그중에 확장자가 msi인 애를 찾아 다운로드받고 실행하면 EA앱 설치가 끝난다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='1920' data-origin-height='1032' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/AVPbj/btslbwLrBfu/SOgkAV1jeNKPVYY1Flq2d1/img.png' data-lightbox='lightbox' data-alt='짠!'&gt;&lt;img src='https://blog.kakaocdn.net/dn/AVPbj/btslbwLrBfu/SOgkAV1jeNKPVYY1Flq2d1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FAVPbj%2FbtslbwLrBfu%2FSOgkAV1jeNKPVYY1Flq2d1%2Fimg.png' data-filename='EADesktop_AIzyrgeYxo.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;figcaption&gt;짠!&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;찾아보니까 관련 사례가 매우 많은데 EA는 안 고치고 뭐 하는 거지&amp;hellip; 특히 관리자 권한으로 실행 안 하면 오류 나는 게 제일 어처구니가 없...&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>기타 게임</category>
<category>Game</category>
<category>게임</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1273</guid>
<comments>https://blog.joyfui.com/1273#entry1273comment</comments>
<pubDate>Sun, 25 Jun 2023 04:48:42 +0900</pubDate>
</item>
<item>
<title>[JavaScript] DOMContentLoaded 이벤트가 작동하지 않을 때</title>
<link>https://blog.joyfui.com/1272</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;회사에서 오랜만에 바닐라 자바스크립트 코딩을 할 일이 있었는데 페이지 로딩 후 작동해야 하는 코드라 DOMContentLoaded 이벤트를 사용했다. 그런데 가끔 해당 코드가 작동하지 않는 것이다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;많은 실험 끝에 작동하지 않는 조건을 찾았다. 두 번째 로딩부터는 괜찮은데 로컬 스토리지를 비운 뒤 첫 번째 로딩에서만 작동하지 않았다. (쿠키는 상관없었고 로컬 스토리지만 그랬다) 이런 황당한 증상 때문에 해결하려고 한참을 찾았는데 원인은 다른 곳에 있었다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;먼저 해결 코드를 보자&lt;/p&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;const domReady = (callback) =&amp;gt; {
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', callback);
  } else {
    callback();
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;DOMContentLoaded 이벤트는 dom 로딩이 끝났을 때 발생한다. 따라서 dom 로딩이 끝난 이후에 리스너를 등록하면 코드가 실행되지 않게 된다. 따라서 리스너 등록 시점에 이미 dom 로딩이 끝난 상황이면 콜백을 바로 실행하고 아니면 리스너를 등록하도록 해서 해결했다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;출처: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded_event&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded_event&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;역시 답은 MDN에 있다&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;근데 대체 로컬 스토리지 비운 거랑은 무슨 인과관계가 있는 거지?!?! 이거 때문에 원인을 잘못 알아서 삽질했는데!&lt;/del&gt;&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>웹</category>
<category>JavaScript</category>
<category>자바스크립트</category>
<category>프로그래밍</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1272</guid>
<comments>https://blog.joyfui.com/1272#entry1272comment</comments>
<pubDate>Sun, 18 Jun 2023 12:00:20 +0900</pubDate>
</item>
<item>
<title>게임패드 테스트 사이트, Gamepad Tester</title>
<link>https://blog.joyfui.com/1271</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://gamepad-tester.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://gamepad-tester.com/&lt;/a&gt;&lt;/p&gt;
&lt;figure id=&quot;og_1685717080894&quot; contenteditable=&quot;false&quot; data-ke-type=&quot;opengraph&quot; data-ke-align=&quot;alignCenter&quot; data-og-type=&quot;website&quot; data-og-title=&quot;Gamepad Tester&quot; data-og-description=&quot;&quot; data-og-host=&quot;gamepad-tester.com&quot; data-og-source-url=&quot;https://gamepad-tester.com/&quot; data-og-url=&quot;https://gamepad-tester.com/&quot; data-og-image=&quot;&quot;&gt;&lt;a href=&quot;https://gamepad-tester.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-source-url=&quot;https://gamepad-tester.com/&quot;&gt;
&lt;div class=&quot;og-image&quot; style=&quot;background-image: url();&quot;&gt;&amp;nbsp;&lt;/div&gt;
&lt;div class=&quot;og-text&quot;&gt;
&lt;p class=&quot;og-title&quot; data-ke-size=&quot;size16&quot;&gt;Gamepad Tester&lt;/p&gt;
&lt;p class=&quot;og-desc&quot; data-ke-size=&quot;size16&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;og-host&quot; data-ke-size=&quot;size16&quot;&gt;gamepad-tester.com&lt;/p&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/figure&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;원래 강성 키마파였다가(지금도 키마파긴 함) 스팀덱으로 패드 입문하고 최근에 특가를 못 참고 엑박패드를 질렀다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;양품인지 확인하려고 테스트 프로그램을 찾다가 설치 필요 없이 브라우저에서 바로 테스트할 수 있는 사이트가 있길래 소개한다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='1903' data-origin-height='947' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/cjpxnD/btsiury3qsh/chE30q1abKhxaKQwTNfKyK/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/cjpxnD/btsiury3qsh/chE30q1abKhxaKQwTNfKyK/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcjpxnD%2Fbtsiury3qsh%2FchE30q1abKhxaKQwTNfKyK%2Fimg.png' data-filename='Screenshot 2023-06-02 at 23-41-17 Gamepad Tester - Check Controllers and Joysticks Online.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>추천 사이트</category>
<category>Game</category>
<category>게임</category>
<category>사이트</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1271</guid>
<comments>https://blog.joyfui.com/1271#entry1271comment</comments>
<pubDate>Fri, 02 Jun 2023 23:50:29 +0900</pubDate>
</item>
<item>
<title>추천하는 비주얼 스튜디오 코드 확장!</title>
<link>https://blog.joyfui.com/1270</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p&gt;현재 사용 중인 확장 목록. 이것저것 관심만 많다 보니 확장도 많아졌다…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Korean Language Pack for Visual Studio Code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-ko&quot;&gt;https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-ko&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;설명이 필요 없는 무조건 vscode 1순위 설치 확장!&lt;/p&gt;
&lt;h3&gt;공통&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;단디 - 한국어 맞춤법 검사기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=fallroot.vscode-dandy&quot;&gt;https://marketplace.visualstudio.com/items?itemName=fallroot.vscode-dandy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;명령 팔레트에서 “맞춤법 검사하기” 명령어로 전체 문장 또는 선택한 문장의 맞춤법을 검사할 수 있다. 맞춤법 검사 엔진으로는 &lt;a href=&quot;https://speller.cs.pusan.ac.kr/&quot;&gt;부산대 맞춤법 검사기&lt;/a&gt;를 사용한다.&lt;/p&gt;
&lt;p&gt;설명에는 검사 후에 빠른 수정 메뉴에서 틀린 단어를 고칠 수도 있다는데 왜인지 난 빠른 수정 메뉴가 활성화되지 않는다…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Active File In StatusBar&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=RoscoP.ActiveFileInStatusBar&quot;&gt;https://marketplace.visualstudio.com/items?itemName=RoscoP.ActiveFileInStatusBar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;상태 표시줄에 현재 파일의 전체 경로를 표시한다. 클릭하면 전체 경로가 클립보드에 복사된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bookmarks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks&quot;&gt;https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;코드의 특정 라인을 북마크에 추가해 두고 원할 때 바로바로 이동할 수 있는 확장이다. &lt;code&gt;Bookmarks&lt;/code&gt; 명령어를 찾아서 사용해도 되고 우클릭 메뉴에 있는 Bookmarks를 사용해도 된다. 이렇게 추가한 북마크는 좌측 Bookmarks 사이드바에서 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bracket Select&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=jhasse.bracket-select2&quot;&gt;https://marketplace.visualstudio.com/items?itemName=jhasse.bracket-select2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Alt+A를 누르면 괄호 안을 선택해 준다. 더 바깥쪽까지 선택하고 싶으면 한 번 더 단축키를 누르면 된다. 이거 대박 편함ㅎㅎ&lt;/p&gt;
&lt;p&gt;다시 이전 선택으로 돌아가고 싶을 땐 Ctrl+U&lt;/p&gt;
&lt;p&gt;기본적으로 괄호 안쪽을 선택하는데 괄호까지 선택하고 싶으면 Ctrl+Alt+A&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Runner&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner&quot;&gt;https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;온갖 언어의 실행(만) 지원하는 확장이다. 따로 컴파일러나 인터프리터가 있는 건 아니고 이미 설치돼 있는 걸 실행시키는 역할만 하므로 관련 프로그램은 세팅되어 있어야 한다.&lt;/p&gt;
&lt;p&gt;설치하면 탭 오른쪽에 run code 버튼이 생긴다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&amp;quot;code-runner.executorMap&amp;quot;: {
    &amp;quot;python&amp;quot;: &amp;quot;set PYTHONIOENCODING=utf8 &amp;amp;&amp;amp; $pythonPath $fullFileName&amp;quot;,
},&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;파이썬에서 가상환경을 인식 못 하는 거랑 한글 깨짐 문제를 해결하기 위해 추가한 설정&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DotENV&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv&quot;&gt;https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.env 파일에 대한 구문 강조 추가&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Excel Viewer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=GrapeCity.gc-excelviewer&quot;&gt;https://marketplace.visualstudio.com/items?itemName=GrapeCity.gc-excelviewer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;csv와 엑셀 파일을 vscode에서 바로 편집할 수 있는 확장이다. 간단하게 사용하기에 좋다.&lt;/p&gt;
&lt;p&gt;엑셀 파일은 바로 열면 되고 csv 파일은 파일에서 우클릭→ 연결 프로그램→CSV Viewer를 선택하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;file-size&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=zh9528.file-size&quot;&gt;https://marketplace.visualstudio.com/items?itemName=zh9528.file-size&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;상태 표시줄에 현재 파일의 용량을 표시한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GitHub Copilot&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=GitHub.copilot&quot;&gt;https://marketplace.visualstudio.com/items?itemName=GitHub.copilot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;그 유명한 AI 기반 코드 자동완성 툴인 &lt;a href=&quot;https://github.com/features/copilot/&quot;&gt;코파일럿&lt;/a&gt; 확장이다. 깃허브에서 코파일럿을 구독해야 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;베타 시절에 써보고 얘가 독심술을 쓰나 싶은 순간들이 있어서 경이로웠는데 유료화되어서 못 쓰고 있다가 저번에 적금 만기 기념으로 한번 질렀다.(근데 다시 써보니까 처음의 그 신기함은 없다. 이미 맛봐서 그런가…)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GitHub Copilot Labs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-labs&quot;&gt;https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-labs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;코파일럿에서 실험 중인 기능을 체험해 볼 수 있는 확장이다. 사용하려면 &lt;a href=&quot;https://githubnext.com/projects/copilot-labs/&quot;&gt;여기에서 등록&lt;/a&gt;을 먼저 해야 한다.&lt;/p&gt;
&lt;p&gt;사이드바에 GitHub Copilot Labs 메뉴가 추가되는데 대충 코드 설명, 코드는 다른 언어로 변환, 읽기 편하게 수정, 타입 추가, 버그 수정, 디버그, 테스트 코드 생성 등의 기능이 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hex Editor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode.hexeditor&quot;&gt;https://marketplace.visualstudio.com/items?itemName=ms-vscode.hexeditor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;헥스 에디터 확장이다. 파일에서 우클릭→ 연결 프로그램→Hex Editor를 선택하거나 &lt;code&gt;Hex Editor&lt;/code&gt; 명령어를 사용해서 헥스 에디터를 열 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Image preview&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=kisstkondoros.vscode-gutter-preview&quot;&gt;https://marketplace.visualstudio.com/items?itemName=kisstkondoros.vscode-gutter-preview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이미지 경로가 있으면 줄번호 왼쪽 여백과 마우스 커서를 올렸을 때 뜨는 팝업에 이미지 미리보기를 추가하는 확장이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;indent-rainbow&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow&quot;&gt;https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;들여쓰기 뎁스마다 서로 다른 색으로 색칠하는 확장이다. 또 잘못된 뎁스면(뎁스가 2인데 한 칸만 띄어져 있다던가) 빨간색으로 표시도 해준다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Indentation Level Movement&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=kaiwood.indentation-level-movement&quot;&gt;https://marketplace.visualstudio.com/items?itemName=kaiwood.indentation-level-movement&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ctrl+Up/Down으로 커서를 들여쓰기 수준 단위로 이동할 수 있다. Shift를 함께 누르면 선택도 가능하다.&lt;/p&gt;
&lt;p&gt;함수의 시작과 끝을 찾아갈 때 특히 유용하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IntelliCode&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode&quot;&gt;https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AI 기반 코드 자동완성 툴이다. 설치하면 &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.intellicode-api-usage-examples&quot;&gt;IntelliCode API Usage Examples&lt;/a&gt; 확장도 함께 설치된다.&lt;/p&gt;
&lt;p&gt;Python, TypeScript, JavaScript, Java를 지원한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IntelliCode Completions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode-completions&quot;&gt;https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode-completions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;선술한 IntelliCode가 자동 완성 목록을 보여준다면 이 확장은 더 나아가서 해당 줄의 완성을 제안한다.&lt;/p&gt;
&lt;p&gt;Python, JavaScript, TypeScript를 지원한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Live Share&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare&quot;&gt;https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;실시간으로 다른 사람과 동시에 편집하는 확장이다. 비주얼 스튜디오에 내장된 기능이랑 같고 예전엔 음성 채팅용 확장도 따로 있었는데 그건 디플리케이티드됐다.&lt;/p&gt;
&lt;p&gt;아직 한 번도 사용해 본 적이 없다…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multiple cursor case preserve&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Cardinal90.multi-cursor-case-preserve&quot;&gt;https://marketplace.visualstudio.com/items?itemName=Cardinal90.multi-cursor-case-preserve&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ctrl+D로 텍스트를 다중 선택하고 한 번에 바꿀 때 기존 케이스를 유지하는 확장이다. 특히, 리액트에서 useState 사용할 때 편리한데 변수명을 보통 [value, setValue] 이런 식으로 지정하는데 value의 이름을 바꿀 때 setValue도 첫 글자 대문자를 유지한 채 바뀌어서 굉장히 유용하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multiple cursor same case&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=psuranas.multiple-cursor-same-case&quot;&gt;https://marketplace.visualstudio.com/items?itemName=psuranas.multiple-cursor-same-case&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ctrl+D 텍스트 다중 선택 기능은 대소문자를 구분하지 않는다. 이 확장을 설치하고 Alt+D를 누르면 대소문자를 구분하는 다중 선택 기능을 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Path Intellisense&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense&quot;&gt;https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;파일 경로에 대한 자동완성을 추가하는 확장이다. 자바스크립트 파일은 내장 기능이랑 겹치므로 아래 설정을 추가하는 게 좋다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&amp;quot;javascript.suggest.paths&amp;quot;: false,
&amp;quot;typescript.suggest.paths&amp;quot;: false,&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Project Manager&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager&quot;&gt;https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;설치하면 사이드바에 Project Manager 메뉴가 추가서 작업 영역을 저장하고 불러올 수 있다. 탐색기 왔다 갔다 하며 프로젝트를 열 필요 없이 한번 저장해 두고 원할 때마다 바로 열 수 있으니 정말 편하다. 필수 확장!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rainbow CSV&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=mechatroner.rainbow-csv&quot;&gt;https://marketplace.visualstudio.com/items?itemName=mechatroner.rainbow-csv&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;csv, tsv 파일을 열면 열별로 다른 색으로 표시해 준다. 린터 기능도 있어서 csv 파일에 잘못된 부분이 있는지도 찾아준다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remote Development&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack&quot;&gt;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl&quot;&gt;WSL&lt;/a&gt;, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers&quot;&gt;Dev Containers&lt;/a&gt;, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh&quot;&gt;Remote - SSH&lt;/a&gt;, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh-edit&quot;&gt;Remote - SSH: Editing Configuration Files&lt;/a&gt;, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode.remote-server&quot;&gt;Remote - Tunnels&lt;/a&gt;, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode.remote-explorer&quot;&gt;Remote Explorer&lt;/a&gt;를 묶은 확장팩&lt;/p&gt;
&lt;p&gt;WSL은 WSL에서 폴더를 열어서 리눅스 기반 개발환경을 사용할 수 있게 해준다.&lt;/p&gt;
&lt;p&gt;Dev Containers는 도커와 연동서 컨테이너의 개발환경을 사용할 수 있게 해준다.&lt;/p&gt;
&lt;p&gt;Remote - SSH는 SSH를 통해 원격 서버에 접속해서 개발할 수 있게 해준다.&lt;/p&gt;
&lt;p&gt;Remote - Tunnels는 vscode를 서버로 만들어서 원격 시스템에 접속해서 개발할 수 있게 해준다. 서버는 사이드바의 계정 버튼→원격 터널 엑세스 켜기를 통해 켤 수 있다.(서버같이 gui가 없는 환경에선 code CLI을 사용하면 된다.) 이 확장은 서버 킬 때는 필요 없고 서버에 접속할 때 필요하다.&lt;/p&gt;
&lt;p&gt;다른 컴퓨터를 내 컴퓨터처럼 사용한다는 게 대박인 확장들이다. 사이드바에 원격 탐색기 메뉴가 생긴다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remote Repositories&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode.remote-repositories&quot;&gt;https://marketplace.visualstudio.com/items?itemName=ms-vscode.remote-repositories&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;git 리포지토리를 바로 열어서 사용할 수 있는 확장이다. 설치하면 &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=GitHub.remotehub&quot;&gt;GitHub Repositories&lt;/a&gt;, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-repos&quot;&gt;Azure Repos&lt;/a&gt; 확장도 함께 설치된다.&lt;/p&gt;
&lt;p&gt;깃허브와 애저 리포지토리를 지원한다. 애저는 안 써서 필요 없는데 같이 설치된다…&lt;/p&gt;
&lt;p&gt;사이드바에 원격 탐색기 메뉴→원격 리포지토리로 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thunder Client&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client&quot;&gt;https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;포스트맨처럼 REST API를 테스트할 수 있는 확장이다. 설치하면 사이드바에 Thunder Client가 생긴다.&lt;/p&gt;
&lt;p&gt;원래 &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=humao.rest-client&quot;&gt;REST Client&lt;/a&gt; 확장을 쓰다가 이게 더 사용하기 편리해서 갈아탔다. 물론 REST Client도 사용하긴 조금 복잡하지만, 내용이 파일로 관리된다는 장점이 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Trailing Spaces&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces&quot;&gt;https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;줄 끝에 공백이 있으면 빨간색으로 강조 표시를 해주는 확장이다. 설정에 따라 자동으로 삭제시킬 수도 있는데 이러면 부작용이 있어서 설정하지 않고 사용한다.&lt;/p&gt;
&lt;p&gt;이런 거에 집착하는 스타일이라 꼭 필요하다.ㅎㅎ&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;translator&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=sculove.translator&quot;&gt;https://marketplace.visualstudio.com/items?itemName=sculove.translator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;번역 확장이다. 단축키는 Ctrl+shift+T이고 한국어를 선택하고 단축키를 누르면 영어로, 영어를 선택하고 단축키를 누르면 한국어가 뜬다.&lt;/p&gt;
&lt;p&gt;기본적으로 구글 번역 API를 사용하는데 결과가 썩 만족스럽지는 않다. 그래도 간단하게 쓰기엔 좋다.&lt;/p&gt;
&lt;h3&gt;HTML | CSS&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Auto Complete Tag&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-complete-tag&quot;&gt;https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-complete-tag&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag&quot;&gt;Auto Close Tag&lt;/a&gt;와 &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag&quot;&gt;Auto Rename Tag&lt;/a&gt;를 묶은 확장팩&lt;/p&gt;
&lt;p&gt;Auto Close Tag는 HTML 태그를 입력하면 닫는 태그를 자동으로 넣어준다. vscode 기본 기능도 있지만 기본 기능은 HTML 파일에서만 작동하고 이 확장은 더 다양한 언어에서 작동한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;auto-close-tag.SublimeText3Mode&amp;quot;: true,&lt;/code&gt; 옵션을 추가하면 &amp;lt;/를 입력했을 때 닫는 태그를 자동으로 추가한다.&lt;/p&gt;
&lt;p&gt;Auto Rename Tag는 태그 이름을 바꿀 때 닫는 태그도 같이 바꿔준다. 이것도 역시 vscode 기본 기능이 있지만 기본 기능은 HTML 파일에서만 작동한다.&lt;/p&gt;
&lt;p&gt;한 가지 아쉬운 점은 실수로 한글을 입력하면 기능이 작동하지 않는다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Color Highlight&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight&quot;&gt;https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;색상 코드가 있으면 텍스트 배경으로 해당 색을 보여주는 확장이다. 직관적이어서 편함&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSS Peek&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek&quot;&gt;https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;html 파일에서 class와 id에 커서를 올리면 참조하고 있는 css 스타일 속성을 보여준다. 웹 개발 필수 확장&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSS Variable Autocomplete&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=vunguyentuan.vscode-css-variables&quot;&gt;https://marketplace.visualstudio.com/items?itemName=vunguyentuan.vscode-css-variables&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;css 변수에 대한 자동 완성을 추가하는 확장이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Highlight Matching Tag&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=vincaslt.highlight-matching-tag&quot;&gt;https://marketplace.visualstudio.com/items?itemName=vincaslt.highlight-matching-tag&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;html 파일에서 태그에 커서가 위치하면 짝이 되는 태그를 밑줄로 표시해 준다. 상태표시줄에 태그 경로를 표시하는 기능도 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTML End Tag Labels&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=anteprimorac.html-end-tag-labels&quot;&gt;https://marketplace.visualstudio.com/items?itemName=anteprimorac.html-end-tag-labels&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;닫는 태그 끝에 해당 태그의 아이디와 클래스명을 표시하는 확장이다. 짝이 되는 태그를 구분할 때 유용하다는 점에서 선술한 Highlight Matching Tag와 비슷한데 이건 부트스트랩, 테일윈드css 같은 유틸리티 퍼스트 라이브러리를 사용할 때 (클래스명이 덕지덕지 붙다 보니까) 더 유용하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTMLHint&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=HTMLHint.vscode-htmlhint&quot;&gt;https://marketplace.visualstudio.com/items?itemName=HTMLHint.vscode-htmlhint&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;htmlhint에 대한 지원을 추가한다. &lt;a href=&quot;https://htmlhint.com/&quot;&gt;HTMLHint&lt;/a&gt;는 html의 eslint 같은 툴이다.&lt;/p&gt;
&lt;p&gt;기본적으로 설치되어 있는 htmlhint를 사용하고 설치되어 있지 않아도 확장에 내장된 버전을 사용한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;htmltagwrap&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=bradgashler.htmltagwrap&quot;&gt;https://marketplace.visualstudio.com/items?itemName=bradgashler.htmltagwrap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Alt+W를 누르면 선택한 부분을 &lt;p&gt; 태그로 감싸준다. 리액트를 하면서 &amp;lt;&amp;gt;로 감쌀 일이 자주 있는데 꽤 편하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IntelliSense for CSS class names in HTML&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Zignd.html-css-class-completion&quot;&gt;https://marketplace.visualstudio.com/items?itemName=Zignd.html-css-class-completion&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;html 파일에서 클래스명 자동 완성 확장이다. 리액트에 대응하는 className도 지원한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Live Preview&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server&quot;&gt;https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;html 파일 결과물을 실시간으로 볼 수 있는 확장이다. 파일을 열고 탭 옆에 미리 보기 표시를 누르면 내장 브라우저에 결과물이 뜬다. 게다가 파일 내용이 변경되면 실시간으로 반영된다. 내부적으로 웹서버를 띄우기 때문에 url을 그대로 다른 브라우저에 입력해서 똑같이 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;원래 &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&quot;&gt;Live Server&lt;/a&gt; 확장을 사용했었는데 이게 새로 나왔길래 이걸로 바꿨다. 아무래도 마소가 직접 만든 거니까…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PostCSS Language Support&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=csstools.postcss&quot;&gt;https://marketplace.visualstudio.com/items?itemName=csstools.postcss&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;최신 css 문법에 대한 구문 강조를 추가한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&amp;quot;emmet.includeLanguages&amp;quot;: {
  &amp;quot;postcss&amp;quot;: &amp;quot;css&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 설정도 추가해야 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;px to rem &amp;amp; rpx &amp;amp; vw (cssrem)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=cipchk.cssrem&quot;&gt;https://marketplace.visualstudio.com/items?itemName=cipchk.cssrem&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;px나 rem에 커서를 두고 Alt+Z를 누르면 px↔rem이 서로 변환된다. 그리고 단위 입력할 때 자동 완성도 추가된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stylelint&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint&quot;&gt;https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;stylelint에 대한 지원을 추가한다. 프로젝트에 stylelint가 설치되어 있어야 한다. eslint와는 다르게 존재를 늦게 알아서 본격적으로 써보진 못했다.&lt;/p&gt;
&lt;h3&gt;JavaScript&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Babel JavaScript&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=mgmcdermott.vscode-language-babel&quot;&gt;https://marketplace.visualstudio.com/items?itemName=mgmcdermott.vscode-language-babel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;최신 자바스크립트 문법(ES201x)에 대한 구문 강조를 추가한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ESLint&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint&quot;&gt;https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;eslint에 대한 지원을 추가한다. 프로젝트에 eslint가 설치되어 있어야 한다.&lt;/p&gt;
&lt;p&gt;웹 개발에 있어서 eslint는 필수&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Import Cost&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost&quot;&gt;https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;import 코드 옆에 해당 패키지의 용량을 표시한다. 사소하지만 최적화하는 데 도움이 된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Javascript Auto Backticks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=chamboug.js-auto-backticks&quot;&gt;https://marketplace.visualstudio.com/items?itemName=chamboug.js-auto-backticks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;작은따옴표(’)나 큰따옴표(”)로 작성 중인 문자열을 필요할 때 백틱(`)으로 변환하는 확장이다. 귀차니즘 해결&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JS Quick Console&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=AhadCove.js-quick-console&quot;&gt;https://marketplace.visualstudio.com/items?itemName=AhadCove.js-quick-console&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;변수를 선택하고 Ctrl+Shift+L을 누르면 console.log 코드를 자동으로 추가하는 확장이다. 귀차니즘 해결&lt;/p&gt;
&lt;p&gt;정확히는 변수뿐만 아니라 드래그한 부분이 console.log로 들어간다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;npm Intellisense&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense&quot;&gt;https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;import 문에서 npm 패키지 자동완성을 추가하는 확장이다. 기본적으로 dependencies만을 대상으로 하는데 &lt;code&gt;&amp;quot;npm-intellisense.scanDevDependencies&amp;quot;: true,&lt;/code&gt; 설정으로 devDependencies도 포함할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prettier - Code formatter&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&quot;&gt;https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;prettier에 대한 지원을 추가한다. 프로젝트에 prettier가 설치되어 있지 않으면 내장된 prettier를 사용한다. 웹 개발에 있어서 prettier는 eslint와 함께 필수&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&amp;quot;[javascript]&amp;quot;: {
    &amp;quot;editor.defaultFormatter&amp;quot;: &amp;quot;esbenp.prettier-vscode&amp;quot;,
    &amp;quot;editor.tabSize&amp;quot;: 2
},
&amp;quot;[html]&amp;quot;: {
    &amp;quot;editor.defaultFormatter&amp;quot;: &amp;quot;esbenp.prettier-vscode&amp;quot;,
    &amp;quot;editor.tabSize&amp;quot;: 2
},
&amp;quot;[php]&amp;quot;: {
    &amp;quot;editor.defaultFormatter&amp;quot;: &amp;quot;esbenp.prettier-vscode&amp;quot;,
    &amp;quot;editor.tabSize&amp;quot;: 2
},&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;prettier 확장을 포매터로 사용하려면 위 설정이 필요하다. 일단 javascript, html, php에만 적용해 놨다.&lt;/p&gt;
&lt;p&gt;.prettierrc를 인식하긴 하지만 전역으로 작은따옴표만 사용하고 싶어서 &lt;code&gt;&amp;quot;prettier.singleQuote&amp;quot;: true,&lt;/code&gt; 설정도 추가했다. 이거 말곤 기본값 스타일이 마음에 든다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Preview.js&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=zenclabs.previewjs&quot;&gt;https://marketplace.visualstudio.com/items?itemName=zenclabs.previewjs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;UI 컴포넌트를 미리 볼 수 있는 확장이다. React, Preact, Solid, Svelte, Vue를 지원하기 때문에 웬만한 건 다 지원한다 보면 된다. 설치 후 컴포넌트 선언 위쪽에 Open &lt;del&gt;~&lt;/del&gt; in Preview.js가 생겨서 누르면 미리보기가 화면 분할로 열린다.(약간 스토리북 느낌)&lt;/p&gt;
&lt;p&gt;정말 신기하고 강력한 확장인데 아쉽게도 뭔가 척척 동작하지 않는다…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version Lens&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=pflannery.vscode-versionlens&quot;&gt;https://marketplace.visualstudio.com/items?itemName=pflannery.vscode-versionlens&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;패키지 버전을 표시하는 확장이다. package.json 파일을 열면 탭 옆에 Show dependency versions 버튼이 생기는데 버튼을 누르면 npm에서 버전 정보를 가져와서 기준을 만족하는 버전(설치된 버전 아님)과 최신 버전을 알려준다.&lt;/p&gt;
&lt;p&gt;패키지 업데이트 여부를 빠르게 파악할 수 있다. npm 말고 닷넷, 메이븐 등 다른 언어의 패키지도 지원하는 거 같지만 일단 사용 중인 건 npm 뿐이라…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ZipFS - a zip file system&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=arcanis.vscode-zipfs&quot;&gt;https://marketplace.visualstudio.com/items?itemName=arcanis.vscode-zipfs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;개인 프로젝트에 공부 삼아 yarn berry와 pnp를 도입하면서 설치했다. pnp는 패키지를 zip 파일로 보관하는데 이를 읽을 수 있게 해준다.&lt;/p&gt;
&lt;h3&gt;C | C++&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;C/C++&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools&quot;&gt;https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;vscode에서 C나 C++ 개발을 한다면 필수 확장&lt;/p&gt;
&lt;p&gt;근데 이쪽 언어는 최근 들어 구경해 본 적조차 없다…&lt;/p&gt;
&lt;p&gt;후술할 Inline Parameters 확장처럼 파라미터 이름 표시를 추가하려면 &lt;code&gt;&amp;quot;C_Cpp.inlayHints.parameterNames.enabled&amp;quot;: true,&lt;/code&gt; 설정을 추가하면 된다.&lt;/p&gt;
&lt;h3&gt;C#&lt;/h3&gt;
&lt;p&gt;C#&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp&quot;&gt;https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;vscode에서 C# 개발을 한다면 필수 확장&lt;/p&gt;
&lt;p&gt;여기도 대학 졸업 이후로 본 적이 없는…&lt;/p&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Better Jinja&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=samuelcolvin.jinjahtml&quot;&gt;https://marketplace.visualstudio.com/items?itemName=samuelcolvin.jinjahtml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;진자 템플릿 엔진에 대한 구문 강조를 추가한다. 원래 진자가 정해진 확장자가 없지만 기본적으로 &lt;code&gt;.jinja&lt;/code&gt;, &lt;code&gt;.jinja2&lt;/code&gt;, &lt;code&gt;.j2&lt;/code&gt;, &lt;code&gt;.html.j2&lt;/code&gt;에 연결되어 있으니, 확장자를 이걸 사용하는 게 직접 파일 형식을 지정하는 것보다 편하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Black Formatter&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-python.black-formatter&quot;&gt;https://marketplace.visualstudio.com/items?itemName=ms-python.black-formatter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;파이썬 black 포매터 확장&lt;/p&gt;
&lt;p&gt;파이썬 포매터로 &lt;a href=&quot;https://github.com/hhatto/autopep8&quot;&gt;autopep8&lt;/a&gt;, &lt;a href=&quot;https://black.readthedocs.io/&quot;&gt;black&lt;/a&gt;, &lt;a href=&quot;https://github.com/google/yapf&quot;&gt;yapf&lt;/a&gt;가 유명한데 조사를 해보니 black이 내 취향이라 이걸로 골랐다.(prettier 느낌~) vscode 기본 기능으로 black 포매터를 지정할 수 있지만 이건 black 패키지가 설치되어 있어야 하는데, 이 확장을 사용하면 설치되어 있지 않아도 사용할 수 있다.(물론 설치되어 있으면 설치된 패키지를 우선 사용)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&amp;quot;[python]&amp;quot;: {
    &amp;quot;editor.defaultFormatter&amp;quot;: &amp;quot;ms-python.black-formatter&amp;quot;
},
&amp;quot;python.formatting.provider&amp;quot;: &amp;quot;none&amp;quot;,&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;black 확장을 파이썬 포매터로 사용하려면 위 설정이 필요하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Inline Parameters Extended for VSCode&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=RobertOstermann.inline-parameters-extended&quot;&gt;https://marketplace.visualstudio.com/items?itemName=RobertOstermann.inline-parameters-extended&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;함수를 호출할 때 매개변수에 주석(변수명)을 추가하는 확장이다. 인텔리제이에선 익숙한 기능인데 vscode에선 이 확장으로 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;Go, Java, Lua, PHP, Python을 지원한다.&lt;/p&gt;
&lt;p&gt;참고로 JavaScript, TypeScript에 대한 건 내장 기능으로 사용할 수 있다. 각각 &lt;code&gt;&amp;quot;javascript.inlayHints.parameterNames.enabled&amp;quot;: &amp;quot;all&amp;quot;,&lt;/code&gt;, &lt;code&gt;&amp;quot;typescript.inlayHints.parameterNames.enabled&amp;quot;: &amp;quot;all&amp;quot;,&lt;/code&gt;이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jupyter&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter&quot;&gt;https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;주피터 노트북을 vscode 내부에서 바로 사용할 수 있는 확장이다. 설치하면 &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter-keymap&quot;&gt;Jupyter Keymap&lt;/a&gt;, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter-renderers&quot;&gt;Jupyter Notebook Renderers&lt;/a&gt;, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-toolsai.vscode-jupyter-slideshow&quot;&gt;Jupyter Slide Show&lt;/a&gt;, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-toolsai.vscode-jupyter-cell-tags&quot;&gt;Jupyter Cell Tags&lt;/a&gt; 확장이 같이 설치된다.(이거까진 필요 없는데…)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pylance&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance&quot;&gt;https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;정적 타입 체커인 &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-pyright.pyright&quot;&gt;Pyright&lt;/a&gt;가 내장된 파이썬 언어 서버 확장&lt;/p&gt;
&lt;p&gt;vscode에서 파이썬 개발을 한다면 파이썬 확장과 함께 필수 확장이다. &lt;code&gt;&amp;quot;python.languageServer&amp;quot;: &amp;quot;Pylance&amp;quot;,&lt;/code&gt; 설정 필수&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-python.python&quot;&gt;https://marketplace.visualstudio.com/items?itemName=ms-python.python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;vscode에서 Python 개발을 한다면 필수 확장&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ruff&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff&quot;&gt;https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;파이썬 ruff 린터 확장&lt;/p&gt;
&lt;p&gt;파이썬 린터로 &lt;a href=&quot;https://pypi.org/project/pylint/&quot;&gt;pylint&lt;/a&gt;, &lt;a href=&quot;https://pypi.org/project/flake8/&quot;&gt;flake8&lt;/a&gt;, &lt;a href=&quot;https://pypi.org/project/mypy/&quot;&gt;mypy&lt;/a&gt;, &lt;a href=&quot;https://pypi.org/project/pycodestyle/&quot;&gt;pycodestyle&lt;/a&gt;, &lt;a href=&quot;https://pypi.org/project/prospector/&quot;&gt;prospector&lt;/a&gt; 등이 유명한데 원래 &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-python.pylint&quot;&gt;Pylint&lt;/a&gt;를 사용하다가 비교적 최근에 &lt;a href=&quot;https://github.com/charliermarsh/ruff&quot;&gt;Ruff&lt;/a&gt;라는 린터가 새로 나왔다길래 사용 중이다. 그리고 파이썬 import 목록을 보기 좋게 정렬해 주는 패키지인 &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-python.isort&quot;&gt;isort&lt;/a&gt;의 기능도 내장되어 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&amp;quot;[python]&amp;quot;: {
    &amp;quot;editor.codeActionsOnSave&amp;quot;: {
        &amp;quot;source.fixAll&amp;quot;: true,
        &amp;quot;source.organizeImports&amp;quot;: true
    },
},&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;파일을 저장할 때마다 자동으로 포매팅하고 오류를 수정하려면 위 설정이 필요하다.&lt;/p&gt;
&lt;h3&gt;AutoHotkey&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;AutoHotkey Plus Plus&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=mark-wiemer.vscode-autohotkey-plus-plus&quot;&gt;https://marketplace.visualstudio.com/items?itemName=mark-wiemer.vscode-autohotkey-plus-plus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;오토핫키 인텔리센스를 추가한다. 아직 AHK v2를 지원하지 않는다.(그래도 어느 정도 호환되기는 함)&lt;/p&gt;
&lt;h3&gt;Git&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Git File History&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=pomber.git-file-history&quot;&gt;https://marketplace.visualstudio.com/items?itemName=pomber.git-file-history&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;후술할 확장들로도 히스토리를 볼 수 있는데 이 확장을 설치한 이유는 히스토리를 단계별로 미려하게 확인해 볼 수 있어서이다. &lt;code&gt;Git File History&lt;/code&gt; 명령어로 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Git Graph&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph&quot;&gt;https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gui 상에서 git 작업을 할 수 있는 확장이다. 사이드바 소스 제어 메뉴의 소스 제어 부분 우측에 View Git Graph 버튼이나 상태표시줄의 Git Graph 버튼으로 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;후술할 GitLens가 워낙 강력해서 완전히 기능이 겹치지만, 남겨놓은 이유는 gui가 쓰기 편리해서이다. 그래프 디자인도 이쪽이 더 보기 좋고… 사실 git 작업은 vscode에서 안 하고 소스트리로만 해서 거의 써본 적이 없긴 하다…ㅎ&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GitLens — Git supercharged&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens&quot;&gt;https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;사실 git 확장은 이거로만 대동단결해도 충분하다.(그래서 많은 글에서 추천하는 &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory&quot;&gt;Git History&lt;/a&gt; 확장도 지웠다.) 특히, 편집기에서 라인 끝에 해당 코드는 누가 수정했는지 표시해 주는데 이게 협업 시에 굉장히 유용하다.&lt;/p&gt;
&lt;p&gt;사이드바에 GitLens 메뉴가 추가되어서 사용할 수 있다. 파일 별로를 넘어서 라인 별로 히스토리 보는 기능도 꽤 유용하다.&lt;/p&gt;
&lt;h3&gt;Log&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Auto Reload&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=sebastian-lay.auto-reload&quot;&gt;https://marketplace.visualstudio.com/items?itemName=sebastian-lay.auto-reload&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;파일이 변경되면 자동으로 다시 읽는 확장이다. 설치하면 우측 하단에 Auto Reload 버튼이 생기는데 이걸 눌러서 활성화할 수 있다.&lt;/p&gt;
&lt;p&gt;로그 파일 볼 때 유용하고 후술할 AutoScroll 확장과 궁합이 좋다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AutoScroll&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=pejmannikram.vscode-auto-scroll&quot;&gt;https://marketplace.visualstudio.com/items?itemName=pejmannikram.vscode-auto-scroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;파일 내용이 변화하면 스크롤을 맨 밑으로 내려주는 확장이다. log 확장자에선 기본적으로 활성화되어 있고 다른 확장자에서는 &lt;code&gt;Enable Auto Scroll&lt;/code&gt; 명령어로 활성화할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Log File Highlighter&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=emilast.LogFileHighlighter&quot;&gt;https://marketplace.visualstudio.com/items?itemName=emilast.LogFileHighlighter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;log 파일에 구문 강조를 추가한다.&lt;/p&gt;
&lt;h3&gt;테마&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Material Icon Theme&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme&quot;&gt;https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;회사&lt;/h3&gt;
&lt;p&gt;회사에서만 필요한 확장 기록&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AWS Toolkit&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.aws-toolkit-vscode&quot;&gt;https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.aws-toolkit-vscode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;회사에서 aws를 사용 중이라 설치했다.&lt;/p&gt;
&lt;p&gt;유저 데이터 전송을 막고 싶으면 &lt;code&gt;&amp;quot;aws.telemetry&amp;quot;: false,&lt;/code&gt; 설정을 추가하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data Preview&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=GrapeCity.gc-excelviewer&quot;&gt;https://marketplace.visualstudio.com/items?itemName=GrapeCity.gc-excelviewer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;온갖 데이터 파일들을 보기 좋게 출력해준다. 선술한 Excel Viewer를 대체할 수 있어서 한번 사용해 보는 중이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker&quot;&gt;https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;회사에서 도커 사용 중이라 설치&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EJS Beautify&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=j69.ejs-beautify&quot;&gt;https://marketplace.visualstudio.com/items?itemName=j69.ejs-beautify&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ejs를 prettier로 돌리면 괴이해져서 찾은 확장이다. 프리티어만큼 마음에 드는 결과물은 아니지만 괜찮게 포매팅해 준다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jest&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Orta.vscode-jest&quot;&gt;https://marketplace.visualstudio.com/items?itemName=Orta.vscode-jest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;테스팅 라이브러리인 &lt;a href=&quot;https://jestjs.io/&quot;&gt;jest&lt;/a&gt;의 테스트를 직관적으로 표시하고 자동으로 수행하는 확장이다. 설치하면 사이드바의 테스트 메뉴에서 사용할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&amp;quot;jest.autoRun&amp;quot;: {
    &amp;quot;watch&amp;quot;: false,
    &amp;quot;onSave&amp;quot;: &amp;quot;test-file&amp;quot;
},&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;기본값은 파일 변경 시 자동으로 테스트 실행인데 프로젝트가 무거워서 테스트 돌 때마다 버벅대는 문제 때문에 일단 위 설정으로 자동 실행을 끄고 테스트 파일 변경 시에만 테스트가 돌도록 해놨다.&lt;/p&gt;
&lt;p&gt;테스트 코드를 도입하고 싶은데 잘 안된다…ㅠㅠ&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multiline Structural Search - CodeQue&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=CodeQue.codeque&quot;&gt;https://marketplace.visualstudio.com/items?itemName=CodeQue.codeque&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;문법을 이해해 구조적으로 코드를 검색하는 툴이라는데 아직 잘 모르겠다. 더 써봐야 할 듯…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Playwright Test for VSCode&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright&quot;&gt;https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;테스팅 라이브러리인 playwright를 vscode와 통합하는 확장이다. 역시 테스트 코드 도입의 길은 험난하다…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;psioniq File Header&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=psioniq.psi-header&quot;&gt;https://marketplace.visualstudio.com/items?itemName=psioniq.psi-header&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;파일 상단에 저작권 표시를 자동으로 추가해 준다. 한가지 치명적인 문제가 있는데 연도를 넣었을 때 해가 바뀌면 기존에 이미 들어가 있던 연도는 갱신이 안 된다. 설정에 바뀌도록 하는 게 있는 거 같은데 내가 이해를 잘못한 건지 아무런 효과가 없다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;YAML&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml&quot;&gt;https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;yaml에 대한 언어 지원을 추가하는 확장이다. yml 파일을 수정할 일이 생겨서 설치&lt;/p&gt;
            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>프로그램</category>
<category>JavaScript</category>
<category>Python</category>
<category>개발</category>
<category>자바스크립트</category>
<category>파이썬</category>
<category>프로그래밍</category>
<category>확장</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1270</guid>
<comments>https://blog.joyfui.com/1270#entry1270comment</comments>
<pubDate>Thu, 11 May 2023 23:11:20 +0900</pubDate>
</item>
<item>
<title>[JavaScript] query string를 object로 변환하기</title>
<link>https://blog.joyfui.com/1269</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;예전에 &lt;a href=&quot;https://blog.joyfui.com/1206&quot;&gt;fetch로 form data 보내기&lt;/a&gt; 글에서 오브젝트를 쿼리 스트링으로 변환하는 방법으로 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams&quot;&gt;URLSearchParams&lt;/a&gt;를 소개한 적이 있다.&lt;/p&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;const objectToQueryString = (object) =&amp;gt; new URLSearchParams(object).toString();&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;최근에 반대로 쿼리 스트링을 오브젝트로 변환할 일이 있어서 찾아봤더니 굉장히 간단했다.&lt;/p&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;const queryStringToObject = (queryString) =&amp;gt; Object.fromEntries(
  new URLSearchParams(queryString)
);&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries&quot;&gt;Object.fromEntries&lt;/a&gt;는 [key, value] 형태가 들어있는 배열을 object로 만들어 준다. 사실 URLSearchParams에 entries() 메소드가 있는데 얘가 URLSearchParams를 [key, value] 배열이 들어있는 배열을 반환한다. (물론 정확히는 배열이 아니라 이터레이터긴 하다) 근데 굳이 안 써줘도 작동함.&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>웹</category>
<category>JavaScript</category>
<category>자바스크립트</category>
<category>프로그래밍</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1269</guid>
<comments>https://blog.joyfui.com/1269#entry1269comment</comments>
<pubDate>Sun, 23 Apr 2023 02:27:28 +0900</pubDate>
</item>
<item>
<title>[JavaScript] Debounce, Throttle 함수</title>
<link>https://blog.joyfui.com/1268</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;디바운싱과 쓰로틀링 함수는 유용해서 은근히 자주 쓰이는데 메모용으로 글을 남겨둔다.&lt;/p&gt;
&lt;h3 data-ke-size=&quot;size23&quot;&gt;Debounce&lt;/h3&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;디바운싱 함수는 여러 번 호출되는 함수 중 마지막 함수만 실행하는 역할을 한다. 디바운싱 함수 실행 후 일정 시간 후에 지정한 함수가 실행되는데 그사이에 디바운싱 함수가 또 실행된다면 일정 시간을 다시 기다리는 동작을 한다.&lt;/p&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;function debounce(func, delay) {
  let timeout;
  return function() {
    const context = this;
    const args = arguments;
    clearTimeout(timeout);
    timeout = setTimeout(() =&amp;gt; func.apply(context, args), delay);
  };
}&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;주로 ajax 요청이 너무 자주 일어나는 걸 막을 때 유용하다.&lt;/p&gt;
&lt;h3 data-ke-size=&quot;size23&quot;&gt;Throttle&lt;/h3&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;쓰로틀링 함수는 마지막 함수가 실행된 후 일정 시간 동안 다시 호출되지 않도록 하는 역할을 한다. 쓰로틀링 함수 실행 후 지정한 함수가 실행되고 일정 시간 내에 실행되는 쓰로틀링 함수는 무시되는 동작을 한다.&lt;/p&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;function throttle(func, delay) {
  let wait = false;

  return (...args) =&amp;gt; {
    if (wait) {
        return;
    }

    func(...args);
    wait = true;
    setTimeout(() =&amp;gt; {
      wait = false;
    }, delay);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;주로 스크롤이나 창 크기 이벤트처럼 너무 자주 발생하는 걸 막을 때 유용하다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;코드 출처: &lt;a href=&quot;https://velog.io/@typo/advanced-javascript-functions-to-improve-code-quality&quot;&gt;https://velog.io/@typo/advanced-javascript-functions-to-improve-code-quality&lt;/a&gt;&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>웹</category>
<category>JavaScript</category>
<category>자바스크립트</category>
<category>프로그래밍</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1268</guid>
<comments>https://blog.joyfui.com/1268#entry1268comment</comments>
<pubDate>Sat, 18 Mar 2023 12:00:20 +0900</pubDate>
</item>
<item>
<title>마인크래프트 서버 포트 정리</title>
<link>https://blog.joyfui.com/1267</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;오라클 클라우드가 놀고 있는 게 아까워서 마크 서버를 열었다. &lt;del&gt;중학교 땐 나름 국내 마인크래프트 서버 계에서 이름있는 편이었는데&amp;hellip;&lt;/del&gt; 오랜만에 서버를 열려고 찾아보니 참 많이 변했다. 내 기억 속 마크는 1.3에서 멈춰있거늘&amp;hellip; 버전도 어느새 1.19다. ㄷㄷ&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;무엇보다 Craftbukkit이 죽고 Spigot가 떠올랐다. (물론 나는 대세인 Paper로 서버를 열었다.)&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;아무튼 이젠 &lt;del&gt;개발자니까!&lt;/del&gt; 도커로 서버를 열고(도커 이미지는 &lt;a href=&quot;https://github.com/itzg/docker-minecraft-server&quot;&gt;minecraft-server&lt;/a&gt;를 사용했다.) 플러그인 몇 개 넣고 포트를 열어주니 무난하게 서버가 열렸다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;근데 문제가 있었다. GeyserMC 플러그인을 추가해서 자바 에디션 유저뿐만 아니라 베드락 에디션 유저도 접속할 수 있게 했는데 실제로 베드락 에디션에서 접속을 시도해보니 안되는 것이었다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;도커 포트도 맵핑하고 오라클 클라우드 방화벽 설정도 다 해서 자바 에디션에선 잘되는데 왜 베드락 에디션만 안되지 하고 한참 뻘짓하다가 허무하게 원인을 찾았다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;베드락 에디션은 UDP를 사용한다.&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&amp;hellip; tcp 대신 udp 19132 포트를 열어주니 해결ㅠㅠ&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;다시 정리하자면 다음과 같다.&lt;/p&gt;
&lt;ul style=&quot;list-style-type: disc;&quot; data-ke-list-type=&quot;disc&quot;&gt;
&lt;li&gt;자바 에디션: TCP 25565&lt;/li&gt;
&lt;li&gt;베드락 에디션: UDP 19132&lt;/li&gt;
&lt;/ul&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>기타</category>
<category>Game</category>
<category>MINECRAFT</category>
<category>server</category>
<category>게임</category>
<category>마인크래프트</category>
<category>서버</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1267</guid>
<comments>https://blog.joyfui.com/1267#entry1267comment</comments>
<pubDate>Sat, 11 Mar 2023 12:00:29 +0900</pubDate>
</item>
<item>
<title>[자작] DJ DJ pump this party</title>
<link>https://blog.joyfui.com/1266</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;회사에 블루투스 스피커가 있어서 노래 재생용 컴퓨터 하나 두고 노래를 틀어두는데 노래 틀러 재생용 컴퓨터까지 왔다 갔다 하는 게 불편하던 중 우연히 인터넷에서 파이썬으로 유튜브 플레이어를 만드는 글을 보고 노래 재생 웹앱을 하나 만들어봤다. 할 일 없는 주말에 모처럼 재밌게 코딩했다?&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;파이썬 &lt;a href=&quot;https://flask.palletsprojects.com/&quot;&gt;Flask&lt;/a&gt;로 만들었고 스트리밍 url 추출에 &lt;a href=&quot;https://github.com/yt-dlp/yt-dlp&quot;&gt;yt-dlp&lt;/a&gt;, 소리 재생에 &lt;a href=&quot;https://pypi.org/project/python-vlc/&quot;&gt;python-vlc&lt;/a&gt; 라이브러리를 사용했다. 또, 차트랑 노래 검색 기능이 있는데 이건 &lt;a href=&quot;https://ytmusicapi.readthedocs.io/&quot;&gt;ytmusicapi&lt;/a&gt; 라이브러리를 사용했다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;디자인은 내가 예술 감각이 제로라 그나마 &lt;a href=&quot;https://getbootstrap.kr/&quot;&gt;부트스트랩&lt;/a&gt;을 사용해서 이게 최선이다.ㅠㅠ&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;소리 재생에 vlc를 사용하므로 &lt;a href=&quot;https://www.videolan.org/&quot;&gt;vlc 플레이어&lt;/a&gt;를 설치해야 한다. 나는 &lt;s&gt;굳이 설치하고 싶지 않아서&lt;/s&gt; 무설치 버전으로 적당한 곳에 풀고 VLC_PATH 환경변수 지정해서 사용하고 있다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;1월 말부터 개발 시작해서 회사에서 사용하면서 조금씩 업데이트하다가 이제 어느 정도 처음에 구상했던 기능들도 전부 구현 완료해서 블로그에도 글을 올린다. 이제 기능 쪽은 더 이상 업데이트할 건 없을 것 같고 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components&quot;&gt;웹 컴포넌트&lt;/a&gt; 도입, 폴링 대신 웹소켓(&lt;a href=&quot;https://socket.io/&quot;&gt;Socket.IO&lt;/a&gt;) 사용, 가상돔(&lt;a href=&quot;https://github.com/snabbdom/snabbdom&quot;&gt;snabbdom&lt;/a&gt;) 도입 등 기술적으로(?) 내실을 다져보려고 한다. &lt;s&gt;토이 프로젝트라는 게 이런 재미 아니겠는가ㅎㅎ&lt;/s&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;리포지토리 주소: &lt;a href=&quot;https://github.com/joyfuI/dj_dj_pump_this_party&quot; rel=&quot;noopener&quot;&gt;https://github.com/joyfuI/dj_dj_pump_this_party&lt;/a&gt;&lt;/p&gt;
&lt;figure id=&quot;og_1677934258171&quot; contenteditable=&quot;false&quot; data-ke-type=&quot;opengraph&quot; data-ke-align=&quot;alignCenter&quot; data-og-type=&quot;object&quot; data-og-title=&quot;GitHub - joyfuI/dj_dj_pump_this_party: 회사에서 사용하려고 만든 간단한 음악 재생용 웹앱&quot; data-og-description=&quot;회사에서 사용하려고 만든 간단한 음악 재생용 웹앱. Contribute to joyfuI/dj_dj_pump_this_party development by creating an account on GitHub.&quot; data-og-host=&quot;github.com&quot; data-og-source-url=&quot;https://github.com/joyfuI/dj_dj_pump_this_party&quot; data-og-url=&quot;https://github.com/joyfuI/dj_dj_pump_this_party&quot; data-og-image=&quot;https://scrap.kakaocdn.net/dn/bNmcuz/hyRQnnxpPf/vHxDky9qMwqo20cJwBVBL0/img.png?width=1200&amp;amp;height=600&amp;amp;face=0_0_1200_600&quot;&gt;&lt;a href=&quot;https://github.com/joyfuI/dj_dj_pump_this_party&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-source-url=&quot;https://github.com/joyfuI/dj_dj_pump_this_party&quot;&gt;
&lt;div class=&quot;og-image&quot; style=&quot;background-image: url('https://scrap.kakaocdn.net/dn/bNmcuz/hyRQnnxpPf/vHxDky9qMwqo20cJwBVBL0/img.png?width=1200&amp;amp;height=600&amp;amp;face=0_0_1200_600');&quot;&gt;&amp;nbsp;&lt;/div&gt;
&lt;div class=&quot;og-text&quot;&gt;
&lt;p class=&quot;og-title&quot; data-ke-size=&quot;size16&quot;&gt;GitHub - joyfuI/dj_dj_pump_this_party: 회사에서 사용하려고 만든 간단한 음악 재생용 웹앱&lt;/p&gt;
&lt;p class=&quot;og-desc&quot; data-ke-size=&quot;size16&quot;&gt;회사에서 사용하려고 만든 간단한 음악 재생용 웹앱. Contribute to joyfuI/dj_dj_pump_this_party development by creating an account on GitHub.&lt;/p&gt;
&lt;p class=&quot;og-host&quot; data-ke-size=&quot;size16&quot;&gt;github.com&lt;/p&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/figure&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;ytmusicapi 라이브러리를 사용하는 기능(검색, 차트, 자동재생)을 사용하기 위해선 유튜브 뮤직 인증토큰이 필요하다. 인증토큰 구하는 방법은 &lt;a href=&quot;https://ytmusicapi.readthedocs.io/en/latest/setup.html#copy-authentication-headers&quot;&gt;이 링크&lt;/a&gt;를 참고하면 되고 자세한 세팅 방법은 리포지토리의 README.md를 참고하면 된다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;최근에 플레이리스트 추가 기능을 추가하면서 중요한 꿀팁 소개. &lt;a href=&quot;https://www.youtube.com/watch?v=%5C$%7BvideoId%7D&amp;amp;list=RDAMVM%5C$%7BvideoId%7D&quot;&gt;https://www.youtube.com/watch?v=\${videoId}&amp;amp;list=RDAMVM\${videoId}&lt;/a&gt; 꼴의 URL은 유튜브에서 자동으로 생성해주는 해당 videoId의 믹스 재생 목록이다. 이걸로 비슷한 여러 곡을 한꺼번에 추가할 수 있다. 단, 재생 목록의 영상의 200여 개나 되므로 추가하는 데 오래 걸림&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='1352' data-origin-height='947' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/RyXFn/btr1KwdGEKQ/bk5vEj8izB6amMDGKA3FI0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/RyXFn/btr1KwdGEKQ/bk5vEj8izB6amMDGKA3FI0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FRyXFn%2Fbtr1KwdGEKQ%2Fbk5vEj8izB6amMDGKA3FI0%2Fimg.png' data-filename='Screenshot 2023-03-04 at 21-30-08 DJ DJ pump this party.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>Python</category>
<category>HTML</category>
<category>JavaScript</category>
<category>Python</category>
<category>웹</category>
<category>자작</category>
<category>파이썬</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1266</guid>
<comments>https://blog.joyfui.com/1266#entry1266comment</comments>
<pubDate>Sat, 04 Mar 2023 21:50:25 +0900</pubDate>
</item>
<item>
<title>추천하는 파이어폭스 부가 기능!</title>
<link>https://blog.joyfui.com/1023</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;현재 사용 중인 부가 기능 목록&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;네이버 카페 패스&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%B9%B4%ED%8E%98-%ED%8C%A8%EC%8A%A4/&quot; rel=&quot;noopener&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%B9%B4%ED%8E%98-%ED%8C%A8%EC%8A%A4/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;자작 부가 기능: &lt;a href=&quot;https://joyfui.wo.tc/1142&quot; rel=&quot;noopener&quot;&gt;https://joyfui.wo.tc/1142&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;AdGuard 브라우저 어시스턴트&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/adguard-browser-assistant/&quot; rel=&quot;noopener&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/adguard-browser-assistant/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://adguard.com/&quot;&gt;애드가드&lt;/a&gt;를 사용하면서 같이 설치. 얘가 직접 광고 차단을 하는 건 아니고 데스크톱 앱을 도와주는 역할&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;Augmented Steam&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/augmented-steam/&quot; rel=&quot;noopener&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/augmented-steam/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;스팀 유저라면 필수. 스팀 관련해서 편리한 기능들이 많이 들어있다. 예전 이름은 Enhanced Steam&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;Bitwarden - 무료 비밀번호 관리자&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/bitwarden-password-manager/&quot; rel=&quot;noopener&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/bitwarden-password-manager/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;패스워드 관리 부가 기능. &lt;a href=&quot;https://www.lastpass.com/&quot;&gt;라스트패스&lt;/a&gt;를 쓰다가 비트워든으로 갈아탔다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;Bypass Paywalls&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://github.com/iamadamdev/bypass-paywalls-chrome/blob/master/README.md&quot; rel=&quot;noopener&quot;&gt;https://github.com/iamadamdev/bypass-paywalls-chrome/blob/master/README.md&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;주로 해외 사이트에서 많이 뜨는 구독 팝업을 우회한다고 한다. 아직 효과는 모르겠음&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;Enhanced SteamGifts &amp;amp; SteamTrades (ESGST)&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/esgst/&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/esgst/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;스팀기프트에 다양한 기능을 추가하는 부가 기능. 옛날엔 유저스크립트로 사용하다가 언제부턴가 작동을 안 하길래 부가 기능 버전으로 설치...&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;Enhancer for YouTube&amp;trade;&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/enhancer-for-youtube/&quot; rel=&quot;noopener&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/enhancer-for-youtube/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;유튜브를 더욱 편리하게 만들어주는 부가 기능. &lt;a href=&quot;https://github.com/YePpHa/YouTubeCenter/wiki&quot; rel=&quot;noopener&quot;&gt;YouTube Center&lt;/a&gt;가 이제는 작동을 안 하는 관계로 이걸로 대체.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;Feedly Notifier&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/feedly-notifier/&quot; rel=&quot;noopener&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/feedly-notifier/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;구글 리더가 사라진 후 피들리로 대피&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;Gesturefy&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/gesturefy/&quot; rel=&quot;noopener&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/gesturefy/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;마우스 제스처 부가 기능&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;Github Web IDE&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/github-web-ide/&quot; rel=&quot;noopener&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/github-web-ide/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;깃허브 저장소에 해당 저장소를 &lt;a href=&quot;https://codesandbox.io/&quot;&gt;CodeSandbox&lt;/a&gt;나 &lt;a href=&quot;https://github.com/conwnet/github1s&quot;&gt;github1s&lt;/a&gt; 같은 웹 IDE에서 바로 열 수 있는 버튼을 추가하는 부가 기능&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;Google Search date range shortcut (구글 검색 날짜 범위 추가)&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/googlesearchdaterangeshortcut/&quot; rel=&quot;noopener&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/googlesearchdaterangeshortcut/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;구글 검색에서 기간 설정 날짜 범위를 바꾸는 부가 기능. 예전에 크롬용만 있어서 비슷한 &lt;a href=&quot;https://joyfui.wo.tc/1139&quot;&gt;유저스크립트&lt;/a&gt;를 만든 적이 있었는데 이게 파이어폭스용으로도 나왔다. 내가 만든 거 버리고 바로 갈아탐ㅎㅎ&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;Happy Right-Click&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/%E5%BF%AB%E4%B9%90%E5%8F%B3%E9%94%AE/&quot; rel=&quot;noopener&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/%E5%BF%AB%E4%B9%90%E5%8F%B3%E9%94%AE/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;마우스 우클릭 방지 해제 부가 기능&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;HTTPS Everywhere&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://www.eff.org/https-everywhere&quot; rel=&quot;noopener&quot;&gt;https://www.eff.org/https-everywhere&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;접속하는 사이트가 https를 지원하면 자동으로 https로 접속하는 부가 기능&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;Gmail&amp;trade; Notifier (restartless)&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/gmail-notifier-restartless/&quot; rel=&quot;noopener&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/gmail-notifier-restartless/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;지메일 확인을 위한 부가 기능&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;Notion Web Clipper&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/notion-web-clipper/&quot; rel=&quot;noopener&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/notion-web-clipper/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;에버노트에서 노션으로 이사 완료!&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;Plain Text Linker&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/plain-text-linker/&quot; rel=&quot;noopener&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/plain-text-linker/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;하이퍼링크 연결이 안 돼 있는 주소를 시프트+더블클릭으로 열 수 있게 하는 부가 기능. 귀찮은 복붙 과정이 필요 없음&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;Privacy Pass&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/privacy-pass/&quot; rel=&quot;noopener&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/privacy-pass/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;캡챠 인증을 대신하는 부가 기능. 우회하는게 아니라 표준 프로토콜로 인증한다고 한다. 현재 클라우드플레어에서만 사용하는 듯?&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;Refined GitHub&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/refined-github-/&quot; rel=&quot;noopener&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/refined-github-/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;깃허브를 개선하는 부가 기능&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;Search Result Previews&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/search_result_previews/&quot; rel=&quot;noopener&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/search_result_previews/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;구글 검색 결과에 스크린샷을 추가하는 부가 기능. 이전에 사용하던 SearchPreview는 어느새 개발 중지되었다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;Snowflake&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/torproject-snowflake/&quot; rel=&quot;noopener&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/torproject-snowflake/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;인터넷 검열을 당하는 사람들을 지원하는 부가 기능. tor 프로젝트 중 하나이다. 인터넷 검열국 중 하나인 대한민국 국민으로서 내 코가 석자지만 뭐 손해볼 건 없으니..&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;TWP - Translate Web Pages&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/traduzir-paginas-web/&quot; rel=&quot;noopener&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/traduzir-paginas-web/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;번역 부가 기능을 몇가지 써봤는데 그나마 이게 크롬과 가장 유사하게 동작한다. 그리고 번역 엔진으로 DeepL을 고를 수 있다. &lt;a href=&quot;https://www.deepl.com/ko/translator&quot;&gt;DeepL&lt;/a&gt;은 파이어폭스 부가 기능이 없는데 이걸로 사용 가능&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;User-Agent Switcher and Manager&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/user-agent-string-switcher/&quot; rel=&quot;noopener&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/user-agent-string-switcher/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;유저 에이전트를 바꿔주는 부가 기능. 웹 개발 용&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;Wappalyzer&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/wappalyzer/&quot; rel=&quot;noopener&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/wappalyzer/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;웹 사이트의 기술 스택을 분석해주는 부가 기능. 비슷한 부가 기능으로 &lt;a href=&quot;https://builtwith.com/&quot;&gt;BuiltWith&lt;/a&gt;가 있는데 BuiltWith는 더 자세히 분석해주고 Wappalyzer는 더 예쁘게 표시해준다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;한국어 맞춤법 검사기&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://addons.mozilla.org/ko/firefox/addon/korean-spellchecker/&quot; rel=&quot;noopener&quot;&gt;https://addons.mozilla.org/ko/firefox/addon/korean-spellchecker/&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;한국어 맞춤법 검사 부가 기능. 맞춤법이 틀리면 빨간색 밑줄이 쳐지고 밑줄 쳐진 단어를 우클릭하면 고칠 수 있음&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>프로그램</category>
<category>Firefox</category>
<category>브라우저</category>
<category>파이어폭스</category>
<category>확장</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1023</guid>
<comments>https://blog.joyfui.com/1023#entry1023comment</comments>
<pubDate>Sat, 25 Feb 2023 12:00:19 +0900</pubDate>
</item>
<item>
<title>Node.js의 crypto.createCipher로 암호화된 값을 Python으로 복호화하기</title>
<link>https://blog.joyfui.com/1265</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;예전에, 회사에서 파이썬으로 어떤 값을 사용해야 하는 순간이 있었는데 이 값이 Node.js의 crypto.createCipher로 암호화되어 있었다. aes-256-ctr 방식인 건 알겠는데 문제는 예전에 만들어진 코드라 디프리케이티드된 crypto.createCipher를 사용했다는 것&amp;hellip;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;지금은 crypto.createCipher 대신 crypto.createCipheriv를 사용하는 걸 권장하고 있고 메소드명처럼 iv 값을 입력받는다. crypto.createCipher는 iv를 입력받지 않는데 파이썬 aes-256-ctr 복호화 예제를 찾아보면 전부 iv 값을 입력받고 있다. &lt;del&gt;(모르는데 어떻게 입력해요!)&lt;/del&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;그래서 구교수님께 한참 찾아보다가 저 방식이 OpenSSL 비표준 방식이라는 걸 알았다. 해당 키워드로 다시 찾아보니 방법을 찾을 수 있었다.&lt;/p&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;const crypto = require('node:crypto');

const encrypt = (key, text) =&amp;gt; {
  const cipher = crypto.createCipher('aes-256-ctr', key);
  let output = cipher.update(text, 'utf8', 'hex');
  output += cipher.final('hex');
  return output;
};

const decrypt = (key, text) =&amp;gt; {
  const decipher = crypto.createDecipher('aes-256-ctr', key);
  let output = decipher.update(text, 'hex', 'utf8');
  output += decipher.final('utf8');
  return output;
};

console.log(encrypt('secret', 'Hello, world!'));&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;위와 같은 nodejs 코드로 암호화하면 1295189f8f6fefab62428b40d8라는 값을 얻을 수 있다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;파이썬의 pycryptodome 패키지를 사용하면 아래 코드로 복호화할 수 있다. (pip로 pycryptodome 설치 필요)&lt;/p&gt;
&lt;pre class=&quot;python&quot; data-ke-language=&quot;python&quot;&gt;&lt;code&gt;import binascii
from hashlib import md5

from Crypto.Cipher import AES
from Crypto.Util import Counter

# https://stackoverflow.com/questions/13907841/implement-openssl-aes-encryption-in-python
def EVP_BytesToKey(password, salt, key_len, iv_len):
    dtot = md5(password + salt).digest()
    d = [dtot]
    while len(dtot) &amp;lt; (iv_len + key_len):
        d.append(md5(d[-1] + password + salt).digest())
        dtot += d[-1]
    return dtot[:key_len], dtot[key_len : key_len + iv_len]

def decrypt(key, text):
    key, iv = EVP_BytesToKey(key.encode(&quot;utf-8&quot;), &quot;&quot;.encode(&quot;utf-8&quot;), 32, 16)
    counter = Counter.new(AES.block_size * 8, initial_value=int(iv.hex(), 16))
    cipher = AES.new(key, AES.MODE_CTR, counter=counter)
    output = cipher.decrypt(binascii.unhexlify(text)).decode(&quot;utf-8&quot;)
    return output

print(decrypt(&quot;secret&quot;, &quot;1295189f8f6fefab62428b40d8&quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;주석에 남긴 것처럼 &lt;a href=&quot;https://stackoverflow.com/questions/13907841/implement-openssl-aes-encryption-in-python&quot;&gt;이곳&lt;/a&gt;에서 답을 얻어서 코드를 만들었다. 원본값인 Hello, world!를 얻을 수 있다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;처음에 2.7로 짰다가 3으로 바꾸려니 문자열 인코딩 관련으로 고생했다는 후문..ㅎㅎ&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>Python</category>
<category>JavaScript</category>
<category>node.js</category>
<category>Python</category>
<category>자바스크립트</category>
<category>파이썬</category>
<category>프로그래밍</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1265</guid>
<comments>https://blog.joyfui.com/1265#entry1265comment</comments>
<pubDate>Sun, 19 Feb 2023 23:38:20 +0900</pubDate>
</item>
<item>
<title>테스트용 랜덤 이미지 사이트, Lorem Picsum</title>
<link>https://blog.joyfui.com/1264</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://picsum.photos/&quot; rel=&quot;noopener&quot;&gt;https://picsum.photos/&lt;/a&gt;&lt;/p&gt;
&lt;figure id=&quot;og_1673621918123&quot; contenteditable=&quot;false&quot; data-ke-type=&quot;opengraph&quot; data-ke-align=&quot;alignCenter&quot; data-og-type=&quot;website&quot; data-og-title=&quot;Lorem Picsum&quot; data-og-description=&quot;Lorem Ipsum... but for photos&quot; data-og-host=&quot;picsum.photos&quot; data-og-source-url=&quot;https://picsum.photos/&quot; data-og-url=&quot;https://picsum.photos&quot; data-og-image=&quot;https://scrap.kakaocdn.net/dn/ExYK3/hyRhDdgU0X/0x3plAqtXZk2kaESvCHuN0/img.jpg?width=250&amp;amp;height=250&amp;amp;face=0_0_250_250,https://scrap.kakaocdn.net/dn/x8JwQ/hyRgrFuLiI/zgXPMoU5k7WUIALHT8LsS1/img.jpg?width=536&amp;amp;height=354&amp;amp;face=0_0_536_354,https://scrap.kakaocdn.net/dn/cPZf2u/hyRhIMpMqv/g6iIXxcD01iEsZCsSQQhu1/img.jpg?width=536&amp;amp;height=354&amp;amp;face=0_0_536_354&quot;&gt;&lt;a href=&quot;https://picsum.photos/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-source-url=&quot;https://picsum.photos/&quot;&gt;
&lt;div class=&quot;og-image&quot; style=&quot;background-image: url('https://scrap.kakaocdn.net/dn/ExYK3/hyRhDdgU0X/0x3plAqtXZk2kaESvCHuN0/img.jpg?width=250&amp;amp;height=250&amp;amp;face=0_0_250_250,https://scrap.kakaocdn.net/dn/x8JwQ/hyRgrFuLiI/zgXPMoU5k7WUIALHT8LsS1/img.jpg?width=536&amp;amp;height=354&amp;amp;face=0_0_536_354,https://scrap.kakaocdn.net/dn/cPZf2u/hyRhIMpMqv/g6iIXxcD01iEsZCsSQQhu1/img.jpg?width=536&amp;amp;height=354&amp;amp;face=0_0_536_354');&quot;&gt;&amp;nbsp;&lt;/div&gt;
&lt;div class=&quot;og-text&quot;&gt;
&lt;p class=&quot;og-title&quot; data-ke-size=&quot;size16&quot;&gt;Lorem Picsum&lt;/p&gt;
&lt;p class=&quot;og-desc&quot; data-ke-size=&quot;size16&quot;&gt;Lorem Ipsum... but for photos&lt;/p&gt;
&lt;p class=&quot;og-host&quot; data-ke-size=&quot;size16&quot;&gt;picsum.photos&lt;/p&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/figure&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;디자인할 때 글이 들어갈 자리에 글의 내용 대신 디자인에 집중시키기 위해 언뜻 보면 정상적인 글 같지만 읽어보면 전혀 아무 의미 없는 글을 집어넣는데 이를 로렘 입숨이라고 한다. 로렘 입숨의 이미지 버전 기능을 제공하는 로렘 픽숨이란 사이트이다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;특정한 크기의 이미지가 필요할 때 그냥 아래 URL을 넣어주면 된다.&lt;/p&gt;
&lt;pre id=&quot;code_1673623041554&quot; class=&quot;shell&quot; data-ke-language=&quot;shell&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;https://picsum.photos/200/300&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;200x300 크기의 랜덤 이미지를 얻을 수 있다. 레이아웃 작업 중에 테스트로 넣을 이미지가 없을 때 사용하면 매우 유용하다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;사이트에 보면 몇 가지 다양한 기능들이 더 있으니 참고하면 좋다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='1903' data-origin-height='947' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/bY1ImC/btrWb3AzoxK/wVhWLQEZjp4PQBI0OU9u0k/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/bY1ImC/btrWb3AzoxK/wVhWLQEZjp4PQBI0OU9u0k/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbY1ImC%2FbtrWb3AzoxK%2FwVhWLQEZjp4PQBI0OU9u0k%2Fimg.png' data-filename='Screenshot 2023-01-14 at 00-28-08 Lorem Picsum.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>추천 사이트</category>
<category>사이트</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1264</guid>
<comments>https://blog.joyfui.com/1264#entry1264comment</comments>
<pubDate>Sat, 14 Jan 2023 00:29:31 +0900</pubDate>
</item>
<item>
<title>Windows Subsystem for Android (WSA) 설치하기</title>
<link>https://blog.joyfui.com/1263</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;WSA은 윈도우 위에 안드로이드를 올려 구동하는 기능이다. 마이크로소프트에서 공식 지원하고 WSL2처럼 하이퍼V 가상화를 기반으로 동작한다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;하지만 아직 베타라 윈도우 참가자 프로그램에 가입해야지 설치할 수 있고 gapps가 없어 구글 서비스(플레이스토어 포함)를 사용하지 못한다. 대신 아마존 앱스토어가 들어있지만 이게 미국에서만 서비스하고 있어서 우리나라에서는 사용할 수 없다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;하지만 여러 사람에 의해 참가자 프로그램에 가입하지 않아도 설치하는 방법, gapps 설치하는 방법, 루팅하는 방법까지 나왔고 이 과정을 간편하게 진행할 수 있는 올인원 툴까지 나왔다. 나는 Magisk on WSA이라는 툴을 사용해서 WSA를 설치했고 잘 작동해서 설치 방법을 소개한다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;Magisk on WSA 리포지토리: &lt;a href=&quot;https://github.com/LSPosed/MagiskOnWSALocal&quot;&gt;https://github.com/LSPosed/MagiskOnWSALocal&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;먼저 해당 툴은 리눅스에서 동작하기 때문에 WSL2 환경에서 진행했다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;WSL 설치법은 아래 링크를 참고하면 된다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/ko-kr/windows/wsl/install&quot;&gt;https://learn.microsoft.com/ko-kr/windows/wsl/install&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;와 근데 옛날보다 설치법이 정말 간단해졌다. 그냥 명령어 한 줄이면 되네&amp;hellip; 라떼는(&amp;hellip;) 뭐 설치하고 뭐 확인하고 복잡했었는데&amp;hellip;&lt;/del&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;아무튼 리눅스 터미널을 열고 저장소를 클론한다.&lt;/p&gt;
&lt;pre class=&quot;bash&quot; data-ke-language=&quot;bash&quot;&gt;&lt;code&gt;git clone https://github.com/LSPosed/MagiskOnWSALocal.git&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이제 클론한 저장소로 들어가서 run.sh 파일을 실행하면 된다. (참고로 파이썬3가 설치되어 있어야 한다.&lt;/p&gt;
&lt;pre class=&quot;bash&quot; data-ke-language=&quot;bash&quot;&gt;&lt;code&gt;cd MagiskOnWSALocal
./scripts/run.sh&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;스크립트를 실행하면 필요한 패키지 자동으로 설치하고 아래와 같은 tui가 떠서 별 어려움 없이 진행할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='995' data-origin-height='658' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/ldFpf/btrTRdlRP6o/hQeTokrSBYdke7AOY2uF8K/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/ldFpf/btrTRdlRP6o/hQeTokrSBYdke7AOY2uF8K/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FldFpf%2FbtrTRdlRP6o%2FhQeTokrSBYdke7AOY2uF8K%2Fimg.png' data-filename='WindowsTerminal_Qx5LRLPbi8.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;Build arch: x64&lt;br /&gt;WSA release type: retail&lt;br /&gt;Magisk version: stable&lt;br /&gt;Do you want to install GApps?: Yes&lt;br /&gt;Which GApps do you want to install?: OpenGApps&lt;br /&gt;Do you want to keep Amazon Appstore?: No&lt;br /&gt;Root solution: magisk&lt;br /&gt;Do you want to compress the output?: Yes&lt;br /&gt;Compress format: 7z&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;나는 이렇게 세팅했다. 갭스 기본값이 MindTheGapps인데 갤럭시 넥서스 때부터 OpenGApps를 잘 써왔기 때문에 얘로 바꿔준 거 말곤 전부 기본값이다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;root 패스워드를 입력하고 좀 기다리면 output 폴더에 압축파일이 생긴다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='995' data-origin-height='658' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/bSm6vW/btrTSw55pws/dxze8JWt0FmFtTWfIJ7KI1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/bSm6vW/btrTSw55pws/dxze8JWt0FmFtTWfIJ7KI1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbSm6vW%2FbtrTSw55pws%2Fdxze8JWt0FmFtTWfIJ7KI1%2Fimg.png' data-filename='WindowsTerminal_jb6afMhp1n.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이걸 적당한 위치에 압축을 풀고(설치 후 압축 푼 폴더를 삭제하면 안 되기 때문에 적당한 곳에 풀어야 한다.) Run.bat를 실행한다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='1921' data-origin-height='1033' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/cz2bWb/btrTVUSEvVI/TU10jqxpKz1zOKKn1CkDd0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/cz2bWb/btrTVUSEvVI/TU10jqxpKz1zOKKn1CkDd0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fcz2bWb%2FbtrTVUSEvVI%2FTU10jqxpKz1zOKKn1CkDd0%2Fimg.png' data-filename='WsaClient_KCsdpqvZuP.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;조금 기다리면 플레이스토어가 실행되고 설치가 끝난다. 다시 한번 말하지만 압축 푼 폴더를 삭제하면 WSA 실행이 안 되므로 삭제하면 안 된다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='1087' data-origin-height='774' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/b7DQE8/btrTQ1sf7QW/Y0aQkIrxbqsmRr5J7Osxu0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/b7DQE8/btrTQ1sf7QW/Y0aQkIrxbqsmRr5J7Osxu0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb7DQE8%2FbtrTQ1sf7QW%2FY0aQkIrxbqsmRr5J7Osxu0%2Fimg.png' data-filename='ApplicationFrameHost_7lTKrBmlmj.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;시작메뉴를 보면 &quot;Android&amp;trade;용 Windows 하위 시스템 설정&quot; 앱이 추가되어 있는 걸 볼 수 있다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;나중에 WSA를 업데이트하고 싶으면 위의 과정을 다시 반복하면 된다. 툴이 알아서 기존 데이터를 보존한 채로 새 버전을 설치한다.&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>Windows</category>
<category>Android</category>
<category>Linux</category>
<category>Windows</category>
<category>WSA</category>
<category>WSL</category>
<category>리눅스</category>
<category>안드로이드</category>
<category>윈도우</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1263</guid>
<comments>https://blog.joyfui.com/1263#entry1263comment</comments>
<pubDate>Sun, 18 Dec 2022 21:18:32 +0900</pubDate>
</item>
<item>
<title>[JavaScript] window.open()으로 연 창에서 onload 이벤트가 실행되지 않을 때</title>
<link>https://blog.joyfui.com/1262</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;서버에서 html 코드를 받아서 팝업으로 띄워야 할 일이 생겼다. axios로 값을 받아서 window.open()으로 팝업을 띄운 뒤 document.write()로 html 코드를 집어넣었는데 페이지가 제대로 동작하지 않았다. 원인을 찾아보니 서버에서 받은 html 코드가 제이쿼리를 사용하고 있는데 $(window).load() 부분이 실행되지 않았다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;해당 html 코드를 직접 html 파일로 만들어서 열어보면 정상 작동한다. window.open()으로 연 창에서만 작동하지 않는 것이다. 해결하려고 $(window).load()를 $(document).ready()로 교체, 제이쿼리 대신 window.onload 사용 등의 시도를 해봤는데 모두 소용이 없었다. 그러다 혹시나 해서 팝업창에서 개발자 도구를 열어 document.readyState 값을 확인해봤는데 'loading'으로 나왔다. 로딩이 끝났으면 'complete'이어야 하는데 계속 로딩 상태였다. 아무래도 이 부분이 원인인 거 같아 이쪽을 키워드로 검색해보니 해결법은 간단했다.&lt;/p&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;document.close();&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;위 코드를 사용하면 된다. window.open()으로 연 창은 document.close()로 완료하기 전까지 계속 로딩 상태라고 한다. 아래 코드를 확인해볼 수 있다.&lt;/p&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;const popup = window.open();
popup.document.write('&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;테스트&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;');
console.log(popup.document.readyState);  // 'loading'
popup.document.close();
console.log(popup.document.readyState);  // 'complete'&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;알고 보니 아주 간단한 문제고 상식이라면 상식이라 할 수 있는 부분인데 지금까지 몰랐었다. 그동안 window.open()을 사용하면서 한 번도 document.close()를 사용해본 적이 없는데, 지금까지 잘못 사용하고 있었다는 거...ㅠㅠ(동작엔 문제없었으니 잘못은 아닐지도&amp;hellip;?)&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>웹</category>
<category>JavaScript</category>
<category>자바스크립트</category>
<category>프로그래밍</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1262</guid>
<comments>https://blog.joyfui.com/1262#entry1262comment</comments>
<pubDate>Wed, 16 Nov 2022 00:51:00 +0900</pubDate>
</item>
<item>
<title>추천하는 유저스크립트!</title>
<link>https://blog.joyfui.com/1261</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;현재 사용 중인 유저스크립트 목록. 처음엔 &lt;a href=&quot;https://www.greasespot.net/&quot;&gt;그리스몽키&lt;/a&gt;를 쓰다가 지금은 &lt;a href=&quot;https://adguard.com/&quot;&gt;애드가드&lt;/a&gt;로 유저스크립트 사용 중이다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;&lt;a href=&quot;https://github.com/AdguardTeam/AdGuardExtra&quot;&gt;AdGuard Extra&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://userscripts.adtidy.org/release/adguard-extra/1.0/adguard-extra.user.js&quot;&gt;https://userscripts.adtidy.org/release/adguard-extra/1.0/adguard-extra.user.js&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;애드가드와 함께 기본적으로 제공되는 유저스크립트. 애드가드와 함께 사용&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;&lt;a href=&quot;https://adsbypasser.github.io/&quot;&gt;AdsBypasser&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://adsbypasser.github.io/releases/adsbypasser.full.es7.user.js&quot;&gt;https://adsbypasser.github.io/releases/adsbypasser.full.es7.user.js&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;카운트다운 광고를 해치우는(?) 유저스크립트&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;&lt;a href=&quot;https://github.com/List-KR/microShield&quot;&gt;microShield&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://github.com/List-KR/microShield/raw/main/microShield.user.js&quot;&gt;https://github.com/List-KR/microShield/raw/main/microShield.user.js&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;List-KR 필터가 처리하지 못하는 Ad-Shield 광고를 제거하는 유저스크립트. 해당 필터와 함께 사용&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;&lt;a href=&quot;https://github.com/List-KR/NamuLink&quot;&gt;NamuLink&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://github.com/List-KR/NamuLink/raw/main/NamuLink.user.js&quot;&gt;https://github.com/List-KR/NamuLink/raw/main/NamuLink.user.js&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;List-KR 필터가 처리하지 못하는 나무위키 파워링크 광고를 제거하는 유저스크립트. 해당 필터와 함께 사용&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;&lt;a href=&quot;https://github.com/joyfuI/search-link-fix&quot;&gt;Search Link Fix&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://raw.githubusercontent.com/joyfuI/search-link-fix/master/search-link-fix.user.js&quot;&gt;https://raw.githubusercontent.com/joyfuI/search-link-fix/master/search-link-fix.user.js&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;자작 유저스크립트: &lt;a href=&quot;https://blog.joyfui.com/1141&quot;&gt;https://blog.joyfui.com/1141&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;b&gt;&lt;a href=&quot;https://greasyfork.org/ko/scripts/439993-youtube-shorts-redirect&quot;&gt;Youtube shorts redirect&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치: &lt;a href=&quot;https://greasyfork.org/scripts/439993-youtube-shorts-redirect/code/Youtube%20shorts%20redirect.user.js&quot;&gt;https://greasyfork.org/scripts/439993-youtube-shorts-redirect/code/Youtube%20shorts%20redirect.user.js&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;음량 조절도 안되고 되감기도 안되는 짜증나는 유튜브 쇼츠 주소를 일반 유튜브 영상 주소로 바꿔주는 유저스크립트&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>프로그램</category>
<category>Userscript</category>
<category>브라우저</category>
<category>유저스크립트</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1261</guid>
<comments>https://blog.joyfui.com/1261#entry1261comment</comments>
<pubDate>Sat, 24 Sep 2022 12:00:32 +0900</pubDate>
</item>
<item>
<title>테스트 케이스에서 정규식 생성하기, grex</title>
<link>https://blog.joyfui.com/1260</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://pemistahl.github.io/grex-js/&quot; rel=&quot;noopener&quot;&gt;https://pemistahl.github.io/grex-js/&lt;/a&gt;&lt;/p&gt;
&lt;figure id=&quot;og_1661587407490&quot; contenteditable=&quot;false&quot; data-ke-type=&quot;opengraph&quot; data-ke-align=&quot;alignCenter&quot; data-og-type=&quot;website&quot; data-og-title=&quot;grex - Generate regular expressions from test cases&quot; data-og-description=&quot;&quot; data-og-host=&quot;pemistahl.github.io&quot; data-og-source-url=&quot;https://pemistahl.github.io/grex-js/&quot; data-og-url=&quot;https://pemistahl.github.io/grex-js/&quot; data-og-image=&quot;&quot;&gt;&lt;a href=&quot;https://pemistahl.github.io/grex-js/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-source-url=&quot;https://pemistahl.github.io/grex-js/&quot;&gt;
&lt;div class=&quot;og-image&quot; style=&quot;background-image: url();&quot;&gt;&amp;nbsp;&lt;/div&gt;
&lt;div class=&quot;og-text&quot;&gt;
&lt;p class=&quot;og-title&quot; data-ke-size=&quot;size16&quot;&gt;grex - Generate regular expressions from test cases&lt;/p&gt;
&lt;p class=&quot;og-desc&quot; data-ke-size=&quot;size16&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;og-host&quot; data-ke-size=&quot;size16&quot;&gt;pemistahl.github.io&lt;/p&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/figure&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;정규식을 통과해야 하는 테스트 케이스들을 넣으면 정규표현식을 생성하는 사이트이다. 각 테스트 케이스는 공백으로 구분해서 넣으면 된다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;Enable capturing groups 옵션은 체크하고 사용하는 게 좀 더 내가 원하는 형태인 듯&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='1903' data-origin-height='947' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/bBgguF/btrKHdHG9SF/8QuvxNVsxuVYNvzNVPhdT1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/bBgguF/btrKHdHG9SF/8QuvxNVsxuVYNvzNVPhdT1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbBgguF%2FbtrKHdHG9SF%2F8QuvxNVsxuVYNvzNVPhdT1%2Fimg.png' data-filename='Screenshot 2022-08-27 at 17-01-26 grex - Generate regular expressions from test cases.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>추천 사이트</category>
<category>사이트</category>
<category>정규식</category>
<category>정규표현식</category>
<category>프로그래밍</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1260</guid>
<comments>https://blog.joyfui.com/1260#entry1260comment</comments>
<pubDate>Sat, 27 Aug 2022 17:23:29 +0900</pubDate>
</item>
<item>
<title>Tailwind CSS 클래스 모음집 사이트</title>
<link>https://blog.joyfui.com/1259</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://tailwindcss.com/&quot;&gt;테일윈드 CSS&lt;/a&gt;를 잠깐 사용해봤는데 뭔가 새롭다.(새롭다기보단 기존의 상식을 철저히 부정한 느낌?) 컴포넌트들을 밑바닥부터 만들어야 한다면 직접 css 파일을 만드는 것보다 이런 유틸리티 css 라이브러리는 쓰는 게 좋을 거 같다. 클래스로 스타일을 지정하다 보니 클래스가 길어지고 중복이 많아지지만, 어차피 컴포넌트를 쪼개가면서 개발한다면 중복 문제도 해결될 테고..&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;암튼 유틸리티 css라 클래스 종류가 방대한데 이걸 한눈에 정리한 사이트가 있어서 소개한다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://nerdcave.com/tailwind-cheat-sheet&quot; rel=&quot;noopener&quot;&gt;https://nerdcave.com/tailwind-cheat-sheet&lt;/a&gt;&lt;/p&gt;
&lt;figure id=&quot;og_1659196898042&quot; contenteditable=&quot;false&quot; data-ke-type=&quot;opengraph&quot; data-ke-align=&quot;alignCenter&quot; data-og-type=&quot;website&quot; data-og-title=&quot;Tailwind CSS Cheat Sheet&quot; data-og-description=&quot;&quot; data-og-host=&quot;nerdcave.com&quot; data-og-source-url=&quot;https://nerdcave.com/tailwind-cheat-sheet&quot; data-og-url=&quot;https://nerdcave.com/tailwind-cheat-sheet&quot; data-og-image=&quot;&quot;&gt;&lt;a href=&quot;https://nerdcave.com/tailwind-cheat-sheet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-source-url=&quot;https://nerdcave.com/tailwind-cheat-sheet&quot;&gt;
&lt;div class=&quot;og-image&quot; style=&quot;background-image: url();&quot;&gt;&amp;nbsp;&lt;/div&gt;
&lt;div class=&quot;og-text&quot;&gt;
&lt;p class=&quot;og-title&quot; data-ke-size=&quot;size16&quot;&gt;Tailwind CSS Cheat Sheet&lt;/p&gt;
&lt;p class=&quot;og-desc&quot; data-ke-size=&quot;size16&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;og-host&quot; data-ke-size=&quot;size16&quot;&gt;nerdcave.com&lt;/p&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/figure&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://umeshmk.github.io/Tailwindcss-cheatsheet/&quot; rel=&quot;noopener&quot;&gt;https://umeshmk.github.io/Tailwindcss-cheatsheet/&lt;/a&gt;&lt;/p&gt;
&lt;figure id=&quot;og_1659197048902&quot; contenteditable=&quot;false&quot; data-ke-type=&quot;opengraph&quot; data-ke-align=&quot;alignCenter&quot; data-og-type=&quot;website&quot; data-og-title=&quot;Tailwind CSS - Cheatsheet&quot; data-og-description=&quot;&quot; data-og-host=&quot;umeshmk.github.io&quot; data-og-source-url=&quot;https://umeshmk.github.io/Tailwindcss-cheatsheet/&quot; data-og-url=&quot;https://umeshmk.github.io/Tailwindcss-cheatsheet/&quot; data-og-image=&quot;&quot;&gt;&lt;a href=&quot;https://umeshmk.github.io/Tailwindcss-cheatsheet/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-source-url=&quot;https://umeshmk.github.io/Tailwindcss-cheatsheet/&quot;&gt;
&lt;div class=&quot;og-image&quot; style=&quot;background-image: url();&quot;&gt;&amp;nbsp;&lt;/div&gt;
&lt;div class=&quot;og-text&quot;&gt;
&lt;p class=&quot;og-title&quot; data-ke-size=&quot;size16&quot;&gt;Tailwind CSS - Cheatsheet&lt;/p&gt;
&lt;p class=&quot;og-desc&quot; data-ke-size=&quot;size16&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;og-host&quot; data-ke-size=&quot;size16&quot;&gt;umeshmk.github.io&lt;/p&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/figure&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;갠적으론 첫 번째 사이트가 편한 듯&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>웹</category>
<category>CSS</category>
<category>디자인</category>
<category>라이브러리</category>
<category>웹</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1259</guid>
<comments>https://blog.joyfui.com/1259#entry1259comment</comments>
<pubDate>Sun, 31 Jul 2022 12:00:44 +0900</pubDate>
</item>
<item>
<title>[CSS] 간단한 중앙 정렬</title>
<link>https://blog.joyfui.com/1258</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;css에서 가로 중앙 정렬은 정말 간단하게 해결(text-align: center;)이 되는데 세로 중앙 정렬은 생각대로 하기가 힘들다. vertical-align: center;가 생각처럼 됐으면 좋겠지만 조건이 까다로워서 안 될 때가 더 많다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;그래서 그런지 검색해보면 세로 중앙 정렬 관련해서 글이 많고 방법도 다양하다. line-height를 부모와 똑같이 맞추든지, margin을 auto로 지정하든지, 심지어는 absolute로 지정한 다음 transform을 사용하는 방법까지... 모두 자식에게 속성을 지정해야 해서 순수 텍스트 노드는 안되고 div 등으로 감싸줘야 한다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;최근에 grid를 사용해서 간단하게 중앙 정렬하는 법을 알게 돼서 소개한다. grid를 사용하기 때문에 IE는 지원하지 않지만 이제 추모비도 세워진 마당에 굳이 신경 쓸 필요가...?&lt;/p&gt;
&lt;pre id=&quot;code_1655632252061&quot; class=&quot;css&quot; data-ke-language=&quot;css&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;.parent {
  display: grid;
  place-items: center;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;정말 간단하다. 부모 노드에만 지정해주면 되기 때문에 자식 노드가 순수 텍스트여도 문제가 없다.&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;예시&lt;/h4&gt;
&lt;pre id=&quot;code_1655632846971&quot; class=&quot;html xml&quot; data-ke-language=&quot;html&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;style&amp;gt;
      .parent {
        display: grid;
        place-items: center;

        width: 200px;
        height: 200px;
        border: 2px solid;
      }
    &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div class=&quot;parent&quot;&amp;gt;가운데 배치&amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;figure id=&quot;code_1655632639822&quot; data-source=&quot;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;style&amp;gt;
      .parent {
        display: grid;
        place-items: center;

        width: 200px;
        height: 200px;
        border: 2px solid;
      }
    &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div class=&amp;quot;parent&amp;quot;&amp;gt;가운데 배치&amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&quot; data-ke-type=&quot;html&quot;&gt;
&lt;div data-ke-class=&quot;header&quot;&gt;&lt;i&gt;&amp;lt;&amp;gt;&lt;/i&gt;HTML 삽입&lt;/div&gt;
&lt;div data-ke-class=&quot;article&quot;&gt;미리보기할 수 없는 소스&lt;/div&gt;
&lt;/figure&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>웹</category>
<category>CSS</category>
<category>HTML</category>
<category>Style</category>
<category>개발</category>
<category>웹</category>
<category>프로그래밍</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1258</guid>
<comments>https://blog.joyfui.com/1258#entry1258comment</comments>
<pubDate>Sat, 09 Jul 2022 12:00:12 +0900</pubDate>
</item>
<item>
<title>엣지 브라우저에서 WebAssembly가 작동하지 않을 때</title>
<link>https://blog.joyfui.com/1257</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;브라우저에서 &lt;a href=&quot;https://stackblitz.com/&quot;&gt;node.js를 실행&lt;/a&gt;한다던가 &lt;a href=&quot;https://pyscript.net/examples/&quot;&gt;파이썬을 실행&lt;/a&gt;한다던가 웹 어셈블리 덕분에 신기한 게 많이 나왔다. 메인 브라우저가 파이어폭스라 몰랐는데 엣지에서 해당 사이트에 방문해보니 웹 어셈블리를 지원하지 않는다면서 오류가 났었다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;엣지도 크로미움 기반이라 당연히 지원할 텐데 왜 안 되지 싶어서 찾아보니까 설정 하나가 원인이었다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='1148' data-origin-height='811' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/b24Vul/btrE7EQWHNg/Hh58wGJ1IopoJr1lZw3YyK/img.jpg' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/b24Vul/btrE7EQWHNg/Hh58wGJ1IopoJr1lZw3YyK/img.jpg' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb24Vul%2FbtrE7EQWHNg%2FHh58wGJ1IopoJr1lZw3YyK%2Fimg.jpg' data-filename='웹 캡처_18-6-2022_172844_settings.jpeg' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;엣지 설정 &amp;rarr; 개인 정보, 검색 및 서비스 &amp;rarr; 웹에서 보안 강화를 끄면 된다. 기본값이 꺼져있는 거였는데 보안에 좋다고 하니 권장이라고 적혀있는 균형 조정으로 설정했는데 이런 문제가&amp;hellip; 예외 기능도 있지만 내가 테스트했을 땐 동작하지 않아서 그냥 아예 꺼버렸다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;간단하게 해결~!&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>Windows</category>
<category>EDGE</category>
<category>JavaScript</category>
<category>브라우저</category>
<category>엣지</category>
<category>자바스크립트</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1257</guid>
<comments>https://blog.joyfui.com/1257#entry1257comment</comments>
<pubDate>Sat, 25 Jun 2022 12:00:05 +0900</pubDate>
</item>
<item>
<title>[Node.js] 로컬 패키지 사용하기(+alias)</title>
<link>https://blog.joyfui.com/1256</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;개발 중 기존에 의존성으로 사용 중인 패키지를 수정할 필요가 생겼다. 해당 패키지를 클론하고 필요한 부분을 수정했는데 이걸 사용하려고 하니 테스트용으로 수정한 건데 npm에 배포하는 건 매우 번거로워 보였다. 배포 한 번 하면 맘대로 내리지도 못한다&amp;hellip;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;그래서 배포하지 않고 사용할 방법을 찾아봤는데 npm에서 패키지를 설치하지 않고 로컬 경로를 지정해서 설치하는 방법이 있었다.&lt;/p&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;npm i &quot;../로컬경로&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;그냥 이런 식으로 경로를 바로 넣어서 설치하면 된다. 이러면 package.json 파일엔&lt;/p&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;{
  ...
  &quot;dependencies&quot;: {
    &quot;패키지명&quot;: &quot;file:../로컬경로&quot;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이런 식으로 저장이 된다. 이렇게 사용하면 좋은 게 로컬 패키지를 수정하면 프로젝트에서 패키지를 다시 설치할 필요 없이 바로 적용된다는 거다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;추가로 alias 기능도 소개한다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이렇게 로컬로 사용하다가 테스트가 끝나고 이제 배포해서 사용하려고 한다. 내가 새로 배포하면 패키지 명이 바뀔 텐데 프로젝트에서 이 패키지를 사용한 곳의 이름을 모두 바꿔야 할까?&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;물론 텍스트 에디터에서 패키지 명을 모두 바꾸는 건 어려운 일이 아니지만, alias 기능을 이용하면 코드 수정을 최소화하면서 해결할 수 있다.&lt;/p&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;npm i 패키지@npm:나만의패키지&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이렇게 설치하면 &amp;ldquo;패키지&amp;rdquo;라는 이름으로 &amp;ldquo;나만의패키지&amp;rdquo;를 사용할 수 있다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;package.json 파일엔&lt;/p&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;{
  ...
  &quot;dependencies&quot;: {
    &quot;패키지&quot;: &quot;npm:@나만의패키지@^1.0.0&quot;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이런 식으로 저장이 된다. 패키지를 하나씩 리팩토링할 때 유용하게 사용할 수 있겠다.&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>웹</category>
<category>JavaScript</category>
<category>node.js</category>
<category>자바스크립트</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1256</guid>
<comments>https://blog.joyfui.com/1256#entry1256comment</comments>
<pubDate>Mon, 13 Jun 2022 22:41:32 +0900</pubDate>
</item>
<item>
<title>WSL에서 ‘bash\r’: No such file or directory 오류가 날 때</title>
<link>https://blog.joyfui.com/1255</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;WSL에서 npm 명령어를 실행했는데 아래와 같은 메시지가 뜨며 오류가 났다.&lt;/p&gt;
&lt;blockquote data-ke-style=&quot;style3&quot;&gt;&amp;lsquo;bash\r&amp;rsquo;: No such file or directory&lt;/blockquote&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;which npm으로 npm의 위치를 찾아보니까 리눅스 쪽이 아닌 윈도우의 위치가 잡혔다. 윈도우 쪽의 npm이 실행되면서 줄 바꿈 문자 차이로 오류가 났던 것... yarn도 마찬가지로 윈도우 쪽이 실행됐었는데 재미있게도 얜 오류가 안 나서 몰랐다. ㅋㅋ&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;아무튼 윈도우의 환경변수를 리눅스 쪽에도 추가해주는 WSL의 기능을 끄면 일단은 해결할 수 있다. (찾아보니 nvm을 사용하면 이런 문제가 없다고 한다. nodenv를 사용 중이라 탈락...)&lt;/p&gt;
&lt;pre id=&quot;code_1653223306398&quot; class=&quot;bash&quot; data-ke-language=&quot;bash&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;sudo vim /etc/wsl.conf&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;위 명령어로 /etc/wsl.conf 파일을 연 뒤 아래 내용을 추가한다.&lt;/p&gt;
&lt;pre id=&quot;code_1653223619873&quot; class=&quot;python&quot; data-ke-language=&quot;python&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;[interop]
appendWindowsPath = false&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이제 wsl을 닫고 윈도우에서 wsl --shutdown 명령어로 wsl을 완전히 종료한 다음에 다시 wsl을 키면 이제 윈도우 환경변수가 추가되지 않는 모습을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='995' data-origin-height='658' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/ltZm8/btrCMbYSX1k/GI31FTVp9vV1oNRUkWsRgK/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/ltZm8/btrCMbYSX1k/GI31FTVp9vV1oNRUkWsRgK/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FltZm8%2FbtrCMbYSX1k%2FGI31FTVp9vV1oNRUkWsRgK%2Fimg.png' data-filename='WindowsTerminal_ZJipIyPAnE.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;근데 윈도우 환경변수가 사라지면서 은근히 유용한 명령어인 code . 을 사용할 수 없게 됐다. 그래서 vs code 경로는 나중에 따로 직접 추가함. /mnt/c/Users/&amp;lt;사용자&amp;gt;/AppData/Local/Programs/Microsoft\ VS\ Code/bin 대충 요런 경로이다.&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>Windows</category>
<category>Linux</category>
<category>Windows</category>
<category>WSL</category>
<category>리눅스</category>
<category>윈도우</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1255</guid>
<comments>https://blog.joyfui.com/1255#entry1255comment</comments>
<pubDate>Sat, 28 May 2022 12:00:14 +0900</pubDate>
</item>
<item>
<title>CRA 없이 React 개발환경 구축하기 (Snowpack편)</title>
<link>https://blog.joyfui.com/1254</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;어쩌다 보니 시리즈물이 되었는데 이번엔 &lt;a href=&quot;https://www.snowpack.dev/&quot;&gt;Snowpack&lt;/a&gt;이다. 글 작성하다가 귀찮아서 멈췄었는데 스노우팩 업데이트가 지지부진하더니 지난달부터 공식적으로 새 프로젝트에 사용을 권장하지 않는단다... &lt;a href=&quot;https://vitejs-kr.github.io/&quot;&gt;Vite&lt;/a&gt; 출시 이후로 전망이 어둡더만.. 글 좀 미리미리 써둘걸...ㅠㅜ 작성 중인 게 아까우니, 마무리해서 올림.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;스노우팩은 번들 없는 개발(ESM을 그대로 사용)이라는 컨셉으로 개발되었다. 개발할 땐 번들링을 하지 않고 빠르게 빌드하고 프로덕션에선 웹팩 같은 번들러로 빌드하자는 컨셉. 따라서 엄밀히 따지면 번들러는 아니다. 홈페이지에선 번개가 치는 프론트엔드 빌드 도구라고 소개하는데 파셀이 생각하는 건 왤까?ㅎㅎ&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;핫 리로딩에서 전체 코드를 다시 번들링하지 않으므로 매우 빠르게 변경 사항을 반영할 수 있다고 한다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;스노우팩에는 create-react-app과 유사하게 create-snowpack-app라는 게 있다. 물론 이걸 사용하지 않고 진행하겠다.&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;package.json 생성&lt;/h4&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;일단 적당한 폴더를 만들고 아래 명령어로 package.json 파일을 생성한다.&lt;/p&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn init -y&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;리액트 설치&lt;/h4&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn add react react-dom&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;바벨 설치&lt;/h4&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn add @babel/preset-env @babel/preset-react&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;웹팩 때와 비슷하다. 다만 아래에서 바벨 플러그인을 설치하면 바벨 코어는 설치 안 해도 되길래 뺐다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;@babel/preset-env - 최신 자바스크립트 문법을 구형 브라우저에서도 작동하도록 변환하거나 폴리필 추가&lt;br /&gt;@babel/preset-react - 리액트의 JSX 문법을 변환&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;babel.config.json 생성&lt;/h4&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;{
  &quot;presets&quot;: [
    &quot;@babel/preset-env&quot;,
    [&quot;@babel/preset-react&quot;, { &quot;runtime&quot;: &quot;automatic&quot; }]
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;React 17 이후부턴 &quot;runtime&quot;: &quot;automatic&quot; 옵션을 추가해야 한다.&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;스노우팩 설치&lt;/h4&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn add snowpack&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;스노우팩 플러그인 설치&lt;/h4&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn add @snowpack/plugin-webpack @snowpack/plugin-babel @snowpack/plugin-react-refresh&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;@snowpack/plugin-webpack - 빌드 시 웹팩 사용. 롤업 플러그인도 있지만 웹팩을 선택했다.&lt;br /&gt;@snowpack/plugin-babel - 바벨과 연동. 원래 설치하지 않아도 jsx를 변환해 주지만 위의 automatic 옵션을 설정하기 위해선 따로 설치해줘야 한다.&lt;br /&gt;@snowpack/plugin-react-refresh - 리액트 핫리로드 지원&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;snowpack.config.mjs 생성&lt;/h4&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;/** @type {import(&quot;snowpack&quot;).SnowpackUserConfig } */
export default {
  mount: {
    public: { url: '/', static: true },
    src: { url: '/dist' },
  },
  plugins: [
    '@snowpack/plugin-react-refresh',
    '@snowpack/plugin-babel',
    '@snowpack/plugin-webpack',
  ],
  devOptions: {
    port: 3000,
  },
  buildOptions: {
    clean: false,
  },
};&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;홈페이지 설명을 보면 clean을 true로 설정해야 빌드 전에 폴더 정리를 할 거 같은데 실제로는 false로 설정해야 한다. 뭐지...&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;리액트 컴포넌트 작성&lt;/h4&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;그냥 CRA에서 기본으로 만들어주는 예제 파일을 그대로 복사한다. (src, public 폴더)&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;단, 예제 소스에서는 web-vitals을 사용하므로 이걸 추가로 설치해야 한다. 그리고 모든 js 파일을 분석하는지 사용하지도 않는 setupTests.js 파일 때문에 오류가 나기 때문에 @testing-library/jest-dom도 설치해야 한다. 아니면 그냥 setupTests.js 파일을 지우자&lt;/p&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn add web-vitals @testing-library/jest-dom&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;그리고 파셀과 유사하게 index.html에 index.js를 추가해야 한다.&lt;/p&gt;
&lt;pre class=&quot;html xml&quot; data-ke-language=&quot;html&quot;&gt;&lt;code&gt;&amp;lt;script type=&quot;module&quot; src=&quot;/dist/index.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;public/index.html 파일을 열고 윗부분을 위에 추가한다.&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;package.json에 scripts 추가&lt;/h4&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;snowpack dev&quot;,
    &quot;build&quot;: &quot;snowpack build&quot;
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;yarn start - 개발 서버를 실행해 프로젝트를 바로 확인. 주소는 &lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000/&lt;/a&gt;&lt;br /&gt;yarn build - 빌드. 결과물은 build 폴더에 생성&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='1920' data-origin-height='947' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/oYs3e/btrBynx8wOI/cRc5kKX9niIQyBGeaCTVTK/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/oYs3e/btrBynx8wOI/cRc5kKX9niIQyBGeaCTVTK/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FoYs3e%2FbtrBynx8wOI%2FcRc5kKX9niIQyBGeaCTVTK%2Fimg.png' data-filename='Screenshot 2022-05-08 at 20-03-05 React App.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이 글에서는 빌드할 때 웹팩으로 번들링 하도록 세팅했는데 굳이 번들링하지 않더라도 최신 브라우저에서는 잘 동작한다. 그리고 웹팩을 추가한 만큼 웹팩 세부 설정으로 더 커스텀이 가능하지만 그건 그냥 &lt;a href=&quot;https://blog.joyfui.com/1243&quot;&gt;웹팩 편 글&lt;/a&gt;을 참고하길 바란다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;다시 한번 말하지만, 현재 스노우팩은 사실상 개발 중단 상태라 사용을 권장하지 않는다. 이렇게 빨리 경쟁에서 져버릴 줄은... 역시 살벌한 자바스크립트의 세계..&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>React</category>
<category>JavaScript</category>
<category>react</category>
<category>리액트</category>
<category>자바스크립트</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1254</guid>
<comments>https://blog.joyfui.com/1254#entry1254comment</comments>
<pubDate>Sun, 08 May 2022 20:56:23 +0900</pubDate>
</item>
<item>
<title>포크한 리포지토리를 원본과 동기화 하기</title>
<link>https://blog.joyfui.com/1253</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;원본 리포지토리의 변경사항을 포크한 리포지토리에 업데이트하고 싶을 때가 있다. 까먹지 않도록 그 방법을 메모해 둔다.&lt;/p&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;git remote&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;git 프로젝트 폴더 안에서 위 명령어를 입력하면 리모트 저장소 목록을 확인할 수 있다. clone으로 프로젝트를 받아왔다면 일반적으로 origin 하나만 있을 것이다.&lt;/p&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;git remote add upstream &amp;lt;원본 리포지토리 git 주소&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;위 명령어로 원본 리포지토리 주소를 upstream이라는 이름으로 추가한다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;다시 git remote를 입력해보면 upstream이 추가된 걸 볼 수 있다.&lt;/p&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;git fetch upstream&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;원본 리포지토리의 데이터들을 갱신한다.&lt;/p&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;git merge upstream/master&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;원본 리포지토리 master 브랜치의 내용을 현재 브랜치로 머지한다. 브랜치 이름이 main 등 다른 이름일 수도 있으니 이 부분은 확인 필요&lt;/p&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;머지한 현재 브랜치를 푸시한다.&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>기타</category>
<category>git</category>
<category>프로그래밍</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1253</guid>
<comments>https://blog.joyfui.com/1253#entry1253comment</comments>
<pubDate>Sat, 09 Apr 2022 18:55:20 +0900</pubDate>
</item>
<item>
<title>[Node.js] yarn upgrade를 해도 package.json가 그대로 일 때</title>
<link>https://blog.joyfui.com/1252</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;원래 평소엔 yarn을 쓰다가 회사에서 npm을 쓰길래 한동안 npm만 사용했었다. 오랜만에 yarn을 다시 사용하는데 패키지 업데이트를 하려고 yarn upgrade 명령어를 사용했더니 yarn.lock 파일만 바뀌고 package.json 파일은 그대로였다. (참고로 적자면 npm update는 package.json도 같이 바뀐다.)&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;찾아보니 원래 yarn upgrade는 package.json을 같이 고치지 않고 yarn upgrade left-pad@^1.0.0처럼 패키지와 버전을 직접 지정해야 같이 고친다고 한다. (이상하다? 예전엔 같이 바뀌었던 거 같은데... yarn이 중간에 수정된 건지 내가 착각한 건지 모르겠다;;;)&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;아무튼 해결 방법은 syncyarnlock라는 패키지를 사용하면 된다.&lt;/p&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;# 패키지 업데이트 (yarn.lock만 변경됨)
yarn upgrade

# yarn.lock을 기준으로 package.json 업데이트
npx syncyarnlock -s -k

# package.json을 기준으로 yarn.lock 업데이트
yarn&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;syncyarnlock 패키지는 yarn.lock 파일을 기준으로 package.json 파일을 동기화한다. 옵션은 아래 링크 참고&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/syncyarnlock&quot;&gt;https://www.npmjs.com/package/syncyarnlock&lt;/a&gt;&lt;/p&gt;
&lt;figure id=&quot;og_1646744724008&quot; contenteditable=&quot;false&quot; data-ke-type=&quot;opengraph&quot; data-ke-align=&quot;alignCenter&quot; data-og-type=&quot;website&quot; data-og-title=&quot;syncyarnlock&quot; data-og-description=&quot;Syncs yarn.lock versions into an exsisting package.json file, removing dynamic numbers such as with ^, keeping static versions intact.. Latest version: 1.0.19, last published: 2 years ago. Start using syncyarnlock in your project by running &amp;#96;npm i syncyarn&quot; data-og-host=&quot;www.npmjs.com&quot; data-og-source-url=&quot;https://www.npmjs.com/package/syncyarnlock&quot; data-og-url=&quot;https://www.npmjs.com/package/syncyarnlock&quot; data-og-image=&quot;https://scrap.kakaocdn.net/dn/bE0Uk3/hyNEhskHhK/qkrb8eDsVrdH5LUkpOAGN0/img.png?width=1200&amp;amp;height=630&amp;amp;face=0_0_1200_630&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/syncyarnlock&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-source-url=&quot;https://www.npmjs.com/package/syncyarnlock&quot;&gt;
&lt;div class=&quot;og-image&quot; style=&quot;background-image: url('https://scrap.kakaocdn.net/dn/bE0Uk3/hyNEhskHhK/qkrb8eDsVrdH5LUkpOAGN0/img.png?width=1200&amp;amp;height=630&amp;amp;face=0_0_1200_630');&quot;&gt;&amp;nbsp;&lt;/div&gt;
&lt;div class=&quot;og-text&quot;&gt;
&lt;p class=&quot;og-title&quot; data-ke-size=&quot;size16&quot;&gt;syncyarnlock&lt;/p&gt;
&lt;p class=&quot;og-desc&quot; data-ke-size=&quot;size16&quot;&gt;Syncs yarn.lock versions into an exsisting package.json file, removing dynamic numbers such as with ^, keeping static versions intact.. Latest version: 1.0.19, last published: 2 years ago. Start using syncyarnlock in your project by running `npm i syncyarn&lt;/p&gt;
&lt;p class=&quot;og-host&quot; data-ke-size=&quot;size16&quot;&gt;www.npmjs.com&lt;/p&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/figure&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;syncyarnlock을 사용하고 나면 이제 반대로 yarn.lock 파일의 버전이 일치하지 않는 모습을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='291' data-origin-height='78' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/lc8q9/btrvtAj6v1L/GvP7JiAqRFITLXZMmYE3Kk/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/lc8q9/btrvtAj6v1L/GvP7JiAqRFITLXZMmYE3Kk/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Flc8q9%2FbtrvtAj6v1L%2FGvP7JiAqRFITLXZMmYE3Kk%2Fimg.png' data-filename='화면 캡처 2022-03-07 111412.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;그래서 다시 yarn 명령어를 통해 package.json에 맞게 yarn.lock을 업데이트해준다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이제 편ㅡ안해졌다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;일반적으로 패키지 버전을 파악할 때 package.json 파일을 참고하니까 yarn upgrade 시 package.json도 같이 수정되는 게 맞다고 생각하는데 나만 그런 건가? 흠...&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>웹</category>
<category>JavaScript</category>
<category>node.js</category>
<category>자바스크립트</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1252</guid>
<comments>https://blog.joyfui.com/1252#entry1252comment</comments>
<pubDate>Sat, 19 Mar 2022 12:00:50 +0900</pubDate>
</item>
<item>
<title>CRA 없이 React 개발환경 구축하기 (Rollup편)</title>
<link>https://blog.joyfui.com/1251</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;CRA 없이 React 개발환경 구축하기 &lt;a href=&quot;https://blog.joyfui.com/1243&quot;&gt;웹팩편&lt;/a&gt;, &lt;a href=&quot;https://blog.joyfui.com/1248&quot;&gt;파셀편&lt;/a&gt;에 이어서 이번엔 &lt;a href=&quot;https://rollupjs.org/&quot;&gt;롤업&lt;/a&gt;편이다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://rollupjs.org/&quot;&gt;Rollup&lt;/a&gt;은 찾아보니까 ESM 번들링을 지원하고 따라서 트리셰이킹에 강하다고 한다. 주로 라이브러리 개발에 사용하는 번들러라고 한다.&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;package.json 생성&lt;/h4&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;일단 적당한 폴더를 만들고 아래 명령어로 package.json 파일을 생성한다.&lt;/p&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn init -y&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;리액트 설치&lt;/h4&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn add react react-dom&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;바벨 설치&lt;/h4&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn add @babel/core @babel/preset-react&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;웹팩 때와 비슷하다. 웹팩 때와 동일하게 세팅하고 싶었지만, preset-env를 추가하면 오류가 나는 관계로 뺐다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;@babel/preset-react - 리액트의 JSX 문법을 변환&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;babel.config.json 생성&lt;/h4&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;{
  &quot;presets&quot;: [
    [&quot;@babel/preset-react&quot;, { &quot;runtime&quot;: &quot;automatic&quot; }]
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;React 17 이후부턴 &quot;runtime&quot;: &quot;automatic&quot; 옵션을 추가해야 한다.&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;롤업 설치&lt;/h4&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn add rollup&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;롤업 플러그인 설치&lt;/h4&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;설치해야 할 플러그인이 은근히 많다.&lt;/p&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn add @rollup/plugin-babel @rollup/plugin-commonjs @rollup/plugin-node-resolve @rollup/plugin-replace rollup-plugin-styles rollup-plugin-smart-asset rollup-plugin-copy rollup-plugin-generate-html-template rollup-plugin-delete rollup-plugin-serve rollup-plugin-livereload&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;@rollup/plugin-babel - 바벨과 연동&lt;br /&gt;@rollup/plugin-commonjs - CommonJS 모듈 지원&lt;br /&gt;@rollup/plugin-node-resolve - 외부 모듈(node_modules)도 포함&lt;br /&gt;@rollup/plugin-replace - 특정 문자열을 치환. process.env.NODE_ENV를 처리하기 위해서 사용&lt;br /&gt;rollup-plugin-styles - css 파일을 해석하고 삽입&lt;br /&gt;rollup-plugin-smart-asset - 이미지 파일 등을 해석하고 삽입&lt;br /&gt;rollup-plugin-copy - 파일을 복사. public 내용을 복사하기 위해 사용&lt;br /&gt;rollup-plugin-generate-html-template - 번들이 삽입된 html 파일을 생성&lt;br /&gt;rollup-plugin-delete - 빌드 전 빌드 폴더 안 내용을 정리하고 빌드&lt;br /&gt;rollup-plugin-serve - 개발 서버 실행. 아쉽게도 핫 리로드는 안됨...&lt;br /&gt;rollup-plugin-livereload - 변경사항이 있으면 새로고침. 위 플러그인이 리로드 기능이 없어서 이를 보완하기 위해 설치&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;rollup.config.js 생성&lt;/h4&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;최대한 웹팩과 비슷하게 구성하려고 노력했다.&lt;/p&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;import del from 'rollup-plugin-delete';
import { nodeResolve } from '@rollup/plugin-node-resolve';
import replace from '@rollup/plugin-replace';
import { babel } from '@rollup/plugin-babel';
import commonjs from '@rollup/plugin-commonjs';
import styles from 'rollup-plugin-styles';
import smartAsset from 'rollup-plugin-smart-asset';
import copy from 'rollup-plugin-copy';
import htmlTemplate from 'rollup-plugin-generate-html-template';
import serve from 'rollup-plugin-serve';
import livereload from 'rollup-plugin-livereload';

const devMode = process.env.NODE_ENV !== 'production';

export default {
  input: 'src/index.js',
  output: {
    file: 'build/index.js',
    format: 'iife',
    assetFileNames: '[name].[hash][extname]',
    inlineDynamicImports: true,
  },
  plugins: [
    del({
      targets: 'build/*',
      runOnce: true,
    }),
    nodeResolve(),
    replace({
      'process.env.NODE_ENV': JSON.stringify('production'),
    }),
    babel({
      babelHelpers: 'bundled',
    }),
    commonjs(),
    styles({
      mode: 'extract',
    }),
    smartAsset({
      url: 'copy',
      nameFormat: '[name].[hash][ext]',
    }),
    copy({
      targets: [{ src: ['public/**/*', '!public/index.html'], dest: 'build' }],
    }),
    htmlTemplate({
      template: 'public/index.html',
      target: 'index.html',
      replaceVars: { '%PUBLIC_URL%': '.' },
    }),
  ].concat(
    devMode
      ? [
          serve({
            contentBase: 'build',
            open: true,
            port: 3000,
            historyApiFallback: true,
          }),
          livereload({
            watch: 'build',
          }),
        ]
      : []
  ),
};&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;개발 서버 실행 시 자꾸 꺼지는 문제가 있어서 한참을 삽질했는데 알고 보니 livereload 플러그인과 copy 플러그인 궁합에 문제가 있었다. public/index.html 파일 제외로 해결!&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;리액트 컴포넌트 작성&lt;/h4&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;그냥 CRA에서 기본으로 만들어주는 예제 파일을 그대로 복사한다. (src, public 폴더)&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;단, 예제 소스에서는 web-vitals을 사용하므로 이걸 추가로 설치해야 한다.&lt;/p&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn add web-vitals&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;package.json에 scripts 추가&lt;/h4&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;rollup -c -w --environment NODE_ENV:development&quot;,
    &quot;build&quot;: &quot;rollup -c --environment NODE_ENV:production&quot;
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;yarn start - 개발 서버를 실행해 프로젝트를 바로 확인. 주소는 http://localhost:3000/&lt;br /&gt;yarn build - 빌드. 결과물은 build 폴더에 생성&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='1420' data-origin-height='947' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/b1nax8/btruXXAX19q/5Gf253Nz2zRroEZftwGoLK/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/b1nax8/btruXXAX19q/5Gf253Nz2zRroEZftwGoLK/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb1nax8%2FbtruXXAX19q%2F5Gf253Nz2zRroEZftwGoLK%2Fimg.png' data-filename='Screenshot 2022-03-05 at 00-26-05 React App.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;@babel/preset-env를 추가하면 &lt;code&gt;Uncaught ReferenceError: require is not defined&lt;/code&gt; 오류가 나는데 결국 해결 못 해서 그냥 빼버렸다... 브라우저에서 사용하려면 &lt;code&gt;format: 'iife&amp;rsquo;&lt;/code&gt; 옵션을 사용해야 하는데 이러면 cjs를 변환 안 하나..?&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;어째 자료가 죄다 라이브러리용으로만 있고 애플리케이션 쪽은 없어서 고생을 많이 했다. 최대한 웹팩과 비슷하게 구성하고 싶었는데 안 되는 게 많다.(특히 핫 리로드, 이건 Nollup을 사용하면 된다는데 이건 나중에...) 일단 내가 공부한 거론 이게 최선...ㅠㅜ&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>React</category>
<category>JavaScript</category>
<category>react</category>
<category>리액트</category>
<category>자바스크립트</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1251</guid>
<comments>https://blog.joyfui.com/1251#entry1251comment</comments>
<pubDate>Sat, 05 Mar 2022 12:00:59 +0900</pubDate>
</item>
<item>
<title>토큰은 어디에 저장해야 하는가?</title>
<link>https://blog.joyfui.com/1250</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;스터디 도중 httpOnly 쿠키가 등장했는데 이해가 안되는 부분이 있어서 하루 동안 구글링하며 알아봤다.&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;용어 정리&lt;/h4&gt;
&lt;p data-ke-size=&quot;size18&quot;&gt;토큰&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;서버에서 사용자를 구분하는 데이터. HTTP는 상태를 가지고 있지 않으므로 토큰 같은 게 없다면 사용자를 구분할 수 없다. 요청에 토큰을 담아 보내면 서버가 사용자를 판단하고 작업을 수행한다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;개인정보나 다름없으므로 관리에 신경 써야 한다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size18&quot;&gt;XSS (Cross-site Scripting)&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;공격자가 사이트에 스크립트를 주입하는 공격. 사용자가 해당 사이트에 접속하면 스크립트가 실행된다. 자바스크립트 코드를 실행하므로 자바스크립트로 할 수 있는 모든 것을 할 수 있음&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;흔한 사례로 XSS 방지 처리가 되지 않은 게시판에 &amp;lt;script&amp;gt; 태그를 넣은 글을 작성하면 해당 글을 읽은 사람들에게 자바스크립트 코드가 실행됨&lt;/p&gt;
&lt;p data-ke-size=&quot;size18&quot;&gt;CSRF (Cross-Site Request Forgery)&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;사용자가 의도하지 않은 요청을 보내게 하는 공격. 공격자는 사용자인 척하고 API 요청을 보낼 수 있음&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;흔한 사례로 &amp;lt;img&amp;gt; 태그에 로그아웃 주소를 넣은 글을 작성하면 해당 글을 읽은 사람들은 로그아웃 요청을 보내게 되고 로그아웃이 된다. (img 태그는 이미지를 불러올 때 GET 메소드를 사용)&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;토큰을 저장할 수 있는 곳&lt;/h4&gt;
&lt;p data-ke-size=&quot;size18&quot;&gt;var, 리덕스 스토어 등 자바스크립트 변수&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;변수는 휘발성이다. 페이지를 새로고침하면 토큰이 날아가므로 매번 새로 로그인을 해야 한다. SPA라면 페이지 전환 시 새로고침이 되지 않으므로 상황이 낫지만 새로고침하면 다시 로그인해야 하는 건 마찬가지&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;다만 통째로 가져갈 수 있는 쿠키, 로컬/세션 스토리지와는 다르게 어디에 저장됐는지 공격자가 분석해야 한다는 점에서 장점이 있다.(특히 로컬 변수라면 더더욱! 물론 개발자도 고려해야 할 부분이 많아짐)&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;어쨌든 고려할 가치 없음&lt;/p&gt;
&lt;p data-ke-size=&quot;size18&quot;&gt;쿠키&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;자바스크립트로 접근이 가능하므로 XSS에 취약하다. 쿠키는 요청을 보낼 때 자동으로 전송되므로 CSRF에 취약하다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;XSS의 경우 httpOnly 옵션을 사용하면(서버에서 지정) 자바스크립트에서 접근이 불가능해지므로 공격을 차단할 수 있다. 다만 개발자도 접근할 수 없으므로 토큰 전송, 로그인 여부 판단 등의 로직을 짤 때 다른 접근법을 사용해야 한다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;CSRF의 경우 SameSite 등의 옵션으로 완화할 수 있다. 하지만 쿠키는 항상 자동으로 전송되기 때문에 개발자가 제어할 수 없으므로 완전한 차단은 불가능하다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size18&quot;&gt;로컬 스토리지&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;만료일 지정이 가능한 쿠키와는 다르게 영구 저장이기 때문에 자동 삭제 등을 구현하려면 귀찮은 부분이 있음. 그래도 별도 라이브러리를 사용하지 않을 때 쿠키보다 다루기가 편하다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;httpOnly 옵션을 사용하지 않은 쿠키와 마찬가지로 자바스크립트로 접근이 가능하므로 XSS에 취약하다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;자동으로 전송되지 않기 때문에 CSRF에는 해당 사항이 없다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size18&quot;&gt;세션 스토리지&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;로컬 스토리지와 유사하나 데이터가 세션별로 유지된다는 점이 다르다. (창을 닫으면 데이터가 사라짐) 자바스크립트 변수와는 다르게 새로고침 시에도 데이터가 유지되지만 새 탭/창을 열면 새로운 세션이 생성되므로 새로 로그인 해야 한다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;탭별로 다르게 로그인하는 걸 원하지 않는 이상 고려할 가치 없음&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;결론&lt;/h4&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;세션ID 하나만 저장하는 방식의 경우 httpOnly 쿠키를 사용하는 게 베스트이다. 물론, httpOnly 설정은 서버에서 하므로 서버와의 조율이 필요하다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;그리고 토큰 관리를 프론트에서 할 수 없으므로 토큰 저장 여부로 로그인 여부를 판단하는 로직은 사용할 수 없다. 아무래도 서버로 요청을 보내고 응답에 따라 로그인 여부를 판단하는 식으로 만들어야 할 듯&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;그리고 앞서 말했다시피 CSRF에 취약하다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;accessToken, refreshToken 이렇게 두 개를 사용하는 경우 refreshToken은 httpOnly 쿠키에 accessToken은 자바스크립트 변수에 저장하는 방법이 가장 베스트다. accessToken은 개발자가 직접 접근할 수 있으므로 언제 어떻게 담아 보낼지 제어가 가능해진다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;XSS 공격 시 refreshToken은 httpOnly 쿠키이기 때문에 얻을 수 없고 accessToken은 어디에 있는지 몰라서 얻기가 까다롭다. CSRF 공격을 당하더래도 같이 전송되는 refreshToken만으로는 할 수 있는 게 없다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;만약 로컬 변수에 accessToken을 저장하기 곤란한 상황이라면 결국 쿠키와 로컬 스토리지 중 선택해야 하는데 이 부분은 의견이 분분하지만 나는 두 가지 모두 XSS에 취약한 건 마찬가지니 사용하기 편한 비교적 최신 기능인 로컬 스토리지에 저장하는 게 낫다고 생각한다.&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>웹</category>
<category>JavaScript</category>
<category>자바스크립트</category>
<category>프로그래밍</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1250</guid>
<comments>https://blog.joyfui.com/1250#entry1250comment</comments>
<pubDate>Mon, 14 Feb 2022 23:01:50 +0900</pubDate>
</item>
<item>
<title>스토리북에서 CSS Modules 사용하기</title>
<link>https://blog.joyfui.com/1249</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;예전에 도입하려다 실패했던 스토리북을 최근에 다시 시도해서 성공했다. 근데 의외로 CSS Modules가 작동하지 않는다. css-loader를 사용하면 기본값이 활성화인데 스토리북에서 굳이 꺼둔 건가...? 아무튼 해결 방법을 찾아서 올려놓는다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;.storybook/main.js 파일을 열고 아래처럼 webpackFinal에 CSS Modules 지원 관련 코드를 추가한다.&lt;/p&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;const path = require('path');

module.exports = {
  stories: ['../src/**/*.stories.mdx', '../src/**/*.stories.@(js|jsx|ts|tsx)'],
  addons: ['@storybook/addon-links', '@storybook/addon-essentials'],
  framework: '@storybook/react',
  webpackFinal: async (config) =&amp;gt; {
    // CSS Modules 지원 추가
    config.module.rules.find(
      (rule) =&amp;gt; rule.test.toString() === '/\\.css$/'
    ).exclude = /\.module\.css$/;

    config.module.rules.push({
      test: /\.module\.css$/,
      use: [
        'style-loader',
        {
          loader: 'css-loader',
          options: {
            modules: true,
          },
        },
      ],
      include: path.resolve(__dirname, '../'),
    });

    return config;
  },
};&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;출처: &lt;a href=&quot;https://stackoverflow.com/questions/70042915/how-to-use-css-modules-with-storybook-6&quot;&gt;https://stackoverflow.com/questions/70042915/how-to-use-css-modules-with-storybook-6&lt;/a&gt;&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>React</category>
<category>CSS</category>
<category>JavaScript</category>
<category>react</category>
<category>리액트</category>
<category>자바스크립트</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1249</guid>
<comments>https://blog.joyfui.com/1249#entry1249comment</comments>
<pubDate>Sat, 05 Feb 2022 12:00:52 +0900</pubDate>
</item>
<item>
<title>CRA 없이 React 개발환경 구축하기 (Parcel편)</title>
<link>https://blog.joyfui.com/1248</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;지난번에 &lt;a href=&quot;https://blog.joyfui.com/1243&quot;&gt;CRA 없이 웹팩으로 리액트 개발환경 구축하는 글&lt;/a&gt;을 썼는데 이번엔 &lt;a href=&quot;https://parceljs.org/&quot;&gt;파셀&lt;/a&gt;에 도전해봤다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://parceljs.org/&quot;&gt;Parcel&lt;/a&gt;은 불꽃 튀게 빠르고 설정이 필요 없는 웹 애플리케이션 번들러라는 소개답게 설정 파일이 없다! (물론 아예 없진 않다. 이건 후술...)&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;웹팩 대신 파셀을 사용하는 거니까 앞부분은 거의 똑같다. 역시 yarn 기준으로 설명&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;package.json 생성&lt;/h4&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;일단 적당한 폴더를 만들고 아래 명령어로 package.json 파일을 생성한다.&lt;/p&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn init -y&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;리액트 설치&lt;/h4&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn add react react-dom&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;바벨 설치&lt;/h4&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;파셀에 내장되어 있기 때문에 필요 없다! .babelrc 파일을 만들어서 직접 설정할 수도 있지만 안 해도 파셀이 알아서 작동한다.&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;파셀 설치&lt;/h4&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn add parcel&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;웹팩은 로더와 플러그인을 설치하고 세팅해줬지만 파셀은 다 필요 없다. 기본적으로 다 알아서 해준다!&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;파셀 플러그인 설치&lt;/h4&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn add parcel-transformer-interpolate-html parcel-reporter-clean-dist&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;parcel-transformer-interpolate-html - html 파일에서 %ENV% 같은 템플릿 구문 사용 가능. 꼭 필요한 건 아니지만 CRA 기본 예제 파일에서 %PUBLIC_URL%을 사용하기 때문에 이를 변환하기 위해 설치. 파셀 v1에는 해당 기능을 하는 플러그인이 있었는데 v2엔 없어서 내가 만들었다ㅎㅎ&lt;br /&gt;parcel-reporter-clean-dist - 빌드 전 빌드 폴더 안 내용을 정리하고 빌드&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;.parcelrc 생성&lt;/h4&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;만약 플러그인을 설치 안 했다면 정말 아무 설정 파일도 없었겠지만 아쉽게도 플러그인을 설치하는 바람에 설정 파일이 하나 필요하게 됐다. 이 정도도 웹팩에 비하면야 뭐...&lt;/p&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;{
  &quot;extends&quot;: &quot;@parcel/config-default&quot;,
  &quot;transformers&quot;: {
    &quot;*.{html,htm}&quot;: [&quot;parcel-transformer-interpolate-html&quot;, &quot;...&quot;]
  },
  &quot;reporters&quot;: [&quot;parcel-reporter-clean-dist&quot;, &quot;...&quot;]
}&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;.env 생성&lt;/h4&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;.env는 dotenv의 환경변수 파일이다. 파셀에 dotenv가 내장되어 있어 자동으로 .env 파일을 읽어 환경변수를 설정해준다.&lt;/p&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;PUBLIC_URL=.&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이렇게 환경변수를 지정해두면 parcel-transformer-interpolate-html가 %PUBLIC_URL%을 .으로 교체한다.&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;리액트 컴포넌트 작성&lt;/h4&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;그냥 CRA에서 기본으로 만들어주는 예제 파일을 그대로 복사한다. (src, public 폴더)&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;단, 예제 소스에서는 web-vitals을 사용하므로 이걸 추가로 설치해야 한다.&lt;/p&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn add web-vitals&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;그리고 진입점이 index.js이고 번들링 후 index.html에 삽입되는 웹팩과 다르게 파셀은 진입점이 index.html이다. index.html에 index.js를 추가해야 파셀이 파일을 타고타고 가면서 알아서 번들링 한다.&lt;/p&gt;
&lt;pre class=&quot;html xml&quot; data-ke-language=&quot;html&quot;&gt;&lt;code&gt;&amp;lt;script type=&quot;module&quot; src=&quot;../src/index.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;public/index.html 파일을 열고 위 부분을 &amp;lt;/body&amp;gt; 위에 추가한다.&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;package.json에 source, scripts 추가&lt;/h4&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;  // &quot;main&quot;: &quot;index.js&quot;,
  &quot;source&quot;: &quot;public/index.html&quot;,
  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;parcel -p 3000 --open&quot;,
    &quot;build&quot;: &quot;parcel build --dist-dir build --no-source-maps&quot;
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&quot;main&quot; 필드가 있으면 파셀은 라이브러리로 인식하기 때문에 지워야 한다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;그리고 scripts에 진입점(public/index.html)을 추가할 수 있지만 이렇게 source 필드를 추가함으로써 진입점을 설정해줄 수 있다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;yarn start - 개발 서버를 실행해 프로젝트를 바로 확인. 주소는 http://localhost:3000/&lt;br /&gt;yarn build - 빌드. 결과물은 build 폴더에 생성&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='1920' data-origin-height='947' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/UzYr4/btrq2jt7cKo/nwFxUweSNKj8jTXuCRfsk0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/UzYr4/btrq2jt7cKo/nwFxUweSNKj8jTXuCRfsk0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FUzYr4%2Fbtrq2jt7cKo%2FnwFxUweSNKj8jTXuCRfsk0%2Fimg.png' data-filename='Screenshot 2022-01-14 at 01-43-33 React App.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;놀랍게도 이걸로 끝이다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;처음에 파셀 자료를 찾았을 때 v1 자료만 있고 v2 자료가 없었다. 그래도 복잡한 설정이 전혀 없기 때문에 공식 홈페이지 문서만으로도 충분히 공부가 되었다. 다만 아직 플러그인 생태계가 부족해서 직접 만들어야 하는...&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>React</category>
<category>JavaScript</category>
<category>react</category>
<category>리액트</category>
<category>자바스크립트</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1248</guid>
<comments>https://blog.joyfui.com/1248#entry1248comment</comments>
<pubDate>Sat, 22 Jan 2022 12:00:59 +0900</pubDate>
</item>
<item>
<title>[자작] parcel-transformer-interpolate-html</title>
<link>https://blog.joyfui.com/1247</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;지난번 웹팩에 이어서 이번엔 parcel을 공부하고 있다. 웹팩에서 사용했던 interpolate-html-plugin 같은 플러그인이 필요한데 파셀 v1에는 &lt;a href=&quot;https://www.npmjs.com/package/parcel-plugin-interpolate-html&quot;&gt;parcel-plugin-interpolate-html&lt;/a&gt;이라는 동일 기능의 플러그인이 있었지만 파셀 v2에는 이런 플러그인이 없었다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;없으면 직접 만들면 되니까 만들었다.ㅎㅎ 확실히 파셀 v1과 v2는 플러그인 구조도 그렇고 엄청나게 바뀌었다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/parcel-transformer-interpolate-html&quot; rel=&quot;noopener&quot;&gt;https://www.npmjs.com/package/parcel-transformer-interpolate-html&lt;/a&gt;&lt;/p&gt;
&lt;figure id=&quot;og_1642093202489&quot; contenteditable=&quot;false&quot; data-ke-type=&quot;opengraph&quot; data-ke-align=&quot;alignCenter&quot; data-og-type=&quot;website&quot; data-og-title=&quot;parcel-transformer-interpolate-html&quot; data-og-description=&quot;Parcel v2 plugin that interpolates ENV in HTML files&quot; data-og-host=&quot;www.npmjs.com&quot; data-og-source-url=&quot;https://www.npmjs.com/package/parcel-transformer-interpolate-html&quot; data-og-url=&quot;https://www.npmjs.com/package/parcel-transformer-interpolate-html&quot; data-og-image=&quot;https://scrap.kakaocdn.net/dn/Ycqwo/hyM5BRZHXu/DzdhJD5xrh4XrUxNbaBVK1/img.png?width=1200&amp;amp;height=630&amp;amp;face=0_0_1200_630&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/parcel-transformer-interpolate-html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-source-url=&quot;https://www.npmjs.com/package/parcel-transformer-interpolate-html&quot;&gt;
&lt;div class=&quot;og-image&quot; style=&quot;background-image: url('https://scrap.kakaocdn.net/dn/Ycqwo/hyM5BRZHXu/DzdhJD5xrh4XrUxNbaBVK1/img.png?width=1200&amp;amp;height=630&amp;amp;face=0_0_1200_630');&quot;&gt;&amp;nbsp;&lt;/div&gt;
&lt;div class=&quot;og-text&quot;&gt;
&lt;p class=&quot;og-title&quot; data-ke-size=&quot;size16&quot;&gt;parcel-transformer-interpolate-html&lt;/p&gt;
&lt;p class=&quot;og-desc&quot; data-ke-size=&quot;size16&quot;&gt;Parcel v2 plugin that interpolates ENV in HTML files&lt;/p&gt;
&lt;p class=&quot;og-host&quot; data-ke-size=&quot;size16&quot;&gt;www.npmjs.com&lt;/p&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/figure&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이제 npm에 배포한 패키지도 두 개! 뿌듯ㅎㅎ&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;소스 코드는 역시나 깃허브에 있다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://github.com/joyfuI/parcel-transformer-interpolate-html&quot; rel=&quot;noopener&quot;&gt;https://github.com/joyfuI/parcel-transformer-interpolate-html&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;사용법은 위 링크 참고. 이번엔 깃허브 액션으로 npm publish 자동화도 시도해봤다.&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>웹</category>
<category>JavaScript</category>
<category>parcel</category>
<category>자바스크립트</category>
<category>자작</category>
<category>파셀</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1247</guid>
<comments>https://blog.joyfui.com/1247#entry1247comment</comments>
<pubDate>Fri, 14 Jan 2022 02:05:43 +0900</pubDate>
</item>
<item>
<title>We no longer support global installation of Create React App 오류 해결법</title>
<link>https://blog.joyfui.com/1246</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://create-react-app.dev/&quot;&gt;create-react-app&lt;/a&gt;가 5.0.0으로 업데이트되었다. webpack 5, eslint 8 등 굵직한 메이저 업데이트들이 모여있어서 꽤나 반가웠는데 테스트 삼아 리액트 프로젝트를 생성하려 했더니 오류가 난다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='995' data-origin-height='654' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/GBBKI/btrpIxzp8Zj/rtdMgEg78MlSiHeFGlMoCK/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/GBBKI/btrpIxzp8Zj/rtdMgEg78MlSiHeFGlMoCK/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FGBBKI%2FbtrpIxzp8Zj%2FrtdMgEg78MlSiHeFGlMoCK%2Fimg.png' data-filename='WindowsTerminal_6jTStuEgHo.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;내용을 보면 전역 설치한 create-react-app을 지우라고 하는데 애초에 npx로만 사용해서 전역 설치한 적이 없었고 당연히 삭제 명령어를 실행해봐도 효과가 없었다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;왠지 캐시 문제가 아닐까 하고 npx 캐시 삭제 명령어가 있나 찾아봤더니&lt;/p&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;npx clear-npx-cache&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이런 방법이 있었다. npx 캐시 삭제를 위해 npx으로 캐시 삭제 패키지를 실행해야 하는 아이러니...&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;아무튼 위 명령어로 캐시 삭제 후 다시 프로젝트를 생성하니 잘 된다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='995' data-origin-height='654' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/c686Wm/btrpIy6edoC/lZbKTi7CWKk1eTDovoelw1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/c686Wm/btrpIy6edoC/lZbKTi7CWKk1eTDovoelw1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fc686Wm%2FbtrpIy6edoC%2FlZbKTi7CWKk1eTDovoelw1%2Fimg.png' data-filename='WindowsTerminal_WW6kmn84cm.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;프로젝트를 생성하고 보니까 패키지 매니저로 npm을 사용한다. 원래는 yarn이 설치되어 있으면 yarn을 사용하고 yarn 설치 상태에서 npm을 사용하려면 -use-npm 옵션을 줘야 했는데... 이젠 기본값이 npm으로 바뀐 것 같다. yarn을 사용하려면 npx 대신에 yarn create를 사용해야 한다.&lt;/p&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn create react-app my-app&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이러면 전역으로 create-react-app이 설치돼서 마음에 들진 않는데 달리 방법이 없으니...&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>React</category>
<category>JavaScript</category>
<category>react</category>
<category>리액트</category>
<category>자바스크립트</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1246</guid>
<comments>https://blog.joyfui.com/1246#entry1246comment</comments>
<pubDate>Wed, 05 Jan 2022 12:00:44 +0900</pubDate>
</item>
<item>
<title>네이버 나우 동영상 주소 추출 삽질기</title>
<link>https://blog.joyfui.com/1245</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;네이버 나우 방송을 녹화하는 툴을 만들어서 사용하고 있었는데 최근에 또 작동이 안 됐다. 시행착오 끝에 방법을 찾아내긴 했는데 또 미래에 하게 될 삽질을 위해 기록을 남겨둔다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;최초에는 주소 추출이 쉬웠다. 그냥 개발자 도구로 네트워크 탭을 열고 찾아보면 json 형식으로 데이터를 받고 있었고 이 안에 주소가 있었다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;https://now.naver.com/api/nnow/v1/stream/911/livestatus/&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이런 주소에서 videoStreamUrl 키에 m3u8 주소가 들어있었다. 그러다가 api 버전이 v2도 바뀌면서 주소가 암호화되기 시작했다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='509' data-origin-height='386' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/7Wtoe/btro8xAaW7H/9FNO1xlgiqK29OqVAszZS0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/7Wtoe/btro8xAaW7H/9FNO1xlgiqK29OqVAszZS0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F7Wtoe%2Fbtro8xAaW7H%2F9FNO1xlgiqK29OqVAszZS0%2Fimg.png' data-filename='firefox_rRrgu2RLSw.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;다른 능력자분 덕분에 AES 방식 암호화란 걸 알았고 암호키도 알았다. 알고 보니 암호키가 소스 코드에 그냥 하드코딩 되어 있었다. 키는 !@7now$%1api)6*&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이후로 한차례 api 주소도 바뀌고 했지만 큰 변화는 없었다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;여기까지가 역사(...)고 이제부터 삽질기이다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;최근에 다운로드를 시도하니 오류가 나서 로그를 확인해보니까 암호화된 값이 빈칸으로 왔다. 또 api 주소가 변경됐나 싶어서 네트워크 탭을 열고 살펴보았으나 바뀐 게 없었다. 그래서 해당 api를 직접 호출해보니 네트워크 탭의 결과와는 다르게 값들이 빈칸으로 온다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;https://apis.naver.com/now_web/nowapi-xhmac/nnow/v2/stream/911/livestatus/&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='514' data-origin-height='434' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/bTSlt8/btrpaI2xzBm/nkIVvuzUwk2LkE6SYcFbDk/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/bTSlt8/btrpaI2xzBm/nkIVvuzUwk2LkE6SYcFbDk/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbTSlt8%2FbtrpaI2xzBm%2FnkIVvuzUwk2LkE6SYcFbDk%2Fimg.png' data-filename='Screenshot 2021-12-28 at 21-49-59 https apis naver com.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;뭐, 이런 경우는 뻔하게 리퍼러 문제겠지 싶어서 헤더에 &quot;Referer: https://now.naver.com/&quot;을 추가했더니 값이 정상적으로 온다ㅎㅎ&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;그런데 기존 키로 복호화가 안된다! 암호화 키가 바뀌었단 사실에 절망했지만 어차피 브라우저에서 재생하려면 어딘가에서 복호화를 해야 하는 법! 키를 찾기 위한 삽질을 시작했다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;먼저 소스 보기부터 시작한다. 뭐 중요한 정보는 아니지만 vue.js를 사용하는 걸로 확인된다... 아무튼 지난번 경험으로 crypto-js 라이브러리를 쓴다는 걸 알았으니 자바스크립트 파일을 뒤져서 decrypt 메소드를 사용하는 곳을 찾았다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;https://now.naver.com/js/app.3fb03ede.js&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;찾아보니 저 파일에서 AES.decrypt 메소드를 사용하고 있었다. 번들링 된 파일이 압축되어 있어 보기가 힘드니 보기 좋게 정렬해주자. &lt;a href=&quot;https://blog.joyfui.com/1173&quot;&gt;지난번에 소개한 사이트&lt;/a&gt;를 이용했다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='553' data-origin-height='272' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/djFxDU/btrpaJmQjGC/5NkMdtULcLz86LK5lDnEf1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/djFxDU/btrpaJmQjGC/5NkMdtULcLz86LK5lDnEf1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdjFxDU%2FbtrpaJmQjGC%2F5NkMdtULcLz86LK5lDnEf1%2Fimg.png' data-filename='Notepad2_vi4dJzMBTo.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;예전엔 저기 근처에 암호화 키도 떡하니 적혀있었는데 이젠 없다....ㅠㅜ&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;도저히 암호화 키를 찾을 수가 없어서 AES.decrypt 메소드 위에 console.log(e, d)를 적고 무식하게 개발자 도구 콘솔에 전체 자바스크립트를 붙여넣었다.ㄷㄷ&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;의외로 멀쩡히 동작한다?! 추가한 console.log도!!&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='1156' data-origin-height='683' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/b3FLJV/btro13fNbcZ/33P4Y2zUKb1tjMyMwBUl0K/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/b3FLJV/btro13fNbcZ/33P4Y2zUKb1tjMyMwBUl0K/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb3FLJV%2Fbtro13fNbcZ%2F33P4Y2zUKb1tjMyMwBUl0K%2Fimg.png' data-filename='firefox_AvkYnz6OZr.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;덕분에 암호화 키를 얻었다. 얘로 복호화가 가능한지 간단하게 테스트해봤다.&lt;/p&gt;
&lt;pre class=&quot;html xml&quot; data-ke-language=&quot;html&quot;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/rollups/aes.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script&amp;gt;
        function encrypt(message = '', key = ''){
            var message = CryptoJS.AES.encrypt(message, key);
            return message.toString();
        }
        function decrypt(message = '', key = ''){
            var code = CryptoJS.AES.decrypt(message, key);
            var decryptedMessage = code.toString(CryptoJS.enc.Utf8);
            return decryptedMessage;
        }

        console.log(decrypt('U2FsdGVkX18+1jiygGMdPysPnQ6i/SQQGRi+UrVOmluOWL1lzzTSfZb2UXyRVcHt3WXDBDRhCabc5fkaGBHOnyq9dOCi5QXEjn390O/PPedrTgpdsj7OZtY+UZ+Eor1STGU+KuSkenFnZvHFmNnnE/sP75ClGCzJOBQf2rFXkKwJeC0tILemUSWgG2oQCnPdpRXgGPe9Y+Ok4fAHwzjlsn5xzR7GxsUX3PDpkAL01z6mxgJu5bF3qLD6An86J60hl1NRU54OtTkuWTGX5QJxFNjakj0FELO0tPRklhJpFeberBOGLrB++9gqXoti5J9/0sbhVQPFIEmL1FcWd9IXaLrc4/zcqF21P8jDOV9Xlr1JVzIgY0yFkk/ZPFAHkyuq3pEtapUT0oZtJlUnqNRunmjjnJsp2aANfhuZ5qDChHC9RWdK/+S4P+X2AsSJj/M+eBWTgjsF343e19M34vLGLHQv8Y0SMfEI3jW7sHfNq2lP7+3dmxokxEsDsYCq5aII7oHOaVTxmbdRpHoVGIM+1ofGL4NMn/a3HzYOE6MJdzli4tmwoeoVVYxqYnR+vNnJC+rOU/M1Kx26/mQV9s0+HJh4exTsauPLZCkvS1wA9ytHWJQld6NJgoLjE+30TF9ukYmdG/1kk9zm26zTRnzHhUCTGHmU//MXfkOnVu1XJItT+aD8amNmWdxrQDVxx3u/iG0tFaGW2dZol4v+xVa75uOA5HnaWAL9BnkzF47Damo=', '9c896d751e3db00321cb4b2e4139e6b5'))
    &amp;lt;/script&amp;gt; 
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='480' data-origin-height='64' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/Zd8Ou/btrpeJGnQFI/jM4wj5LfFOq2tMQ93GRfdk/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/Zd8Ou/btrpeJGnQFI/jM4wj5LfFOq2tMQ93GRfdk/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FZd8Ou%2FbtrpeJGnQFI%2FjM4wj5LfFOq2tMQ93GRfdk%2Fimg.png' data-filename='firefox_IrPXMhgUu6.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;짜잔~ 매우 잘된다. 혹시나 해서 다른 방송으로 테스트해보니 그건 안됐다. 방송마다 암호화 키가 달랐던 것... 그렇다면 서버에서 받아오는 값 중에 키가 들어있겠지 싶어서 네트워크 탭에서 검색을 해봤다. 생각보다 허무하게도 암호화된 videoStreamUrl 키를 받아오던 api에 암호화 키도 들어있었다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='317' data-origin-height='323' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/cWJgPH/btrpeJzAz4Z/mhGFVYPFNcGelB9eLUpGz0/img.png' data-lightbox='lightbox' data-alt='근데 키 이름은 왜 color지...'&gt;&lt;img src='https://blog.kakaocdn.net/dn/cWJgPH/btrpeJzAz4Z/mhGFVYPFNcGelB9eLUpGz0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcWJgPH%2FbtrpeJzAz4Z%2FmhGFVYPFNcGelB9eLUpGz0%2Fimg.png' data-filename='firefox_x8Ln7BF49L.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;figcaption&gt;근데 키 이름은 왜 color지...&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;아무튼 이렇게 다시 방송 주소를 추출할 수 있었다. 글에는 성공 과정만 정리해놔서 쉽게 해결한 거 같지만 사실 중간에 삽질도 많이 했다...&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>잡담</category>
<category>naver</category>
<category>네이버</category>
<category>추출</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1245</guid>
<comments>https://blog.joyfui.com/1245#entry1245comment</comments>
<pubDate>Wed, 29 Dec 2021 00:00:27 +0900</pubDate>
</item>
<item>
<title>[자작] snowpack-plugin-sitemap</title>
<link>https://blog.joyfui.com/1244</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;ejs를 사용하는 프로젝트가 있는데 개발 서버를 express로 만들어서 사용하고 있었다. 페이지가 추가될 때마다 express에 라우트를 추가해줘야 하는 번거로움이 있어서 이를 개선하고자 했다. 처음엔 (이전 글에서 공부한 경험도 있으니) webpack을 생각했으나 번들링이 필요 없는데 번들러를 사용하는 게 거창해 보여서 예전에 들어본 적 있는 snowpack을 사용해봤다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;우여곡절 끝에 snowpack-plugin-ejs 플러그인을 추가해서 프로젝트의 개발 서버를 snowpack으로 바꿨다. 이제 페이지를 추가할 때마다 express 코드를 수정할 필요도 없고 변경사항도 실시간으로 반영이 된다!ㅎㅎ&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;아무튼 snowpack을 도입하면서 sitemap.xml 생성 과정도 자동화해보려고 플러그인을 만들었다. 공식 문서와 인터넷 자료들이 부실했지만 snowpack-plugin-ejs 플러그인의 코드를 참고해가며 만들었다. 처음으로 npm에도 배포해보았다!&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/snowpack-plugin-sitemap&quot; rel=&quot;noopener&quot;&gt;https://www.npmjs.com/package/snowpack-plugin-sitemap&lt;/a&gt;&lt;/p&gt;
&lt;figure id=&quot;og_1640442163682&quot; contenteditable=&quot;false&quot; data-ke-type=&quot;opengraph&quot; data-ke-align=&quot;alignCenter&quot; data-og-type=&quot;website&quot; data-og-title=&quot;snowpack-plugin-sitemap&quot; data-og-description=&quot;Add the process of creating a sitemap to Snowpack.&quot; data-og-host=&quot;www.npmjs.com&quot; data-og-source-url=&quot;https://www.npmjs.com/package/snowpack-plugin-sitemap&quot; data-og-url=&quot;https://www.npmjs.com/package/snowpack-plugin-sitemap&quot; data-og-image=&quot;https://scrap.kakaocdn.net/dn/1jtHO/hyMQoTgMjA/Jl36jKfK27pt03tTHVntp1/img.png?width=1200&amp;amp;height=630&amp;amp;face=0_0_1200_630&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/snowpack-plugin-sitemap&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-source-url=&quot;https://www.npmjs.com/package/snowpack-plugin-sitemap&quot;&gt;
&lt;div class=&quot;og-image&quot; style=&quot;background-image: url('https://scrap.kakaocdn.net/dn/1jtHO/hyMQoTgMjA/Jl36jKfK27pt03tTHVntp1/img.png?width=1200&amp;amp;height=630&amp;amp;face=0_0_1200_630');&quot;&gt;&amp;nbsp;&lt;/div&gt;
&lt;div class=&quot;og-text&quot;&gt;
&lt;p class=&quot;og-title&quot; data-ke-size=&quot;size16&quot;&gt;snowpack-plugin-sitemap&lt;/p&gt;
&lt;p class=&quot;og-desc&quot; data-ke-size=&quot;size16&quot;&gt;Add the process of creating a sitemap to Snowpack.&lt;/p&gt;
&lt;p class=&quot;og-host&quot; data-ke-size=&quot;size16&quot;&gt;www.npmjs.com&lt;/p&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/figure&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;소스는 깃허브에 올려놨다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://github.com/joyfuI/snowpack-plugin-sitemap&quot; rel=&quot;noopener&quot;&gt;https://github.com/joyfuI/snowpack-plugin-sitemap&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이 플러그인은 snowpack build 명령어를 실행했을 때 결과물 중 html 파일들의 목록을 뽑아 sitemap.xml 파일을 생성한다. 플러그인 옵션 등 자세한 사용법은 위 링크를 참고하면 된다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;그나저나 처음으로 npm 배포를 해봤는데 npm publish 명령어에서 오류가 나지만 배포는 정상적으로 된다? 대체 뭐지...&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;그리고 처음에 우여곡절 끝에 스노우팩으로 바꿨다고 했는데 현재 스노우팩에는 개발 서버에서 빌드된 html 파일이 브라우저에서 보여지는 게 아닌 다운로드로 처리되는 문제가 있다. 자세한 내용은 &lt;a href=&quot;https://github.com/withastro/snowpack/discussions/3576&quot;&gt;링크&lt;/a&gt; 참고. 일단 해당 버그가 수정될 때까지 다른 분이 수정한 snowpack4을 사용하기로 했다. 근데 몇 개월째 수정이 안 되고 있는 거 보면 사용자가 굉장히 적은 건가 싶다. 엄청 치명적인 버그라고 생각되는데...&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>웹</category>
<category>JavaScript</category>
<category>Snowpack</category>
<category>스노우팩</category>
<category>자바스크립트</category>
<category>자작</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1244</guid>
<comments>https://blog.joyfui.com/1244#entry1244comment</comments>
<pubDate>Sat, 25 Dec 2021 23:15:31 +0900</pubDate>
</item>
<item>
<title>CRA 없이 React 개발환경 구축하기 (Webpack편)</title>
<link>https://blog.joyfui.com/1243</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;리액트 프로젝트를 시작할 때 &lt;a href=&quot;https://create-react-app.dev/&quot;&gt;create-react-app&lt;/a&gt;만 사용하다 보니까 번들러에 대한 지식이 부족한 걸 느꼈다. 그래서 CRA를 사용하지 않고 CRA 예제 코드 실행하기에 도전해봤다. &lt;a href=&quot;https://webpack.kr/&quot;&gt;웹팩&lt;/a&gt;에 대해서 찾아보다 보니까 확실히 복잡하긴 하다.... 나중엔 다른 번들러(Parcel? Rollup?)도 한번 공부해봐야 할 듯.&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;package.json 생성&lt;/h4&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;일단 적당한 폴더를 만들고 아래 명령어로 package.json 파일을 생성한다.&lt;/p&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn init -y&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;yarn을 기준으로 작성하겠음. npm도 명령어만 약간 다를 뿐 과정은 똑같다.&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;리액트 설치&lt;/h4&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn add react react-dom react-refresh&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;바벨 설치&lt;/h4&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn add @babel/core @babel/preset-env @babel/preset-react&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;바벨은 최신 자바스크립트 문법을 구형 브라우저에서도 동작하게, 혹은 리액트의 jsx 문법을 자바스크립트 문법으로 변환해주는 자바스크립트 트랜스파일러이다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;@babel/preset-env - 최신 자바스크립트 문법을 구형 브라우저에서도 작동하도록 변환하거나 폴리필 추가&lt;br /&gt;@babel/preset-react - 리액트의 JSX 문법을 변환&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;babel.config.json 생성&lt;/h4&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;babel.config.json은 바벨 설정 파일이다. 앞에서 바벨과 함께 설치한 프리셋을 설정해준다.&lt;/p&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;{
  &quot;presets&quot;: [
    &quot;@babel/preset-env&quot;,
    [&quot;@babel/preset-react&quot;, { &quot;runtime&quot;: &quot;automatic&quot; }]
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;React 17 이후부턴 &quot;runtime&quot;: &quot;automatic&quot; 옵션을 추가해야 한다.&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;웹팩 설치&lt;/h4&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn add webpack webpack-cli webpack-dev-server&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;웹팩은 자바스크립트 번들러이다. 직접 작성한 코드나 여러 라이브러리의 자바스크립트 코드를 하나로 묶고 최적화해준다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;webpack-cli - 웹팩을 커맨드라인에서 실행할 수 있게 해 줌&lt;br /&gt;webpack-dev-server - 파일이 변화할 때마다 실시간으로 빌드하는 개발 서버 구동&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;웹팩 로더 설치&lt;/h4&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn add babel-loader css-loader style-loader&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;로더는 웹팩이 파일을 빌드할 때 파일을 해석하기 위한 패키지이다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;babel-loader - jsx 파일과 최신 자바스크립트 문법을 변환(바벨과 연동)&lt;br /&gt;css-loader - css 파일을 해석&lt;br /&gt;style-loader - css를 dom에 삽입&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;웹팩 플러그인 설치&lt;/h4&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn add html-webpack-plugin mini-css-extract-plugin interpolate-html-plugin @pmmmwh/react-refresh-webpack-plugin&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;플러그인은 웹팩이 해석한 결과물을 처리하는 패키지이다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;html-webpack-plugin - html 파일에 번들링 된 js 파일을 삽입&lt;br /&gt;mini-css-extract-plugin - js 파일과 css 파일을 분리&lt;br /&gt;interpolate-html-plugin - html 파일에서 %ENV% 같은 템플릿 구문 사용 가능. 꼭 필요한 건 아니지만 CRA 기본 예제 파일에서 %PUBLIC_URL%을 사용하기 때문에 이를 변환하기 위해 설치&lt;br /&gt;@pmmmwh/react-refresh-webpack-plugin - 좀 더 우수한 핫 리로드 패키지인 react-refresh 사용&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;webpack.config.js 생성&lt;/h4&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;webpack.config.js는 웹팩 설정 파일이다. 앞에서 설치한 로더와 플러그인들을 넣어준다.&lt;/p&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const InterpolateHtmlPlugin = require('interpolate-html-plugin');
const ReactRefreshWebpackPlugin = require('@pmmmwh/react-refresh-webpack-plugin');

const devMode = process.env.NODE_ENV !== 'production';

module.exports = {
  entry: './src/index.js',
  resolve: {
    extensions: ['.js', '.jsx'],
  },
  output: {
    path: path.resolve(__dirname, 'build'),
    filename: 'static/js/[name].[contenthash:8].js',
    chunkFilename: 'static/js/[name].[contenthash:8].chunk.js',
    assetModuleFilename: 'static/media/[name].[hash:8].[ext]',
    clean: true,
  },
  devtool: devMode ? 'eval-source-map' : false,
  devServer: {
    port: 3000,
    hot: true,
    open: true,
    client: {
      overlay: true,
      progress: true,
    },
  },
  module: {
    rules: [
      {
        oneOf: [
          {
            test: /\.(js|jsx)$/,
            exclude: /node_modules/,
            use: {
              loader: 'babel-loader',
              options: {
                presets: [['@babel/preset-env', { targets: 'defaults' }]],
                plugins: devMode ? ['react-refresh/babel'] : [],
              },
            },
          },
          {
            test: /\.css$/i,
            use: [
              devMode ? 'style-loader' : MiniCssExtractPlugin.loader,
              'css-loader',
            ],
          },
          {
            test: [/\.bmp$/, /\.gif$/, /\.jpe?g$/, /\.png$/],
            type: 'asset',
            parser: {
              dataUrlCondition: {
                maxSize: 10000,
              },
            },
          },
          {
            type: 'asset/resource',
            exclude: [/\.(js|jsx)$/, /\.html$/, /\.json$/, /^$/],
          },
        ],
      },
    ],
  },
  plugins: [
    new HtmlWebpackPlugin(
      Object.assign(
        {},
        {
          template: 'public/index.html',
        },
        !devMode
          ? {
              minify: {
                removeComments: true,
                collapseWhitespace: true,
                removeRedundantAttributes: true,
                useShortDoctype: true,
                removeEmptyAttributes: true,
                removeStyleLinkTypeAttributes: true,
                keepClosingSlash: true,
                minifyJS: true,
                minifyCSS: true,
                minifyURLs: true,
              },
            }
          : undefined
      )
    ),
    new InterpolateHtmlPlugin({ PUBLIC_URL: '' }),
  ].concat(
    devMode ? [new ReactRefreshWebpackPlugin()] : [new MiniCssExtractPlugin()]
  ),
};&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;개발 빌드에선 style-loader를 사용하고 프로덕션 빌드에선 mini-css-extract-plugin을 사용한다. 왜 이렇게 했냐면 css-loader 문서에서 이걸 추천한대서...ㅎㅎ&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;CRA나 다른 글에서는 file-loader와 url-loader를 사용하는데 webpack 5부턴 자체적으로 지원해서 사용하지 않았다. 설정은 CRA 꺼 따라 했음. 약 10KB보다 작은 이미지 파일은 base64 주소로 변환돼서 결과물에 직접 삽입된다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;마지막 룰을 보면 js, html, json, 이미지 파일을 제외한 파일들은 전부 리소스로 처리해서 static/media 안에 집어넣는데 제외한 파일 정규식에 /^$/도 있는 이유가 html-webpack-plugin에서 이상한 파일을 생성하는 문제가 있어서(파일이 아니라 인라인 자바스크립트라고 함. 근대 이걸 리소스로 처리해서 문제가 생김) 이를 제외하기 위해 넣었다. (&lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin/issues/1589#issuecomment-830845614&quot;&gt;참고&lt;/a&gt;)&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;마찬가지로 html-webpack-plugin 설정도 CRA를 참고했다. 프로덕션 빌드에선 최적화된 html을 내보낸다.&lt;/p&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;리액트 컴포넌트 작성&lt;/h4&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;그냥 CRA에서 기본으로 만들어주는 예제 파일을 그대로 복사한다. (src, public 폴더)&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;단, 예제 소스에서는 web-vitals을 사용하므로 이걸 추가로 설치해야 한다.&lt;/p&gt;
&lt;pre class=&quot;shell&quot; data-ke-language=&quot;shell&quot;&gt;&lt;code&gt;yarn add web-vitals&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;package.json에 scripts 추가&lt;/h4&gt;
&lt;pre class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot;&gt;&lt;code&gt;  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;webpack serve --progress --mode development&quot;,
    &quot;build&quot;: &quot;webpack --progress --mode production&quot;
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;yarn start - 개발 서버를 실행해 프로젝트를 바로 확인. 주소는 http://localhost:3000/&lt;br /&gt;yarn build - 빌드. 결과물은 build 폴더에 생성&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='1420' data-origin-height='947' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/PlpiB/btrmYEarUS7/3ghRHJ5KT1ZdPiGvNvXJ3K/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/PlpiB/btrmYEarUS7/3ghRHJ5KT1ZdPiGvNvXJ3K/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FPlpiB%2FbtrmYEarUS7%2F3ghRHJ5KT1ZdPiGvNvXJ3K%2Fimg.png' data-filename='Screenshot 2021-12-04 at 01-18-15 React App.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이걸로 리액트를 개발하기 위한 최소한의 환경 구성이 완료되었다. 공부하면서 느낀 점은 그냥 얌전히 create-react-app 쓰자...ㅎㅎ&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;정말 최소한의 세팅이라 eslint, prettier 등등 추가할 게 많은데 이것도 한번 정리해볼까 고민 중...&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>React</category>
<category>JavaScript</category>
<category>react</category>
<category>리액트</category>
<category>자바스크립트</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1243</guid>
<comments>https://blog.joyfui.com/1243#entry1243comment</comments>
<pubDate>Sat, 11 Dec 2021 12:00:20 +0900</pubDate>
</item>
<item>
<title>.gitignore를 생성해주는 사이트, gitignore.io</title>
<link>https://blog.joyfui.com/1242</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://www.gitignore.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.gitignore.io/&lt;/a&gt;&lt;/p&gt;
&lt;figure id=&quot;og_1637937297826&quot; contenteditable=&quot;false&quot; data-ke-type=&quot;opengraph&quot; data-ke-align=&quot;alignCenter&quot; data-og-type=&quot;website&quot; data-og-title=&quot;gitignore.io&quot; data-og-description=&quot;Create useful .gitignore files for your project&quot; data-og-host=&quot;www.toptal.com&quot; data-og-source-url=&quot;https://www.gitignore.io/&quot; data-og-url=&quot;https://www.toptal.com/developers/gitignore&quot; data-og-image=&quot;https://scrap.kakaocdn.net/dn/cDDEsr/hyMuJcqsG1/zkjVv07g1juRGYnksZa0P0/img.png?width=2400&amp;amp;height=1254&amp;amp;face=0_0_2400_1254&quot;&gt;&lt;a href=&quot;https://www.gitignore.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-source-url=&quot;https://www.gitignore.io/&quot;&gt;
&lt;div class=&quot;og-image&quot; style=&quot;background-image: url('https://scrap.kakaocdn.net/dn/cDDEsr/hyMuJcqsG1/zkjVv07g1juRGYnksZa0P0/img.png?width=2400&amp;amp;height=1254&amp;amp;face=0_0_2400_1254');&quot;&gt;&amp;nbsp;&lt;/div&gt;
&lt;div class=&quot;og-text&quot;&gt;
&lt;p class=&quot;og-title&quot; data-ke-size=&quot;size16&quot;&gt;gitignore.io&lt;/p&gt;
&lt;p class=&quot;og-desc&quot; data-ke-size=&quot;size16&quot;&gt;Create useful .gitignore files for your project&lt;/p&gt;
&lt;p class=&quot;og-host&quot; data-ke-size=&quot;size16&quot;&gt;www.toptal.com&lt;/p&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/figure&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;.gitignore는 git으로 프로젝트를 관리할 때 git으로 관리하지 않을 파일들을 지정하는 파일이다. 작은 프로젝트라면 그냥 그때그때 만들어도 되고 안드로이드 스튜디오처럼 요즘엔 프로젝트를 만들 때 기본적으로 생성해주기도 하지만 그렇지 않다면 유용한 사이트이다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;온갖 IDE, 프레임워크, 프로그래밍 언어들에 대한 세팅이 저장되어 있어서 프로젝트의 개발환경을 넣으면 알아서 조합된 결과물을 반환한다. 다운받아 사용하면 된다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=rubbersheep.gi&quot;&gt;이렇게 비주얼 스튜디오 코드 확장&lt;/a&gt;을 설치하면 VSC 내에서 바로 gitignore 파일을 생성할 수도 있다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='1920' data-origin-height='947' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/ph2bH/btrmgIdSuJf/SXAilIzUIs0FSfG6vSXqJ1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/ph2bH/btrmgIdSuJf/SXAilIzUIs0FSfG6vSXqJ1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fph2bH%2FbtrmgIdSuJf%2FSXAilIzUIs0FSfG6vSXqJ1%2Fimg.png' data-filename='Screenshot 2021-11-26 at 23-53-52 gitignore io.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>추천 사이트</category>
<category>git</category>
<category>사이트</category>
<category>프로그래밍</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1242</guid>
<comments>https://blog.joyfui.com/1242#entry1242comment</comments>
<pubDate>Sat, 04 Dec 2021 12:00:19 +0900</pubDate>
</item>
<item>
<title>[Detroit: Become Human] 보조 모니터로 실행되는 문제</title>
<link>https://blog.joyfui.com/1241</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;최근에 퀀틱드림 게임들을 하고 있다. (헤비 레인은 호러 요소가 있다길래 패스하고 비욘드 투 소울즈를 했음) 이제 디트로이트 비컴 휴먼을 하려는데 게임을 실행하니 주 모니터를 냅두고 보조 모니터에서 실행됐다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;웃긴 건 게임 내에서 모니터를 설정하는 메뉴조차 없다. 처음 겪는 일이라 황당했다. 뭐지 이 게임...&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;아무튼 해결법을 찾아서 올린다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;디트로이트 비컴 휴먼 설치 폴더로 이동한 뒤 &quot;WindowInfo.JSON&quot;이란 파일을 찾아서 메모장으로 연다. 나는 에픽 게임즈에서 구매해서 설치 경로가 &quot;C:\Program Files\Epic Games\DetroitBecomeHuman&quot;이다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='594' data-origin-height='391' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/tPkqB/btrkJmiKWft/UmHont0UvjoWG8m4fDWwu1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/tPkqB/btrkJmiKWft/UmHont0UvjoWG8m4fDWwu1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FtPkqB%2FbtrkJmiKWft%2FUmHont0UvjoWG8m4fDWwu1%2Fimg.png' data-filename='Notepad2_nYH4oJeOqa.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&quot;MONITOR&quot; 값이 1로 되어 있는데 0으로 바꿔준다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;저장 후 게임을 실행하면 정상적으로 주 모니터에 게임이 뜨게 된다.&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>기타 게임</category>
<category>Detroit: Become Human</category>
<category>Game</category>
<category>게임</category>
<category>디트로이트: 비컴 휴먼</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1241</guid>
<comments>https://blog.joyfui.com/1241#entry1241comment</comments>
<pubDate>Sat, 27 Nov 2021 12:00:56 +0900</pubDate>
</item>
<item>
<title>Oracle Linux에 Docker 설치하기</title>
<link>https://blog.joyfui.com/1240</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;오라클 클라우드에서 Oracle Linux 8을 사용하고 있다. 도커를 설치하려고 도커 매뉴얼에 있는 설치 스크립트를 실행했는데 지원하지 않는 배포판이라며 설치가 되지 않았다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://docs.docker.com/engine/install/centos/#install-using-the-repository&quot;&gt;https://docs.docker.com/engine/install/centos/#install-using-the-repository&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;사실 OL8도 RHEL8 기반이니까 RHEL 기준 설치법을 따라 해도 되겠지만 혹시 몰라서 찾아봤는데 OL8을 기준으로 한 매뉴얼이 있어서 이걸 따라 했다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;1. 설치에 필요한 패키지를 설치하고 리포지토리를 추가한다.&lt;/p&gt;
&lt;pre class=&quot;bash&quot; data-ke-language=&quot;bash&quot;&gt;&lt;code&gt;dnf install -y dnf-utils zip unzip
dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;2. 도커를 설치한다.&lt;/p&gt;
&lt;pre class=&quot;bash&quot; data-ke-language=&quot;bash&quot;&gt;&lt;code&gt;dnf remove -y runc
dnf install -y docker-ce --nobest&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;3. 도커 서비스를 시작한다.&lt;/p&gt;
&lt;pre class=&quot;bash&quot; data-ke-language=&quot;bash&quot;&gt;&lt;code&gt;systemctl enable docker.service
systemctl start docker.service&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;출처: &lt;a href=&quot;https://oracle-base.com/articles/linux/docker-install-docker-on-oracle-linux-ol8&quot;&gt;https://oracle-base.com/articles/linux/docker-install-docker-on-oracle-linux-ol8&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이제 cli 환경은 귀찮으니 &lt;a href=&quot;https://www.portainer.io/&quot;&gt;Portainer&lt;/a&gt;나 설치해주자ㅎㅎ&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>Linux</category>
<category>docker</category>
<category>Linux</category>
<category>도커</category>
<category>리눅스</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1240</guid>
<comments>https://blog.joyfui.com/1240#entry1240comment</comments>
<pubDate>Sat, 20 Nov 2021 12:00:43 +0900</pubDate>
</item>
<item>
<title>BOOTICE v1.3.4 (한글)</title>
<link>https://blog.joyfui.com/1239</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;bcd 수정 프로그램이다. bcd는 윈도우에서 부팅 관련 정보가 들어 있는 파일로 이게 잘못되면 부팅이 안 된다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;예전에 벤토이 사용 이전까진 윈도우 설치 usb 제작할 때 유용하게 사용했었다.&lt;/p&gt;
&lt;p&gt;&lt;figure class=&quot;fileblock&quot; data-ke-align=&quot;alignCenter&quot;&gt;&lt;a href=&quot;https://blog.kakaocdn.net/dn/b1zaBQ/btrkolYJ8w8/me6krbFKCQsx6spkc60Jx0/BOOTICE%2Bv1.3.4k_x64.exe?attach=1&amp;knm=tfile.exe&quot; class=&quot;&quot;&gt;&lt;div class=&quot;image&quot;&gt;&lt;/div&gt;&lt;div class=&quot;desc&quot;&gt;&lt;div class=&quot;filename&quot;&gt;&lt;span class=&quot;name&quot;&gt;BOOTICE+v1.3.4k_x64.exe&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;size&quot;&gt;0.45MB&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure class=&quot;fileblock&quot; data-ke-align=&quot;alignCenter&quot;&gt;&lt;a href=&quot;https://blog.kakaocdn.net/dn/bOSmd6/btrkokyNOvK/5rSnFx0lgI8U7ZWqOr9kWk/BOOTICE%2Bv1.3.4k_x86.exe?attach=1&amp;knm=tfile.exe&quot; class=&quot;&quot;&gt;&lt;div class=&quot;image&quot;&gt;&lt;/div&gt;&lt;div class=&quot;desc&quot;&gt;&lt;div class=&quot;filename&quot;&gt;&lt;span class=&quot;name&quot;&gt;BOOTICE+v1.3.4k_x86.exe&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;size&quot;&gt;0.41MB&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;413&quot; data-origin-height=&quot;299&quot; data-filename=&quot;BOOTICE+v1.3.4k_x64_vNFehyiFmj.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/7aPnD/btrko7MsBbi/o1vAIn15pUnqWvk4gRk960/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/7aPnD/btrko7MsBbi/o1vAIn15pUnqWvk4gRk960/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F7aPnD%2Fbtrko7MsBbi%2Fo1vAIn15pUnqWvk4gRk960%2Fimg.png' data-origin-width=&quot;413&quot; data-origin-height=&quot;299&quot; data-filename=&quot;BOOTICE+v1.3.4k_x64_vNFehyiFmj.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;당연히 블로그에 올려놨을 줄 알았는데 안 올렸었네...&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>프로그램</category>
<category>부팅</category>
<category>프로그램</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1239</guid>
<comments>https://blog.joyfui.com/1239#entry1239comment</comments>
<pubDate>Sat, 13 Nov 2021 12:00:45 +0900</pubDate>
</item>
<item>
<title>AMD StoreMI 부팅 지연 문제</title>
<link>https://blog.joyfui.com/1238</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;버전이 2.1.0.205로 업데이트됐길래 설치해봤는데 해당 문제가 없다. 이제 그냥 최신 버전을 받아도 될 듯&lt;/p&gt;
&lt;hr contenteditable=&quot;false&quot; data-ke-type=&quot;horizontalRule&quot; data-ke-style=&quot;style5&quot; /&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://www.amd.com/ko/technologies/store-mi&quot;&gt;AMD StoreMI&lt;/a&gt;는 느린 HDD와 빠른 SSD를 하나로 묶어 사용할 수 있게 하는 AMD의 기능이다. 남는 SSD가 하나 있어서 이를 활용하기 위해 스토어미를 사용하고 있다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이번에 컴퓨터를 포맷하면서 안 사실은 스토어미가 설치 안 돼 있어도 HDD에 데이터가 잘 들어있다는 거였다. 아마 HDD에 모든 데이터를 저장하고 SSD를 캐시로 사용하는 것 같다. 예전엔 이러지 않았던 거로 기억하는데 2.0으로 동작 방식이 완전히 바뀌면서 좀 더 안전한 방식이 된 거 같다. (예전엔 스토어미가 깨지면 데이터가 그대로 날아갔었다고 함)&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;아무튼 윈도우 11로 새로 설치하고 스토어미를 새로 받아다가 설치했는데 재부팅하니까 부팅이 어마무시하게 느려졌다. 부팅할 때 뜨는 로딩 아이콘이 돌아가지 않고 거의 그냥 멈춰있는데 부팅까지 한 5분 정도 걸리는 듯... 말도 안 되는 부팅 속도라 윈11 호환성 문제인가 싶어 찾아봤는데 딱히 검색되는 내용은 없었다. 그러다가 부팅 지연 관련해서 최신 스토어미의 문제라는 글을 보고 이전 버전을 받아다가 설치하니 해결됐다...&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;암드야 소프트웨어 좀 제발 잘 만들자...ㅠㅠ&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;내가 부팅 지연 문제는 겪은 버전은 2.1.0.191이었고 아래에 올려놓은 2.1.0.159는 그런 문제가 없었다.&lt;/p&gt;
&lt;p&gt;&lt;figure class=&quot;fileblock&quot; data-ke-align=&quot;alignCenter&quot;&gt;&lt;a href=&quot;https://blog.kakaocdn.net/dn/bgVC9p/btrjmVUppUg/FbSk243bzGwgDwQ8qs1Z51/AMD%20StoreMI%202.1.0.159.zip?attach=1&amp;knm=tfile.zip&quot; class=&quot;&quot;&gt;&lt;div class=&quot;image&quot;&gt;&lt;/div&gt;&lt;div class=&quot;desc&quot;&gt;&lt;div class=&quot;filename&quot;&gt;&lt;span class=&quot;name&quot;&gt;AMD StoreMI 2.1.0.159.zip&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;size&quot;&gt;2.45MB&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure class=&quot;fileblock&quot; data-ke-align=&quot;alignCenter&quot;&gt;&lt;a href=&quot;https://blog.kakaocdn.net/dn/bSuBgU/btrjr1sL3vC/84HEGpznzmCUUjmMqPG6e1/AMD%20StoreMI%202.1.0.159.z01?attach=1&amp;knm=tfile.z01&quot; class=&quot;&quot;&gt;&lt;div class=&quot;image&quot;&gt;&lt;/div&gt;&lt;div class=&quot;desc&quot;&gt;&lt;div class=&quot;filename&quot;&gt;&lt;span class=&quot;name&quot;&gt;AMD StoreMI 2.1.0.159.z01&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;size&quot;&gt;10.00MB&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure class=&quot;fileblock&quot; data-ke-align=&quot;alignCenter&quot;&gt;&lt;a href=&quot;https://blog.kakaocdn.net/dn/b5icvl/btrjlpBSmu3/NlkZDnTmwyiHsTHCGP1nZ1/AMD%20StoreMI%202.1.0.159.z02?attach=1&amp;knm=tfile.z02&quot; class=&quot;&quot;&gt;&lt;div class=&quot;image&quot;&gt;&lt;/div&gt;&lt;div class=&quot;desc&quot;&gt;&lt;div class=&quot;filename&quot;&gt;&lt;span class=&quot;name&quot;&gt;AMD StoreMI 2.1.0.159.z02&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;size&quot;&gt;10.00MB&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure class=&quot;fileblock&quot; data-ke-align=&quot;alignCenter&quot;&gt;&lt;a href=&quot;https://blog.kakaocdn.net/dn/b6yl7t/btrjqmRhgDR/OXExGe7QjF9K2TS8nX7N90/AMD%20StoreMI%202.1.0.159.z03?attach=1&amp;knm=tfile.z03&quot; class=&quot;&quot;&gt;&lt;div class=&quot;image&quot;&gt;&lt;/div&gt;&lt;div class=&quot;desc&quot;&gt;&lt;div class=&quot;filename&quot;&gt;&lt;span class=&quot;name&quot;&gt;AMD StoreMI 2.1.0.159.z03&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;size&quot;&gt;10.00MB&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure class=&quot;fileblock&quot; data-ke-align=&quot;alignCenter&quot;&gt;&lt;a href=&quot;https://blog.kakaocdn.net/dn/caPc45/btrjqpgosFN/SElZFh0EGMQI22srAKLeNK/AMD%20StoreMI%202.1.0.159.z04?attach=1&amp;knm=tfile.z04&quot; class=&quot;&quot;&gt;&lt;div class=&quot;image&quot;&gt;&lt;/div&gt;&lt;div class=&quot;desc&quot;&gt;&lt;div class=&quot;filename&quot;&gt;&lt;span class=&quot;name&quot;&gt;AMD StoreMI 2.1.0.159.z04&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;size&quot;&gt;10.00MB&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure class=&quot;fileblock&quot; data-ke-align=&quot;alignCenter&quot;&gt;&lt;a href=&quot;https://blog.kakaocdn.net/dn/2yGOX/btrjkYLj2QB/gqhFmAH8c4HK2KNcLoddb0/AMD%20StoreMI%202.1.0.159.z05?attach=1&amp;knm=tfile.z05&quot; class=&quot;&quot;&gt;&lt;div class=&quot;image&quot;&gt;&lt;/div&gt;&lt;div class=&quot;desc&quot;&gt;&lt;div class=&quot;filename&quot;&gt;&lt;span class=&quot;name&quot;&gt;AMD StoreMI 2.1.0.159.z05&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;size&quot;&gt;10.00MB&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure class=&quot;fileblock&quot; data-ke-align=&quot;alignCenter&quot;&gt;&lt;a href=&quot;https://blog.kakaocdn.net/dn/m29kD/btrjk0vD03l/0VuYXtbeHKCp8en1yDLZB0/AMD%20StoreMI%202.1.0.159.z06?attach=1&amp;knm=tfile.z06&quot; class=&quot;&quot;&gt;&lt;div class=&quot;image&quot;&gt;&lt;/div&gt;&lt;div class=&quot;desc&quot;&gt;&lt;div class=&quot;filename&quot;&gt;&lt;span class=&quot;name&quot;&gt;AMD StoreMI 2.1.0.159.z06&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;size&quot;&gt;10.00MB&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure class=&quot;fileblock&quot; data-ke-align=&quot;alignCenter&quot;&gt;&lt;a href=&quot;https://blog.kakaocdn.net/dn/cctPT6/btrjudfqKRX/KU9vtLSNFQjm6gp2yzOLDK/AMD%20StoreMI%202.1.0.159.z07?attach=1&amp;knm=tfile.z07&quot; class=&quot;&quot;&gt;&lt;div class=&quot;image&quot;&gt;&lt;/div&gt;&lt;div class=&quot;desc&quot;&gt;&lt;div class=&quot;filename&quot;&gt;&lt;span class=&quot;name&quot;&gt;AMD StoreMI 2.1.0.159.z07&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;size&quot;&gt;10.00MB&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>Windows</category>
<category>AMD</category>
<category>HDD</category>
<category>ssd</category>
<category>드라이버</category>
<category>프로그램</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1238</guid>
<comments>https://blog.joyfui.com/1238#entry1238comment</comments>
<pubDate>Sun, 31 Oct 2021 10:58:33 +0900</pubDate>
</item>
<item>
<title>[Node.js] 자바스크립트에서 csv 파일 생성 시 한글 깨짐 문제 해결</title>
<link>https://blog.joyfui.com/1237</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;csv 데이터를 file-saver 패키지로 파일 다운로드 기능을 만들었는데 엑셀에서 열어보니 한글이 깨지는 문제가 있었다.&lt;/p&gt;
&lt;pre id=&quot;code_1634912472488&quot; class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;import { saveAs } from 'file-saver';

const csv = 'csv,데이터,예시';
saveAs(
  new Blob([csv], { type: 'text/csv;charset=utf-8' }),
  '예제파일.csv'
);&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;대충 이런 코드로 csv 파일을 생성해서 다운로드하면&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;665&quot; data-origin-height=&quot;495&quot; data-filename=&quot;화면 캡처 2021-10-21 095715.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/butpZH/btrizys4Z8J/SBVwWeUM14SevLftoKLffk/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/butpZH/btrizys4Z8J/SBVwWeUM14SevLftoKLffk/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbutpZH%2Fbtrizys4Z8J%2FSBVwWeUM14SevLftoKLffk%2Fimg.png' data-origin-width=&quot;665&quot; data-origin-height=&quot;495&quot; data-filename=&quot;화면 캡처 2021-10-21 095715.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;요래 한글이 깨진다... 해결법을 찾아보니 엑셀은 bom이 있어야만 utf-8로 인식한다고 한다. ms의 bom 사랑이란... 메모장은 정신 차린 걸로 아는데 다른 프로그램은 멀었나보다.&lt;/p&gt;
&lt;pre id=&quot;code_1634912963056&quot; class=&quot;javascript&quot; data-ke-language=&quot;javascript&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;import { saveAs } from 'file-saver';

const csv = 'csv,데이터,예시';

const BOM = '\uFEFF';

// 한글깨짐 문제를 해결하기 위해 BOM 문자 삽입
saveAs(
  new Blob([BOM + csv], { type: 'text/csv;charset=utf-8' }),
  '예제파일.csv'
);&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;아무튼 이렇게 맨 앞에 bom 문자(\uFEFF)를 추가하면 해결된다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;665&quot; data-origin-height=&quot;495&quot; data-filename=&quot;화면 캡처 2021-10-21 095759.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/cnPdid/btriDw0XIAZ/kjWu4oIKOq85GNskerOkq0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/cnPdid/btriDw0XIAZ/kjWu4oIKOq85GNskerOkq0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcnPdid%2FbtriDw0XIAZ%2FkjWu4oIKOq85GNskerOkq0%2Fimg.png' data-origin-width=&quot;665&quot; data-origin-height=&quot;495&quot; data-filename=&quot;화면 캡처 2021-10-21 095759.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;엑셀에서 정상적으로 열리는걸 볼 수 있다.&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>웹</category>
<category>JavaScript</category>
<category>node.js</category>
<category>자바스크립트</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1237</guid>
<comments>https://blog.joyfui.com/1237#entry1237comment</comments>
<pubDate>Fri, 22 Oct 2021 23:33:09 +0900</pubDate>
</item>
<item>
<title>[핵감지기] kLauncher</title>
<link>https://blog.joyfui.com/1236</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;kLauncher는 wDetector(wLauncher)가 개발 중단된 이후 올해 1월에 새로 등장한 안티핵 프로그램이다. wDetector가 wLauncher로 바뀌면서 핵감지기뿐만 아니라 여러 편의 기능이 추가된 것처럼 kLauncher도 여러 편의 기능을 가지고 있다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;요즘엔 스타를 전혀 안 해서 몰랐는데 핵감지 목록을 보니까 오히려 1.16.1 시절보다 핵 종류가 다양해진 것 같다. 옛날에 스타 핵 수집하는 게 취미였는데...ㅎㅎ 요즘은 스타 커뮤니티도 다 죽었는데 어디서 이리 핵이 나오는지...&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;공식 홈페이지를 운영하고 있으니 아래 링크에서 받을 수 있다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://klauncher.kr/&quot; rel=&quot;noopener&quot;&gt;https://klauncher.kr/&lt;/a&gt;&lt;/p&gt;
&lt;figure id=&quot;og_1633698085826&quot; contenteditable=&quot;false&quot; data-ke-type=&quot;opengraph&quot; data-ke-align=&quot;alignCenter&quot; data-og-type=&quot;website&quot; data-og-title=&quot;kLauncher&quot; data-og-description=&quot;안녕하세요. klauncher , k런처 입니다.&quot; data-og-host=&quot;klauncher.kr&quot; data-og-source-url=&quot;https://klauncher.kr/&quot; data-og-url=&quot;https://klauncher.kr/index.php&quot; data-og-image=&quot;https://scrap.kakaocdn.net/dn/dfElVo/hyLTybgUOY/QRoiH0X1fYhJNHnd3vYfN1/img.png?width=1200&amp;amp;height=300&amp;amp;face=0_0_1200_300,https://scrap.kakaocdn.net/dn/ElK66/hyLTtgJ0Cd/1rZ4dPQN7dfpttkUucK6Hk/img.png?width=1200&amp;amp;height=300&amp;amp;face=0_0_1200_300&quot;&gt;&lt;a href=&quot;https://klauncher.kr/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-source-url=&quot;https://klauncher.kr/&quot;&gt;
&lt;div class=&quot;og-image&quot; style=&quot;background-image: url('https://scrap.kakaocdn.net/dn/dfElVo/hyLTybgUOY/QRoiH0X1fYhJNHnd3vYfN1/img.png?width=1200&amp;amp;height=300&amp;amp;face=0_0_1200_300,https://scrap.kakaocdn.net/dn/ElK66/hyLTtgJ0Cd/1rZ4dPQN7dfpttkUucK6Hk/img.png?width=1200&amp;amp;height=300&amp;amp;face=0_0_1200_300');&quot;&gt;&amp;nbsp;&lt;/div&gt;
&lt;div class=&quot;og-text&quot;&gt;
&lt;p class=&quot;og-title&quot; data-ke-size=&quot;size16&quot;&gt;kLauncher&lt;/p&gt;
&lt;p class=&quot;og-desc&quot; data-ke-size=&quot;size16&quot;&gt;안녕하세요. klauncher , k런처 입니다.&lt;/p&gt;
&lt;p class=&quot;og-host&quot; data-ke-size=&quot;size16&quot;&gt;klauncher.kr&lt;/p&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;727&quot; data-origin-height=&quot;736&quot; data-filename=&quot;108878791-f037b080-7643-11eb-921e-9b5bb9f2613c.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/cK00Xe/btrhc737FPw/EHK1GzbFjIynbMlTKTPHvk/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/cK00Xe/btrhc737FPw/EHK1GzbFjIynbMlTKTPHvk/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcK00Xe%2Fbtrhc737FPw%2FEHK1GzbFjIynbMlTKTPHvk%2Fimg.png' data-origin-width=&quot;727&quot; data-origin-height=&quot;736&quot; data-filename=&quot;108878791-f037b080-7643-11eb-921e-9b5bb9f2613c.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 data-ke-size=&quot;size23&quot;&gt;기능&lt;/h3&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;전체&lt;/h4&gt;
&lt;ul style=&quot;list-style-type: disc;&quot; data-ke-list-type=&quot;disc&quot;&gt;
&lt;li&gt;시간,FPS 표시 (ON, OFF 가능)&lt;/li&gt;
&lt;li&gt;핵 사용자 서버저장 및 사전에 핵사용자를 알려줍니다.&lt;/li&gt;
&lt;li&gt;컨트롤 H 로 런처 제어&lt;/li&gt;
&lt;li&gt;스타크래프트 멀티플레이에서 핵 사용을 감지합니다.&lt;/li&gt;
&lt;li&gt;드랍창이 떴을 때 드랍을 누르게 되면 알려줍니다. (빠른시간 내에 누를 시 핵으로 생각 해 볼 수 있습니다.)&lt;/li&gt;
&lt;li&gt;플레이어의 핑을 볼 수 있습니다. (정교한 수치)&lt;/li&gt;
&lt;li&gt;미니맵 핑 플레이어 색으로 변경됩니다.&lt;/li&gt;
&lt;li&gt;단축키로 원하는 사용자 채팅을 차단할수 있습니다.&lt;/li&gt;
&lt;li&gt;블랙리스트로 원하는 사람을 판별할수있습니다.&lt;/li&gt;
&lt;li&gt;게임중에 채널채팅보이는 문제를 방지 합니다.&lt;/li&gt;
&lt;li&gt;사기맵 감지를 합니다.&lt;/li&gt;
&lt;li&gt;무한디스 , 디스창 숨기기를 할 수 있습니다.&lt;/li&gt;
&lt;li&gt;커스텀으로 플레이어 색을 지정 할 수 있습니다.&lt;/li&gt;
&lt;li&gt;맵 저장소를 사용하여 편하게 맵을 다운로드 할 수 있습니다.&lt;br /&gt;-&amp;gt; 맵저장소란? 사용자들이 편하게 맵을 다운로드 할 수 있는 곳을 말합니다. 런처 사용시 게임방에 입장하면 자동으로 맵이 맵 저장소에 업로드 됩니다.&lt;/li&gt;
&lt;li&gt;채팅및 귓속말을 편하게 할 수 있습니다.&lt;/li&gt;
&lt;li&gt;플레이어의 색을 사용자 맘대로 지정할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;로비&lt;/h4&gt;
&lt;ul style=&quot;list-style-type: disc;&quot; data-ke-list-type=&quot;disc&quot;&gt;
&lt;li&gt;래더에서 서버에 저장된 핵사용자와 매칭시 자동으로 닷지&lt;/li&gt;
&lt;li&gt;단축키로 원하는 사용자 채팅을 차단 가능&lt;/li&gt;
&lt;li&gt;블랙리스트로 원하는 사람을 판별 가능&lt;br /&gt;- 방장일 경우 자동강퇴&lt;br /&gt;- 방장 아닐경우 블랙리스트 사용자 메시지 출력&lt;/li&gt;
&lt;li&gt;컨트롤 L로 로비 리스트 ON OFF&lt;/li&gt;
&lt;li&gt;방제목에 ~50% ,50%~ , 50%이상, 50%이하 키워드 있을경우 자동으로 알려주기 or 강퇴&lt;/li&gt;
&lt;li&gt;방제목에 #평등 키워드 있을경우 자동으로 전적 분석해서 승률 맞게끔 매칭&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-ke-size=&quot;size23&quot;&gt;실행방법&lt;/h3&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;kLauncher&amp;nbsp;실행후&amp;nbsp;스타실행&amp;nbsp;클릭&lt;/p&gt;
&lt;h3 data-ke-size=&quot;size23&quot;&gt;사용방법&lt;/h3&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;로비&lt;/h4&gt;
&lt;ul style=&quot;list-style-type: disc;&quot; data-ke-list-type=&quot;disc&quot;&gt;
&lt;li&gt;컨트롤 1~8 : 해당 번호 플레이어 아이디 복사&lt;/li&gt;
&lt;li&gt;c + 1~8 : 컴퓨터 넣기(방장일때만 가능 유즈맵에서도 컴퓨터 넣기 가능)&lt;/li&gt;
&lt;li&gt;컨트롤 키패드 0 : 전적 다시 가져오기&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;게임내&lt;/h4&gt;
&lt;ul style=&quot;list-style-type: disc;&quot; data-ke-list-type=&quot;disc&quot;&gt;
&lt;li&gt;키패드 . : 플레이어 리스트 보기 (핵 감지)&lt;/li&gt;
&lt;li&gt;키패드0 : 플레이어 리스트 보기 (플레이어 전적, 종족, 승률)&lt;/li&gt;
&lt;li&gt;키패드9 : 핵 감지된 사용자 출력&lt;/li&gt;
&lt;li&gt;키패드+ : 커스텀 히스토리 보기&lt;/li&gt;
&lt;li&gt;키패드- : 디스창 숨기기&lt;/li&gt;
&lt;li&gt;컨트롤 O :리스트&lt;/li&gt;
&lt;li&gt;컨트롤 P: 핵사용자 출력&lt;/li&gt;
&lt;li&gt;컨트롤 L: 무한디스 프로텍트&lt;/li&gt;
&lt;li&gt;시프트 /&amp;nbsp;&amp;nbsp;: 커스텀 색지정&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;공통&lt;/h4&gt;
&lt;ul style=&quot;list-style-type: disc;&quot; data-ke-list-type=&quot;disc&quot;&gt;
&lt;li&gt;알트+ 0~7: 이그노어&lt;/li&gt;
&lt;li&gt;알트 + 키패드 0~7 : 블랙리스트에 넣기&lt;/li&gt;
&lt;li&gt;컨트롤 + H : 런처 헬퍼 보기, 끄기&lt;/li&gt;
&lt;li&gt;컨트롤 + L : 로비 리스트 보기, 끄기&lt;/li&gt;
&lt;li&gt;컨트롤 + K : 핵감지기 켜기, 끄기&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-ke-size=&quot;size23&quot;&gt;핵 방지&lt;/h3&gt;
&lt;ul style=&quot;list-style-type: disc;&quot; data-ke-list-type=&quot;disc&quot;&gt;
&lt;li&gt;드랍핵&lt;/li&gt;
&lt;li&gt;로비 크래쉬&lt;/li&gt;
&lt;li&gt;무한디스&lt;/li&gt;
&lt;li&gt;배틀 코드 스풋&lt;/li&gt;
&lt;li&gt;채팅 도배 핵&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-ke-size=&quot;size23&quot;&gt;핵감지&lt;/h3&gt;
&lt;ul style=&quot;list-style-type: disc;&quot; data-ke-list-type=&quot;disc&quot;&gt;
&lt;li&gt;투명핵&lt;/li&gt;
&lt;li&gt;리플레이 크래쉬&lt;/li&gt;
&lt;li&gt;오토마인&lt;/li&gt;
&lt;li&gt;멀티커맨드&lt;/li&gt;
&lt;li&gt;오토빌드&lt;/li&gt;
&lt;li&gt;오토 큐&lt;/li&gt;
&lt;li&gt;오더버퍼&lt;/li&gt;
&lt;li&gt;이상패킷&lt;/li&gt;
&lt;li&gt;치트패킷&lt;/li&gt;
&lt;li&gt;스풋&lt;/li&gt;
&lt;li&gt;렐리포인트 체인지&lt;/li&gt;
&lt;li&gt;고스트핵 취소&lt;/li&gt;
&lt;li&gt;채팅 핵&lt;/li&gt;
&lt;li&gt;로비, 게임 드랍핵&lt;/li&gt;
&lt;li&gt;로비 크래쉬&lt;/li&gt;
&lt;li&gt;무한디스&lt;/li&gt;
&lt;li&gt;사기맵 감지&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-ke-size=&quot;size23&quot;&gt;기타&lt;/h3&gt;
&lt;ul style=&quot;list-style-type: disc;&quot; data-ke-list-type=&quot;disc&quot;&gt;
&lt;li&gt;로딩시 레디 상태 보기&lt;/li&gt;
&lt;li&gt;핑 상태 보기&lt;/li&gt;
&lt;li&gt;핵 감지 시 배틀 코드 노출&lt;/li&gt;
&lt;li&gt;핵 확률 목록에 노출&lt;/li&gt;
&lt;li&gt;래더에서 핵사용자와 매칭시 자동 닷지&lt;/li&gt;
&lt;li&gt;사용자 메시지 차단&lt;/li&gt;
&lt;li&gt;사용자 블랙리스트&lt;/li&gt;
&lt;li&gt;미니맵 핑 색상표시&lt;/li&gt;
&lt;li&gt;같은방에 같은 아이피 있을경우 알려줌(옵에 자기 컴퓨터 넣고 몰래 보는행위 방지)&lt;/li&gt;
&lt;li&gt;시간&lt;/li&gt;
&lt;li&gt;FPS&lt;/li&gt;
&lt;li&gt;사기맵 감지 및 사기위치에 핑 찍어주기(섬멸, 개별전투, 1:1, 홈팀대 원정팀)&lt;/li&gt;
&lt;li&gt;커스텀 전적보기 지원 키패드 0&lt;/li&gt;
&lt;li&gt;커스텀 채팅 히스토리 지원 키패드 + , =&lt;/li&gt;
&lt;li&gt;디스 카운트 45-&amp;gt;15 초로 자동변경&lt;/li&gt;
&lt;li&gt;겜 시작시 나가는 사람 있을경우 자동으로 나도 나가기&lt;/li&gt;
&lt;li&gt;사용자 커스텀 색 지정&lt;/li&gt;
&lt;li&gt;광고방 필터링&lt;/li&gt;
&lt;li&gt;친구 방 및 최근 게임한 방 올리기&lt;/li&gt;
&lt;li&gt;동맹/ 비동맹 채팅 감지 및 출력&lt;/li&gt;
&lt;li&gt;동맹 승리 체크&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-ke-size=&quot;size23&quot;&gt;안내&lt;/h3&gt;
&lt;ul style=&quot;list-style-type: disc;&quot; data-ke-list-type=&quot;disc&quot;&gt;
&lt;li&gt;kLauncher 가 많으면 드랍을 방어할 확률이 높아집니다.&lt;/li&gt;
&lt;li&gt;핵 사용자를 제외한 모두가 런처 사용시 방어확률이 대폭 상향됩니다.&lt;/li&gt;
&lt;li&gt;로비 크래쉬를 당한후에는 방폭이 종종 진행되며, 새로들어오는 접속자 부터는 정상적으로 들어오나 새로 방을 만드는걸 추천합니다.&lt;/li&gt;
&lt;li&gt;디스가 걸리거나 렉이 있을경우에 정상적인 유저가 핵으로 감지되는걸 볼 수 있습니다.&lt;/li&gt;
&lt;li&gt;이럴경우 사용자의 적절한 상황 판단으로 핵 사용여부를 판단하시길 바랍니다.&lt;/li&gt;
&lt;li&gt;특정 유즈맵에서 치트 패킷이 감지 될 수 있습니다.&lt;/li&gt;
&lt;li&gt;여러명의 유저가 특정 유즈맵에서 치트 패킷 감지 될 시에는 유즈맵에서 보내는 치트패킷 입니다.&lt;/li&gt;
&lt;li&gt;사용시 렉이 걸릴 경우에는 Setting 옵션에서 핵 검증 기능을 끄고 사용하시기 바랍니다.&lt;/li&gt;
&lt;li&gt;핵 검증을 끄고 사용할 시에는 드랍핵 방어나 로비 크래쉬 핵을 막을수 없습니다.&lt;/li&gt;
&lt;li&gt;핵 안티 치트 플레이어에 한해서 PC 정보 서버에 저장후, 블랙리스트에 추가됩니다.&lt;/li&gt;
&lt;li&gt;호스트 핵 판단&lt;br /&gt;방에서 기다릴 때 방장이 누구를 강퇴하거나, 방장이 아닌 플레이어가 누군가를 방에서 드랍시킬 때 메시지가 나옵니다.&lt;br /&gt;방장이 아닌 플레이어가 누군가를 방에서 드랍시켰다고 해서 무조건 호스트 핵은 아닙니다.&lt;br /&gt;실제로 네트워크 통신이 좋지 않아서 드랍이 되거나, 슬롯이 닫혀서 플레이어가 들어오지 못하고 드랍되는 경우도 있습니다.&lt;br /&gt;방에 없는 플레이어 아이디가 강퇴되었다고 나오는 것은 방에 들어오자마자 슬롯이 닫혀서 강퇴를 당한 플레이어입니다.&lt;br /&gt;반드시 메시지가 뜰 때의 상황을 고려하여 호스트 핵인지 아닌지를 판단하시기 바랍니다.&lt;br /&gt;예를 들면, 팀플방에서 &quot;친구 있어요&quot;라고 말하면서 그 플레이어가 누군가를 드랍시켰다고 뜬다면 확실하다고 볼 수 있습니다.&lt;/li&gt;
&lt;li&gt;블랙리스트에 넣어진 맴버는 사용자가 방장일때는 자동강퇴 됩니다. 방장이 아닐경우는 텍스트로 안내 메시지가 나옵니다.&lt;/li&gt;
&lt;li&gt;이그노어를 설정한후에 해당맴버를 다시 취소할경우 차단당했던 사용자가 타이핑한 문자가 한번에 채팅으로 보여집니다.&lt;/li&gt;
&lt;li&gt;맵에 입장하게 되면 해당 맵 파일은 자동으로 맵 저장소에 등록됩니다.&lt;/li&gt;
&lt;li&gt;핵 사용이 감지가 되면 핵 사용자가 플레이한 핵 데이터, 리플레이가 서버에 등록됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-ke-size=&quot;size23&quot;&gt;방제목 설정 안내&lt;/h3&gt;
&lt;ul style=&quot;list-style-type: disc;&quot; data-ke-list-type=&quot;disc&quot;&gt;
&lt;li&gt;승률 조건 설정: ~xx% ,xx%~, xx%~xx%, 이상, 이하 있을경우에 자동으로 감지 합니다. 가끔 배틀넷 문제로 사용자들의 전적을 못가져올 경우 실행이 안될수도 있습니다. ex) 빨무 50%~ or 빨무 50이상 : (자신이 방장일 경우)자동으로 50% 이상되는 사람만 입장이 가능합니다. (자신이 방장이 아닐경우)채팅으로 사용자의 전적을 알려준 후에 미달조건을 출력해줍니다. ex) 빨무 50%~60% or 빨무 50이상 60이하 : 전적이 50~60 퍼만 입장이 가능합니다.&lt;/li&gt;
&lt;li&gt;#평등 키워드(방장만 사용가능): 방제목에 #평등 을 붙일 경우 게임 시작시 자동으로 최적의 팀을 분석해 전적이 비슷하게끔 맞춰줍니다. 가끔 배틀넷 문제로 사용자들의 전적을 못가져올 경우 실행이 안될수도 있습니다. ex) 빨무 #평등 : 자동으로 승률을 맞춰서 팀을 분석해 줍니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;1282&quot; data-origin-height=&quot;994&quot; data-filename=&quot;108878792-f0d04700-7643-11eb-848b-07dc83d6bd75.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/clPoE2/btrhcNkvR7o/w2lr2EE24sC0pCDCk7QQ4k/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/clPoE2/btrhcNkvR7o/w2lr2EE24sC0pCDCk7QQ4k/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FclPoE2%2FbtrhcNkvR7o%2Fw2lr2EE24sC0pCDCk7QQ4k%2Fimg.png' data-origin-width=&quot;1282&quot; data-origin-height=&quot;994&quot; data-filename=&quot;108878792-f0d04700-7643-11eb-848b-07dc83d6bd75.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>유틸리티</category>
<category>Starcraft</category>
<category>스타크래프트</category>
<category>핵감지기</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1236</guid>
<comments>https://blog.joyfui.com/1236#entry1236comment</comments>
<pubDate>Fri, 08 Oct 2021 22:22:07 +0900</pubDate>
</item>
<item>
<title>IntelliJ 실행 시 Address already in use: bind 오류가 날 때 (2)</title>
<link>https://blog.joyfui.com/1235</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;지난번에 &lt;a href=&quot;https://blog.joyfui.com/1234&quot;&gt;포트 점유로 인한 파이참(인텔리제이 등등) 실행 오류 해결법&lt;/a&gt;을 올렸는데 그 방법은 치명적인 문제가 있다. 명령 실행 후 wsl에서 네트워크 연결이 안 되는 것...&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;wsl에서 돌아가는 프로그램 개발하려고 파이참을 켜는 건데 이러면 답이 없다... 다시 정보의 바다에 나선 끝에 근본적인 해결책을 찾았다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;일단 원인부터 설명하자면 윈도우에서는 임시 포트로 사용할 수 있는 동적 포트 영역이 설정되어 있다. 그래서 프로그램이 아무 포트나 요청하면 이 영역에서 부여해주는데 무슨 영문인진 모르겠지만 이 영역이 이상하게 설정되어 있었다.&lt;/p&gt;
&lt;pre id=&quot;code_1633099946046&quot; class=&quot;shell&quot; data-ke-language=&quot;shell&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;netsh int ipv4 show dynamicport tcp
netsh int ipv4 show dynamicport udp
netsh int ipv6 show dynamicport tcp
netsh int ipv6 show dynamicport udp&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;터미널을 열고 위 명령어를 입력하면 지정된 동적 포트의 범위를 볼 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;1115&quot; data-origin-height=&quot;624&quot; data-filename=&quot;WindowsTerminal_eO6DDV05PE.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/bdrKuQ/btrgCFTB10j/w6QpRck8UzUQlsIJv4Q2G0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/bdrKuQ/btrgCFTB10j/w6QpRck8UzUQlsIJv4Q2G0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbdrKuQ%2FbtrgCFTB10j%2Fw6QpRck8UzUQlsIJv4Q2G0%2Fimg.png' data-origin-width=&quot;1115&quot; data-origin-height=&quot;624&quot; data-filename=&quot;WindowsTerminal_eO6DDV05PE.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://docs.microsoft.com/ko-kr/windows/client-management/troubleshoot-tcpip-port-exhaust&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.microsoft.com/ko-kr/windows/client-management/troubleshoot-tcpip-port-exhaust&lt;/a&gt;&lt;/p&gt;
&lt;figure id=&quot;og_1633099970445&quot; contenteditable=&quot;false&quot; data-ke-type=&quot;opengraph&quot; data-ke-align=&quot;alignCenter&quot; data-og-type=&quot;website&quot; data-og-title=&quot;포트 소모 문제 해결 - Windows Client Management&quot; data-og-description=&quot;포트 소모 문제를 해결하는 방법에 대해 알아봅니다. 시스템의 모든 포트가 사용될 때 포트 소모가 발생합니다.&quot; data-og-host=&quot;docs.microsoft.com&quot; data-og-source-url=&quot;https://docs.microsoft.com/ko-kr/windows/client-management/troubleshoot-tcpip-port-exhaust&quot; data-og-url=&quot;https://docs.microsoft.com/ko-kr/windows/client-management/troubleshoot-tcpip-port-exhaust&quot; data-og-image=&quot;https://scrap.kakaocdn.net/dn/bXTVfX/hyLN9bJ0Zx/MgTJkZjnwGC4opxw1er07K/img.png?width=400&amp;amp;height=400&amp;amp;face=0_0_400_400&quot;&gt;&lt;a href=&quot;https://docs.microsoft.com/ko-kr/windows/client-management/troubleshoot-tcpip-port-exhaust&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-source-url=&quot;https://docs.microsoft.com/ko-kr/windows/client-management/troubleshoot-tcpip-port-exhaust&quot;&gt;
&lt;div class=&quot;og-image&quot; style=&quot;background-image: url('https://scrap.kakaocdn.net/dn/bXTVfX/hyLN9bJ0Zx/MgTJkZjnwGC4opxw1er07K/img.png?width=400&amp;amp;height=400&amp;amp;face=0_0_400_400');&quot;&gt;&amp;nbsp;&lt;/div&gt;
&lt;div class=&quot;og-text&quot;&gt;
&lt;p class=&quot;og-title&quot; data-ke-size=&quot;size16&quot;&gt;포트 소모 문제 해결 - Windows Client Management&lt;/p&gt;
&lt;p class=&quot;og-desc&quot; data-ke-size=&quot;size16&quot;&gt;포트 소모 문제를 해결하는 방법에 대해 알아봅니다. 시스템의 모든 포트가 사용될 때 포트 소모가 발생합니다.&lt;/p&gt;
&lt;p class=&quot;og-host&quot; data-ke-size=&quot;size16&quot;&gt;docs.microsoft.com&lt;/p&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/figure&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이 문서를 참고하면 윈도우 기본 설정은 49152~65535인데 무슨 영문인지 tcp가 1024~15000으로 설정되어 있다. 저 영역은 등록된 포트 영역으로 여러 프로그램이 이미 사용 중인 영역이다... 아무튼 저렇게 설정되어 있으니 하이퍼v가 동적 포트를 점유하는 과정에서 파이참이 사용하는 영역을 몽땅 점유해버리는 바람에 이런 오류가 난 것이다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이제 설정을 올바르게 바꿔보자&lt;/p&gt;
&lt;pre id=&quot;code_1633100343682&quot; class=&quot;shell&quot; data-ke-language=&quot;shell&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;netsh int ipv4 set dynamicport tcp start=49152 num=16384
netsh int ipv6 set dynamicport tcp start=49152 num=16384&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;관리자 권한으로 터미널을 열고 위 명령을 입력한다. 아까 위에서 ipv4 tcp와 ipv6 tcp만 이상했으니 이 둘만 설정을 바꿨다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;1115&quot; data-origin-height=&quot;624&quot; data-filename=&quot;WindowsTerminal_zfLfkgLiMj.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/eHf06V/btrgA6Sc9Tv/gCa9XMpK2ZfwrA53jZsGDK/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/eHf06V/btrgA6Sc9Tv/gCa9XMpK2ZfwrA53jZsGDK/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FeHf06V%2FbtrgA6Sc9Tv%2FgCa9XMpK2ZfwrA53jZsGDK%2Fimg.png' data-origin-width=&quot;1115&quot; data-origin-height=&quot;624&quot; data-filename=&quot;WindowsTerminal_zfLfkgLiMj.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이제 깔끔하게 재부팅 하면 끝! 근본적인 문제가 해결되었으니 이제 앞으로 Address already in use: bind 에러는 보기 힘들 것이다.&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>Windows</category>
<category>Android</category>
<category>IntelliJ</category>
<category>java</category>
<category>Python</category>
<category>Ruby</category>
<category>루비</category>
<category>안드로이드</category>
<category>인텔리제이</category>
<category>자바</category>
<category>파이썬</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1235</guid>
<comments>https://blog.joyfui.com/1235#entry1235comment</comments>
<pubDate>Sat, 02 Oct 2021 00:07:43 +0900</pubDate>
</item>
<item>
<title>IntelliJ 실행 시 Address already in use: bind 오류가 날 때</title>
<link>https://blog.joyfui.com/1234</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;근본적인 해결법을 찾아서 글을 올렸습니다. &lt;a href=&quot;https://blog.joyfui.com/1235&quot; rel=&quot;noopener&quot;&gt;https://blog.joyfui.com/1235&lt;/a&gt;&lt;/p&gt;
&lt;hr contenteditable=&quot;false&quot; data-ke-type=&quot;horizontalRule&quot; data-ke-style=&quot;style5&quot; /&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;가끔 인텔리제이나, 파이참, 안드로이드 스튜디오 등 젯브레인의 IDE를 실행하면 아래와 같은 메시지가 뜨면서 실행이 안 되는 오류가 난다. (심지어 최신버전에서는 오류 메시지도 안뜨고 무한 스플래시 화면이다...)&lt;/p&gt;
&lt;blockquote data-ke-style=&quot;style3&quot;&gt;java.util.concurrent.CompletionException: java.net.BindException: Address already in use: bind&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:314)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:319)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1702)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run(Executors.java:668)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run(Executors.java:665)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.security.AccessController.doPrivileged(Native Method)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.util.concurrent.Executors$PrivilegedThreadFactory$1.run(Executors.java:665)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/java.lang.Thread.run(Thread.java:834)&lt;br /&gt;Caused by: java.net.BindException: Address already in use: bind&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/sun.nio.ch.Net.bind0(Native Method)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/sun.nio.ch.Net.bind(Net.java:455)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/sun.nio.ch.Net.bind(Net.java:447)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.base/sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:227)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:134)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:550)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1334)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:506)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:491)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:973)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:248)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:356)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;... 1 more&lt;/blockquote&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;예전에 찾아봤을 땐 특정 포트를 다른 프로그램에서 선점하면 일어나는 오류라고 해서 그동안 재부팅 해서 해결하곤 했다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;지난번에 이 문제 때문에 &lt;a href=&quot;https://blog.joyfui.com/1224&quot;&gt;특정 포트를 사용 중인 프로그램 찾는 법&lt;/a&gt;을 올렸었는데 해당 방법으로도 뭐가 원인인지 찾을 수 없었다. 안 그래도 요즘 들어서 저 현상이 너무 자주 일어나서 다시 찾아보니까 Hyper-V에서(내 경우 WSL) 포트를 선점해서 그렇다고 한다. 재부팅 없이 해결하는 방법도 찾았다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;명령 프롬프트를 관리자 권한으로 열고 아래 명령어를 입력하면 된다.&lt;/p&gt;
&lt;pre id=&quot;code_1632543559437&quot; class=&quot;shell&quot; data-ke-language=&quot;shell&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;net stop winnat
net start winnat&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;출처: &lt;a href=&quot;https://intellij-support.jetbrains.com/hc/en-us/community/posts/360009005139-Intellij-Not-starting-up-getting-error-BindException-Address-already-in-use-?page=1#community_comment_360002524640&quot; rel=&quot;noopener&quot;&gt;https://intellij-support.jetbrains.com/hc/en-us/community/posts/360009005139-Intellij-Not-starting-up-getting-error-BindException-Address-already-in-use-?page=1#community_comment_360002524640&lt;/a&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;치명적인 문제점으로 위 명령어를 실행한 이후엔 wsl에서 네트워크 연결이 안 된다. 아 이럼 나가린데...&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>Windows</category>
<category>Android</category>
<category>IntelliJ</category>
<category>java</category>
<category>Python</category>
<category>Ruby</category>
<category>루비</category>
<category>안드로이드</category>
<category>인텔리제이</category>
<category>자바</category>
<category>파이썬</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1234</guid>
<comments>https://blog.joyfui.com/1234#entry1234comment</comments>
<pubDate>Sat, 25 Sep 2021 13:24:58 +0900</pubDate>
</item>
<item>
<title>이메일 뉴스레터를 RSS로, Kill the Newsletter!</title>
<link>https://blog.joyfui.com/1233</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://kill-the-newsletter.com/&quot; rel=&quot;noopener&quot;&gt;https://kill-the-newsletter.com/&lt;/a&gt;&lt;/p&gt;
&lt;figure id=&quot;og_1632115530806&quot; contenteditable=&quot;false&quot; data-ke-type=&quot;opengraph&quot; data-ke-align=&quot;alignCenter&quot; data-og-type=&quot;website&quot; data-og-title=&quot;Kill the Newsletter!&quot; data-og-description=&quot;&quot; data-og-host=&quot;kill-the-newsletter.com&quot; data-og-source-url=&quot;https://kill-the-newsletter.com/&quot; data-og-url=&quot;https://kill-the-newsletter.com/&quot; data-og-image=&quot;&quot;&gt;&lt;a href=&quot;https://kill-the-newsletter.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-source-url=&quot;https://kill-the-newsletter.com/&quot;&gt;
&lt;div class=&quot;og-image&quot; style=&quot;background-image: url();&quot;&gt;&amp;nbsp;&lt;/div&gt;
&lt;div class=&quot;og-text&quot;&gt;
&lt;p class=&quot;og-title&quot; data-ke-size=&quot;size16&quot;&gt;Kill the Newsletter!&lt;/p&gt;
&lt;p class=&quot;og-desc&quot; data-ke-size=&quot;size16&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p class=&quot;og-host&quot; data-ke-size=&quot;size16&quot;&gt;kill-the-newsletter.com&lt;/p&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/figure&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;구글 리더가 문을 닫은 이후 RSS가 많이 사라지고 최근엔 뉴스레터가 많이 생겼다. RSS가 처음에 많이 쓰인 이유가 이메일 뉴스레터의 불편함 때문이었는데 과거로의 회귀인가...? 아무튼 뉴스레터를 Atom 피드로 바꿔주는 서비스를 알게되서 소개한다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;인박스 이름을 정해주면 이메일 주소와 Atom Feed 주소가 생성된다. 피드는 RSS 리더에 등록하면 되고 이메일은 뉴스레터에 등록하면 된다. 뉴스레터가 도착하면 내용이 피드에 추가되면서 RSS에서 볼 수 있게 된다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;코드도 오픈소스로 공개되어 있어서 셀프 호스팅도 가능하다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://github.com/leafac/kill-the-newsletter&quot; rel=&quot;noopener&quot;&gt;https://github.com/leafac/kill-the-newsletter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;482&quot; data-origin-height=&quot;303&quot; data-filename=&quot;Screenshot 2021-09-20 at 14-21-05 Kill the Newsletter .png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/ciPZfW/btrfBsABYpQ/NqQvte2uljLK9SZpmoMXwk/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/ciPZfW/btrfBsABYpQ/NqQvte2uljLK9SZpmoMXwk/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FciPZfW%2FbtrfBsABYpQ%2FNqQvte2uljLK9SZpmoMXwk%2Fimg.png' data-origin-width=&quot;482&quot; data-origin-height=&quot;303&quot; data-filename=&quot;Screenshot 2021-09-20 at 14-21-05 Kill the Newsletter .png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;rss 붐은 &lt;s&gt;다시&lt;/s&gt; 온다...ㅠㅠ&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>추천 사이트</category>
<category>RSS</category>
<category>사이트</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1233</guid>
<comments>https://blog.joyfui.com/1233#entry1233comment</comments>
<pubDate>Mon, 20 Sep 2021 14:35:47 +0900</pubDate>
</item>
<item>
<title>porkbun에 Cloudflare DNSSEC 설정하는 방법</title>
<link>https://blog.joyfui.com/1232</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;com 도메인 가격 인상 소식을 듣고 드디어 나만의 도메인을 샀다! 갱신 깜빡하면 영영 사라지는 wo.tc 무료 도메인에서 com 도메인으로 갈아타면서 블로그 주소를 &lt;a href=&quot;https://joyfui.wo.tc/&quot;&gt;joyfui.wo.tc&lt;/a&gt;에서 &lt;a href=&quot;https://blog.joyfui.com/&quot;&gt;blog.joyfui.com&lt;/a&gt;으로 바꿨는데 네임 서버 변경부터 우여곡절이 많았다. (원래 네임 서버 전파가 이렇게 느렸나? 정상화되는데 이틀 걸림;;)&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;아무튼 &lt;a href=&quot;https://porkbun.com/&quot;&gt;porkbun&lt;/a&gt;에서 10년 치를 결제한 뒤 네임 서버를 &lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;Cloudflare&lt;/a&gt;로 바꾸고 설정을 쭉 둘러봤는데 DNSSEC라는 게 있었다. 돈이 더 드는 것도 아니고 보안에 좋다는 데 굳이 사용하지 않을 이유가 없어서 설정하려는데 클라우드플레어 쪽 매뉴얼에 포크번의 대한 내용이 없다. 뭐 적당히 칸을 채워도 추가가 안 되길래 찾아봤더니 해결법은 간단했다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;673&quot; data-origin-height=&quot;955&quot; data-filename=&quot;firefox_OGSJs6nXLb.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/8qNNV/btrdopVEJfp/2SeUCw3k7MXK6RkgAtM7z1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/8qNNV/btrdopVEJfp/2SeUCw3k7MXK6RkgAtM7z1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F8qNNV%2FbtrdopVEJfp%2F2SeUCw3k7MXK6RkgAtM7z1%2Fimg.png' data-origin-width=&quot;673&quot; data-origin-height=&quot;955&quot; data-filename=&quot;firefox_OGSJs6nXLb.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;클라우드플레어에서 DNSSEC 사용 버튼을 누르면 이렇게 등록해야 하는 정보가 뜨는데&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;1165&quot; data-origin-height=&quot;665&quot; data-filename=&quot;firefox_C0Qk3eelpV.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/mGnJE/btrdswSNey8/JoaxYdKAAffs61Dk4Glivk/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/mGnJE/btrdswSNey8/JoaxYdKAAffs61Dk4Glivk/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FmGnJE%2FbtrdswSNey8%2FJoaxYdKAAffs61Dk4Glivk%2Fimg.png' data-origin-width=&quot;1165&quot; data-origin-height=&quot;665&quot; data-filename=&quot;firefox_C0Qk3eelpV.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;포크번 DNSSEC 추가 화면에서 Key Tag(키 태그), Algorithm(알고리즘), Digest Type(다이제스트 유형), Digest(다이제스트)만 채워 넣고 keyData 부분은 비워두면 된다.&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>잡담</category>
<category>Blog</category>
<category>dns</category>
<category>Tistory</category>
<category>도메인</category>
<category>블로그</category>
<category>티스토리</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1232</guid>
<comments>https://blog.joyfui.com/1232#entry1232comment</comments>
<pubDate>Sat, 28 Aug 2021 19:04:13 +0900</pubDate>
</item>
<item>
<title>시놀로지에 Vaultwarden 설치하기</title>
<link>https://blog.joyfui.com/1231</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://github.com/dani-garcia/vaultwarden&quot;&gt;Vaultwarden&lt;/a&gt;은 오픈소스 패스워드 매니저인 &lt;a href=&quot;https://bitwarden.com/&quot;&gt;Bitwarden&lt;/a&gt;의 가벼운 이미지 버전이다. 공식 Bitwarden 이미지가 대규모 서비스를 전제로 만들어져서 굉장히 무거운 데 반해 Vaultwarden은 소규모 자체 호스팅을 전제로 만들어져서 가볍다. (DB도 기본적으로 SQLite를 사용한다)&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;원래 패스워드 매니저로 &lt;a href=&quot;https://www.lastpass.com/&quot;&gt;라스트패스&lt;/a&gt;를 사용하다가 군대 갔다 오니 가격이 두 배($24), 또 얼마 지나지 않아서 가격이 세 배($36)로 오른 것을 보고 비트워든으로 갈아탔다. 비트워든은 무료도 충분하지만, 유료도 1년에 $10밖에 하지 않는다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;그러다가 심심해서 NAS에 비트워든을 돌려보기로 했다. (유료 결제는 잘 쓰고 있으니 기부한 셈...?)&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;자세한 설정법이나 FAQ는 공식 문서를 살펴보길 바란다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://github.com/dani-garcia/vaultwarden/wiki&quot; rel=&quot;noopener&quot;&gt;https://github.com/dani-garcia/vaultwarden/wiki&lt;/a&gt;&lt;/p&gt;
&lt;figure id=&quot;og_1629519880134&quot; contenteditable=&quot;false&quot; data-ke-type=&quot;opengraph&quot; data-ke-align=&quot;alignCenter&quot; data-og-type=&quot;object&quot; data-og-title=&quot;GitHub - dani-garcia/vaultwarden: Unofficial Bitwarden compatible server written in Rust, formerly known as bitwarden_rs&quot; data-og-description=&quot;Unofficial Bitwarden compatible server written in Rust, formerly known as bitwarden_rs - GitHub - dani-garcia/vaultwarden: Unofficial Bitwarden compatible server written in Rust, formerly known as ...&quot; data-og-host=&quot;github.com&quot; data-og-source-url=&quot;https://github.com/dani-garcia/vaultwarden/wiki&quot; data-og-url=&quot;https://github.com/dani-garcia/vaultwarden&quot; data-og-image=&quot;https://scrap.kakaocdn.net/dn/pwwgp/hyLjU7dUFO/WV2KXUHy2tMKJrSsnONgL0/img.png?width=1200&amp;amp;height=600&amp;amp;face=0_0_1200_600&quot;&gt;&lt;a href=&quot;https://github.com/dani-garcia/vaultwarden/wiki&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; data-source-url=&quot;https://github.com/dani-garcia/vaultwarden/wiki&quot;&gt;
&lt;div class=&quot;og-image&quot; style=&quot;background-image: url('https://scrap.kakaocdn.net/dn/pwwgp/hyLjU7dUFO/WV2KXUHy2tMKJrSsnONgL0/img.png?width=1200&amp;amp;height=600&amp;amp;face=0_0_1200_600');&quot;&gt;&amp;nbsp;&lt;/div&gt;
&lt;div class=&quot;og-text&quot;&gt;
&lt;p class=&quot;og-title&quot; data-ke-size=&quot;size16&quot;&gt;GitHub - dani-garcia/vaultwarden: Unofficial Bitwarden compatible server written in Rust, formerly known as bitwarden_rs&lt;/p&gt;
&lt;p class=&quot;og-desc&quot; data-ke-size=&quot;size16&quot;&gt;Unofficial Bitwarden compatible server written in Rust, formerly known as bitwarden_rs - GitHub - dani-garcia/vaultwarden: Unofficial Bitwarden compatible server written in Rust, formerly known as ...&lt;/p&gt;
&lt;p class=&quot;og-host&quot; data-ke-size=&quot;size16&quot;&gt;github.com&lt;/p&gt;
&lt;/div&gt;
&lt;/a&gt;&lt;/figure&gt;
&lt;h4 data-ke-size=&quot;size20&quot;&gt;설치&lt;/h4&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;1. Docker를 열고 &lt;code class=&quot;language-text&quot;&gt;vaultwarden/server&lt;/code&gt; 이미지를 다운받는다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;1060&quot; data-origin-height=&quot;570&quot; data-filename=&quot;1Screenshot 2021-08-20 at 21-04-24 joyfuI-nas - Synology DiskStation.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/bGNfjd/btrcMH21Dqn/ohP5YaI284nYQqq86ceXCk/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/bGNfjd/btrcMH21Dqn/ohP5YaI284nYQqq86ceXCk/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbGNfjd%2FbtrcMH21Dqn%2FohP5YaI284nYQqq86ceXCk%2Fimg.png' data-origin-width=&quot;1060&quot; data-origin-height=&quot;570&quot; data-filename=&quot;1Screenshot 2021-08-20 at 21-04-24 joyfuI-nas - Synology DiskStation.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;2. 다운받은 이미지를 선택해서 컨테이너 생성을 시작한다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;1060&quot; data-origin-height=&quot;570&quot; data-filename=&quot;2Screenshot 2021-08-20 at 21-06-21 joyfuI-nas - Synology DiskStation.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/os9R0/btrcMF5esIa/yyz9bSYnHwS4McA9npBpWk/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/os9R0/btrcMF5esIa/yyz9bSYnHwS4McA9npBpWk/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fos9R0%2FbtrcMF5esIa%2Fyyz9bSYnHwS4McA9npBpWk%2Fimg.png' data-origin-width=&quot;1060&quot; data-origin-height=&quot;570&quot; data-filename=&quot;2Screenshot 2021-08-20 at 21-06-21 joyfuI-nas - Synology DiskStation.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;3. 고급 설정을 눌러서 자동 재시작에 체크해주고&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;1060&quot; data-origin-height=&quot;570&quot; data-filename=&quot;3Screenshot 2021-08-20 at 21-06-56 joyfuI-nas - Synology DiskStation.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/bYVPgG/btrcQgv6Tcu/87BGTIU9Y5mk1idiYfyvy1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/bYVPgG/btrcQgv6Tcu/87BGTIU9Y5mk1idiYfyvy1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbYVPgG%2FbtrcQgv6Tcu%2F87BGTIU9Y5mk1idiYfyvy1%2Fimg.png' data-origin-width=&quot;1060&quot; data-origin-height=&quot;570&quot; data-filename=&quot;3Screenshot 2021-08-20 at 21-06-56 joyfuI-nas - Synology DiskStation.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;4. 볼륨 탭에서 &lt;code class=&quot;language-text&quot;&gt;/data&lt;/code&gt; 경로를 적당한 위치에 마운트 해준다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;1060&quot; data-origin-height=&quot;570&quot; data-filename=&quot;4Screenshot 2021-08-20 at 21-10-00 joyfuI-nas - Synology DiskStation.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/bzkyBG/btrcNnwecuQ/3IaTy0AC8A7yCPqwRUxe11/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/bzkyBG/btrcNnwecuQ/3IaTy0AC8A7yCPqwRUxe11/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbzkyBG%2FbtrcNnwecuQ%2F3IaTy0AC8A7yCPqwRUxe11%2Fimg.png' data-origin-width=&quot;1060&quot; data-origin-height=&quot;570&quot; data-filename=&quot;4Screenshot 2021-08-20 at 21-10-00 joyfuI-nas - Synology DiskStation.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;5. 포트 설정 탭에서 적당한 포트를 매핑해준다. 80이 웹페이지 포트고 3012는 웹소켓 포트이다. 나는 80 포트가 이미 사용 중이라 적당한 다른 포트를 설정해줬다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;1060&quot; data-origin-height=&quot;570&quot; data-filename=&quot;5Screenshot 2021-08-20 at 21-20-39 joyfuI-nas - Synology DiskStation.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/bmH4Yb/btrcIfMGuPv/rzujNQxPXVTaBfVDoDJkiK/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/bmH4Yb/btrcIfMGuPv/rzujNQxPXVTaBfVDoDJkiK/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbmH4Yb%2FbtrcIfMGuPv%2FrzujNQxPXVTaBfVDoDJkiK%2Fimg.png' data-origin-width=&quot;1060&quot; data-origin-height=&quot;570&quot; data-filename=&quot;5Screenshot 2021-08-20 at 21-20-39 joyfuI-nas - Synology DiskStation.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;6. 환경 탭에서 환경변수를 추가해준다. 앞에서 웹소켓 포트도 매핑해줬고 웹소켓을 사용하면 로그인 정보를 바꿨을 때 클라이언트에서 동기화를 누를 필요 없이 바로바로 연동되므로 활성화 설정을 했다.&lt;/p&gt;
&lt;pre class=&quot;line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;
TZ=Asia/Seoul
WEBSOCKET_ENABLED=true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;1060&quot; data-origin-height=&quot;570&quot; data-filename=&quot;6Screenshot 2021-08-20 at 21-25-52 joyfuI-nas - Synology DiskStation.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/bGjpBD/btrcIWsSZWP/LMmkDBpbZNHEcejSBn0KaK/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/bGjpBD/btrcIWsSZWP/LMmkDBpbZNHEcejSBn0KaK/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbGjpBD%2FbtrcIWsSZWP%2FLMmkDBpbZNHEcejSBn0KaK%2Fimg.png' data-origin-width=&quot;1060&quot; data-origin-height=&quot;570&quot; data-filename=&quot;6Screenshot 2021-08-20 at 21-25-52 joyfuI-nas - Synology DiskStation.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;7. 이제 컨테이너를 실행한다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;1060&quot; data-origin-height=&quot;570&quot; data-filename=&quot;7Screenshot 2021-08-20 at 21-26-18 joyfuI-nas - Synology DiskStation.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/oiKt4/btrcRoHzmFW/HIgus5LTHdTTKlLkDy4Zr1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/oiKt4/btrcRoHzmFW/HIgus5LTHdTTKlLkDy4Zr1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FoiKt4%2FbtrcRoHzmFW%2FHIgus5LTHdTTKlLkDy4Zr1%2Fimg.png' data-origin-width=&quot;1060&quot; data-origin-height=&quot;570&quot; data-filename=&quot;7Screenshot 2021-08-20 at 21-26-18 joyfuI-nas - Synology DiskStation.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;8. 설정한 주소로 들어가면 아래 화면이 뜬다. 근데 계정을 만들려고 하면 HTTPS를 사용하라는 오류가 뜰 것이다. 비트워든은 보안을 위해 무조건 HTTPS로 접속해야 사용할 수 있게 만들어져 있다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;1000&quot; data-origin-height=&quot;587&quot; data-filename=&quot;8Screenshot 2021-08-20 at 21-27-22 Bitwarden 웹 보관함.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/G5j6E/btrcNMvLRdr/D1pkv4hqjASLSn80LZWQjK/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/G5j6E/btrcNMvLRdr/D1pkv4hqjASLSn80LZWQjK/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FG5j6E%2FbtrcNMvLRdr%2FD1pkv4hqjASLSn80LZWQjK%2Fimg.png' data-origin-width=&quot;1000&quot; data-origin-height=&quot;587&quot; data-filename=&quot;8Screenshot 2021-08-20 at 21-27-22 Bitwarden 웹 보관함.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;9. 지난번에 Nginx Proxy Manager를 설치했으니 얘로 HTTPS 리버스 프록시를 만들어보자. NPM에 접속해서 새로운 프록시 호스트를 만든다. 나는 NPM을 설치할 때 host 네트워크를 사용하도록 만들었기 때문에 그냥 주소에 루프백 아이피를 넣어줬지만, bridge 네트워크를 사용하도록 설치했다면 내부 아이피 주소를 넣어줘야 할 것이다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;547&quot; data-origin-height=&quot;585&quot; data-filename=&quot;10Screenshot 2021-08-20 at 21-31-44 Nginx Proxy Manager.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/epbJyo/btrcMHBXtsu/sYKQCkMxYXPV6CJLsLT4Ek/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/epbJyo/btrcMHBXtsu/sYKQCkMxYXPV6CJLsLT4Ek/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FepbJyo%2FbtrcMHBXtsu%2FsYKQCkMxYXPV6CJLsLT4Ek%2Fimg.png' data-origin-width=&quot;547&quot; data-origin-height=&quot;585&quot; data-filename=&quot;10Screenshot 2021-08-20 at 21-31-44 Nginx Proxy Manager.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;10. 웹소켓을 사용할 수 있게 관련 설정을 해준다. &lt;code class=&quot;language-text&quot;&gt;/notifications/hub&lt;/code&gt;는 웹소켓 포트에 &lt;code class=&quot;language-text&quot;&gt;/notifications/hub/negotiate&lt;/code&gt;는 웹서버 포트에 연결한다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;550&quot; data-origin-height=&quot;886&quot; data-filename=&quot;11Screenshot 2021-08-20 at 21-38-04 Nginx Proxy Manager.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/pXbNn/btrcLAXqWdn/eHCCxbrKJnmOdNM2kSCOaK/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/pXbNn/btrcLAXqWdn/eHCCxbrKJnmOdNM2kSCOaK/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FpXbNn%2FbtrcLAXqWdn%2FeHCCxbrKJnmOdNM2kSCOaK%2Fimg.png' data-origin-width=&quot;550&quot; data-origin-height=&quot;886&quot; data-filename=&quot;11Screenshot 2021-08-20 at 21-38-04 Nginx Proxy Manager.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;11. SSL 인증서를 만들고 HTTPS 설정을 해주면 끝!&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;550&quot; data-origin-height=&quot;596&quot; data-filename=&quot;12Screenshot 2021-08-20 at 21-39-12 Nginx Proxy Manager.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/cjrP1A/btrcIflw9Zc/JDnLH8JxOfsgKV4mBUF0j1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/cjrP1A/btrcIflw9Zc/JDnLH8JxOfsgKV4mBUF0j1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcjrP1A%2FbtrcIflw9Zc%2FJDnLH8JxOfsgKV4mBUF0j1%2Fimg.png' data-origin-width=&quot;550&quot; data-origin-height=&quot;596&quot; data-filename=&quot;12Screenshot 2021-08-20 at 21-39-12 Nginx Proxy Manager.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;12. 짜잔~ 이제 계정을 만들고 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;1135&quot; data-origin-height=&quot;605&quot; data-filename=&quot;13Screenshot 2021-08-20 at 21-48-53 내 보관함 Bitwarden 웹 보관함.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/POC5R/btrcLBor46Q/kLmf4QKbRH08ZXF2Q2PxVK/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/POC5R/btrcLBor46Q/kLmf4QKbRH08ZXF2Q2PxVK/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FPOC5R%2FbtrcLBor46Q%2FkLmf4QKbRH08ZXF2Q2PxVK%2Fimg.png' data-origin-width=&quot;1135&quot; data-origin-height=&quot;605&quot; data-filename=&quot;13Screenshot 2021-08-20 at 21-48-53 내 보관함 Bitwarden 웹 보관함.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;13. 이제 내가 사용할 계정은 만들었으니 다른 사람이 계정을 만들 수 없게 막아야 한다. 컨테이너를 끄고 아래 &lt;code class=&quot;language-shell&quot;&gt;SIGNUPS_ALLOWED&lt;/code&gt; 환경변수를 추가한다. &lt;code class=&quot;language-shell&quot;&gt;DOMAIN&lt;/code&gt; 환경변수는 설명서에 설정하는 게 좋다고 하여 설정했다. 비트워든 주소를 넣으면 된다.&lt;/p&gt;
&lt;pre class=&quot;line-numbers&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;
SIGNUPS_ALLOWED=false
DOMAIN=https://bitwarden.example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;1060&quot; data-origin-height=&quot;570&quot; data-filename=&quot;14Screenshot 2021-08-20 at 21-58-13 joyfuI-nas - Synology DiskStation.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/wy51d/btrcNNBqOKf/9Tr4230jdCdlb1tWbtsf3k/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/wy51d/btrcNNBqOKf/9Tr4230jdCdlb1tWbtsf3k/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fwy51d%2FbtrcNNBqOKf%2F9Tr4230jdCdlb1tWbtsf3k%2Fimg.png' data-origin-width=&quot;1060&quot; data-origin-height=&quot;570&quot; data-filename=&quot;14Screenshot 2021-08-20 at 21-58-13 joyfuI-nas - Synology DiskStation.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이제 비트워든 앱이나 확장프로그램에서 로그인하기 전에 설정 버튼을 눌러서 서버 URL을 자신의 비트워든 주소로 설정한 뒤 로그인하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;781&quot; data-origin-height=&quot;611&quot; data-filename=&quot;0821141618214619.jpg&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/cEv8Gb/btrcMZPSCpr/OGapsjHQKYS6imOq0qRkck/img.jpg' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/cEv8Gb/btrcMZPSCpr/OGapsjHQKYS6imOq0qRkck/img.jpg' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcEv8Gb%2FbtrcMZPSCpr%2FOGapsjHQKYS6imOq0qRkck%2Fimg.jpg' data-origin-width=&quot;781&quot; data-origin-height=&quot;611&quot; data-filename=&quot;0821141618214619.jpg&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;Vaultwarden을 사용하면 TOTP등 일부 유료 기능을 그냥 사용할 수 있다.&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>시놀로지</category>
<category>docker</category>
<category>Nas</category>
<category>Synology</category>
<category>도커</category>
<category>비밀번호</category>
<category>시놀로지</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1231</guid>
<comments>https://blog.joyfui.com/1231#entry1231comment</comments>
<pubDate>Sat, 21 Aug 2021 14:30:19 +0900</pubDate>
</item>
<item>
<title>부모 컴포넌트에서 자식 컴포넌트 함수 실행하기</title>
<link>https://blog.joyfui.com/1230</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;자식 컴포넌트에서 부모 컴포넌트의 함수를 실행하려면 props로 함수를 넘겨주면 된다. 역방향은 불가능한가 싶어서 찾아봤더니 방법이 있었다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;부모 컴포넌트에서 자식 컴포넌트의 함수를 실행하기 위해선 React.forwardRef와 useImperativeHandle을 사용해야 한다.&lt;/p&gt;
&lt;pre class=&quot;line-numbers&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;
// Child.jsx
import { forwardRef, useImperativeHandle } from &quot;react&quot;;

const Child = forwardRef((props, ref) =&amp;gt; {
  useImperativeHandle(ref, () =&amp;gt; ({
    testFn: () =&amp;gt; {
      alert(&quot;함수 실행됨&quot;);
    }
  }));

  return &amp;lt;div&amp;gt;Child&amp;lt;/div&amp;gt;;
});

export default Child;
&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이렇게 자식 컴포넌트에서 useImperativeHandle과 forwardRef를 사용해 ref를 만들면&lt;/p&gt;
&lt;pre class=&quot;line-numbers&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;
// Parent.jsx
import { useRef } from &quot;react&quot;;
import Child from &quot;./Child&quot;;

const Parent = () =&amp;gt; {
  const childRef = useRef();

  return (
    &amp;lt;button
      onClick={() =&amp;gt; childRef.current.testFn()}
    &amp;gt;
      함수 실행
    &amp;lt;/button&amp;gt;
    &amp;lt;Child ref={childRef}&amp;gt;&amp;lt;/Child&amp;gt;
  );
}

export default Parent;
&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;요렇게 부모 컴포넌트에서 ref를 받아다가 사용할 수 있다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;방법도 복잡하고 리액트에서도 권장하는 패턴은 아닌 듯하다. 하긴 지금 생각해보면 useEffect로 props의 변화에 따라 함수를 실행시키는 방법으로도 충분할 거 같긴 하다.&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>React</category>
<category>JavaScript</category>
<category>react</category>
<category>리액트</category>
<category>자바스크립트</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1230</guid>
<comments>https://blog.joyfui.com/1230#entry1230comment</comments>
<pubDate>Fri, 13 Aug 2021 23:33:48 +0900</pubDate>
</item>
<item>
<title>[The Walking Dead: The Final Season] 실행 불가 오류 해결</title>
<link>https://blog.joyfui.com/1229</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;이번엔 텔테일 게임즈 게임들을 쭉 하고 있다. (한국어 패치 있는 것들만...ㅎㅎ) 그런데 시즌1, 시즌2, 미숀, 뉴 프론티어(시즌3) 전부 문제없다가 맨 마지막 작품인 파이널 시즌(시즌4)을 실행하니까 처음 로딩 화면에서 응답 없음이 뜬다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;1920&quot; data-origin-height=&quot;1080&quot; data-filename=&quot;dwm_TA1Wm9Puqe.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/dyfV1m/btrbuAX3mUY/iyOkgcqObw82xKMAZw0HL1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/dyfV1m/btrbuAX3mUY/iyOkgcqObw82xKMAZw0HL1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdyfV1m%2FbtrbuAX3mUY%2FiyOkgcqObw82xKMAZw0HL1%2Fimg.png' data-origin-width=&quot;1920&quot; data-origin-height=&quot;1080&quot; data-filename=&quot;dwm_TA1Wm9Puqe.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;전작들 전부 문제없다가 가장 최근작만 실행 오류 있는 건 뭐지... 아무튼 해결법을 찾아보니 호환성 모드를 윈도우 8로 설정하면 된다고 한다. 분명, 이 게임이 윈도우 10 출시하고 한참 뒤에 출시했을 텐데?!&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;421&quot; data-origin-height=&quot;598&quot; data-filename=&quot;explorer_CaGyac1ZGR.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/bc45Ao/btrbyH9X6XJ/LjUySwn64gp6qS7kaZc7E1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/bc45Ao/btrbyH9X6XJ/LjUySwn64gp6qS7kaZc7E1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbc45Ao%2FbtrbyH9X6XJ%2FLjUySwn64gp6qS7kaZc7E1%2Fimg.png' data-origin-width=&quot;421&quot; data-origin-height=&quot;598&quot; data-filename=&quot;explorer_CaGyac1ZGR.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;워킹데드 설치 폴더로 이동한 뒤 실행파일(WalkingDead4.exe)의 속성에 들어가서 호환 모드를 Windows 8로 설정하면 된다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;워킹데드 설치 폴더는 스팀에서 설치했다면 아래 이미지처럼 쉽게 찾을 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width=&quot;464&quot; data-origin-height=&quot;252&quot; data-filename=&quot;화면 캡처 2021-08-08 134026.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/csELWY/btrbuzLD4yW/cBmIqNTYS3ZvkDW1vJewbk/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/csELWY/btrbuzLD4yW/cBmIqNTYS3ZvkDW1vJewbk/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcsELWY%2FbtrbuzLD4yW%2FcBmIqNTYS3ZvkDW1vJewbk%2Fimg.png' data-origin-width=&quot;464&quot; data-origin-height=&quot;252&quot; data-filename=&quot;화면 캡처 2021-08-08 134026.png&quot; data-ke-mobilestyle=&quot;widthOrigin&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>기타 게임</category>
<category>Game</category>
<category>Walking Dead</category>
<category>게임</category>
<category>워킹데드</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1229</guid>
<comments>https://blog.joyfui.com/1229#entry1229comment</comments>
<pubDate>Sun, 08 Aug 2021 14:07:21 +0900</pubDate>
</item>
<item>
<title>[Node.js] 외부 프로그램 실행하고 결과 출력하기</title>
<link>https://blog.joyfui.com/1228</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;인터넷에서 리액트 배포 글을 찾아보면 주로 package.json 파일에 명령을 추가하는 방법으로 소개하고 있던데 나중에 복잡한 처리하기에 힘들어 보여서 별도의 스크립트 파일로 만들려고 노드js로 외부 프로그램을 실행하는 방법을 찾아봤다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;찾아보니 node.js의 기본 모듈 중 하나인 child_process가 해당 기능을 할 수 있었고 기본적으로 비동기로 작동한다. 동기적으로 사용하는 방법도 찾아보니까 async/await을 사용하던데 &lt;a href=&quot;https://nodejs.org/api/child_process.html&quot;&gt;node.js 공식 문서&lt;/a&gt;를 보니까 동기적으로 동작하는 함수도 제공하고 있었다. 굳이 빙빙 돌려가며 async/await 쓰지 말고 그냥 제공하는 함수를 쓰는 게 보기에도 깔끔하고 편하다.&lt;/p&gt;
&lt;pre class=&quot;line-numbers&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
const childProcess = require('child_process');
childProcess.execSync('실행할 명령');
&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;이렇게 사용하면 된다. 그런데 실행한 외부 프로그램이 출력하는 내용은 보이지 않고 조용히 실행된다. 물론 반환 값으로 stdout를 얻을 수 있지만 실시간이 아니여서 답답하다. 이건 { stdio: 'inherit' } 옵션을 추가하면 실행 도중 뜨는 출력도 실행 중인 터미널에 바로 출력된다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;아래처럼 함수로 만들어 두면 편리하게 사용할 수 있다.&lt;/p&gt;
&lt;pre class=&quot;line-numbers&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
const childProcess = require('child_process');
const exec = (cmd) =&amp;gt; childProcess.execSync(cmd, { stdio: 'inherit' });
&lt;/code&gt;&lt;/pre&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>웹</category>
<category>JavaScript</category>
<category>node.js</category>
<category>자바스크립트</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1228</guid>
<comments>https://blog.joyfui.com/1228#entry1228comment</comments>
<pubDate>Fri, 30 Jul 2021 22:33:10 +0900</pubDate>
</item>
<item>
<title>윈도우 10 홈에서 원격 데스크톱 사용하기</title>
<link>https://blog.joyfui.com/1227</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;거리두기 4단계가 되면서 회사도 재택근무를 시작했다. 회사에서 사용하던 노트북을 들고 왔는데 책상이 좁아 노트북을 둘 곳이 없다. 이미 모니터 하나로도 공간 꽉 차서 모니터 암으로 겨우겨우 듀얼모니터를 사용하고 있는데...ㅠㅠ 그렇다고 작은 노트북 모니터로 개발을 할 수도 없고...&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;결국 생각해낸 게 노트북을 저만치 두고 원격으로 사용하기(...) 학교 다닐 때도 원격 데스크톱으로 집 컴퓨터를 사용하곤 했다.ㅎㅎ&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;그런데 노트북에 깔린 윈도우 10이 홈 버전이라 원격 데스크톱이 안 된다. 뭐 크롬 원격이나 팀뷰어 등의 외부 프로그램을 이용하면 되지만 뭐 설치하기도 싫고 안정성도 윈도우 내장인 RDS가 좋은데... 하지만 역시 찾아보니 방법이 있었다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;&lt;a href=&quot;https://github.com/stascorp/rdpwrap&quot;&gt;RDP Wrapper&lt;/a&gt;라는 프로그램인데 원격 데스크톱의 몇 가지 기능을 활성화해준다. 이걸로 홈 버전에서도 원격 데스크톱을 사용할 수 있다. 다만, 오래전에 업데이트가 끊겨서 최신 윈도우 10에서는 동작하지 않는 문제가 있는데 이 역시 외국 능력자들 덕분에 해결 방법이 있다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;1. 먼저 회사 노트북에 번들로 깔려있던 맥아피 기준으로 안티바이러스에서 잡는 문제가 있다. 실시간 감시를 끄고 진행하는 걸 권장한다.&lt;/p&gt;
&lt;p&gt;&lt;figure class=&quot;fileblock&quot; data-ke-align=&quot;alignCenter&quot;&gt;&lt;a href=&quot;https://blog.kakaocdn.net/dn/chFMZ4/btrapFeh4gK/zWqfxPF3Dd8Kj9AVYvNbTk/RDPWrap-v1.6.2.zip?attach=1&amp;knm=tfile.zip&quot; class=&quot;&quot;&gt;&lt;div class=&quot;image&quot;&gt;&lt;/div&gt;&lt;div class=&quot;desc&quot;&gt;&lt;div class=&quot;filename&quot;&gt;&lt;span class=&quot;name&quot;&gt;RDPWrap-v1.6.2.zip&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;size&quot;&gt;1.58MB&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;2. 위 파일을 받고 &lt;code class=&quot;language-text&quot;&gt;%PROGRAMFILES%\RDP Wrapper&lt;/code&gt; 경로에 압축을 푼다. (대부분은 &lt;code class=&quot;language-text&quot;&gt;C:\Program Files\RDP Wrapper&lt;/code&gt; 경로가 된다.) 티스트리에 업로드가 안 돼서 부득이하게 암호를 걸었다. 암호는 &lt;code class=&quot;language-text&quot;&gt;1q2w3e4r&lt;/code&gt;이다.&lt;/p&gt;
&lt;p&gt;&lt;figure class=&quot;fileblock&quot; data-ke-align=&quot;alignCenter&quot;&gt;&lt;a href=&quot;https://blog.kakaocdn.net/dn/tm7n0/btrakTegiwU/tLP8NRf1u7ZcaKxiIziPo0/autoupdate.zip?attach=1&amp;knm=tfile.zip&quot; class=&quot;&quot;&gt;&lt;div class=&quot;image&quot;&gt;&lt;/div&gt;&lt;div class=&quot;desc&quot;&gt;&lt;div class=&quot;filename&quot;&gt;&lt;span class=&quot;name&quot;&gt;autoupdate.zip&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;size&quot;&gt;0.01MB&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;3. 위 파일을 받고 역시 같은 경로에 압축을 풀어준다. 이 파일이 최신 윈도우 10 빌드에 맞게 자동으로 rdpwrap 파일을 업데이트해 준다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;4. 압축 푼 경로에서 &lt;code class=&quot;language-text&quot;&gt;autoupdate.bat&lt;/code&gt; 파일을 &quot;관리자 권한&quot;으로 실행하면 RDP Wrapper 설치 및 업데이트가 완료된다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;5. 만약, 윈도우 부팅 때마다 자동으로 RDP Wrapper가 업데이트되길 원한다면 &lt;code class=&quot;language-text&quot;&gt;helper\autoupdate__enable_autorun_on_startup.bat&lt;/code&gt; 파일을 관리자 권한으로 실행하면 된다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;출처: &lt;a href=&quot;https://github.com/asmtron/rdpwrap/blob/master/binary-download.md&quot;&gt;https://github.com/asmtron/rdpwrap/blob/master/binary-download.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter' data-origin-width='607' data-origin-height='511' data-ke-mobilestyle='alignCenter'&gt;&lt;span data-url='https://blog.kakaocdn.net/dn/uJwpJ/btrao7WqyPB/D2ndfckkd6lNWu3ZcMIVSK/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://blog.kakaocdn.net/dn/uJwpJ/btrao7WqyPB/D2ndfckkd6lNWu3ZcMIVSK/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FuJwpJ%2Fbtrao7WqyPB%2FD2ndfckkd6lNWu3ZcMIVSK%2Fimg.png' width='412' height='347' data-filename='RDPConf.png' data-ke-mobilestyle='alignCenter'/&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;RDPConf.exe 파일을 실행해서 위의 세 개가 모두 녹색으로 뜬다면 정상적으로 설치된 것이다. RDPCheck.exe를 실행해서 원격 데스크톱 접속이 잘 되는지 테스트할 수 있다.&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>Windows</category>
<category>Windows 10</category>
<category>원격</category>
<category>윈도우 10</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1227</guid>
<comments>https://blog.joyfui.com/1227#entry1227comment</comments>
<pubDate>Sat, 24 Jul 2021 12:40:40 +0900</pubDate>
</item>
<item>
<title>[CSS] 모바일 밑으로 당겨서 새로고침 막기</title>
<link>https://blog.joyfui.com/1226</link>
<description>            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;&lt;p data-ke-size=&quot;size16&quot;&gt;리액트로 2048을 만들어보면서 키보드로 조작하는 거에다가 터치 지원도 추가해봤는데 실제로 스마트폰에서 테스트해보니 아래로 쓸어내리는 제스처와 밑으로 당겨서 새로고침이 겹쳐서 새로고침 되는 문제가 있었다. 해결법을 찾아보니 CSS로 간단하게 해결할 수 있었다.&lt;/p&gt;
&lt;pre class=&quot;line-numbers&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;
body {
    overscroll-behavior-y: none;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;위처럼 속성 하나만 추가해주면 된다. 글이 너무 짧으니 조금 설명하자면 &lt;code class=&quot;language-css&quot;&gt;overscroll-behavior&lt;/code&gt; 속성은 스크롤 끝에 도달했을 때 브라우저의 동작을 제어하는 속성이다. 기본값은 &lt;code class=&quot;language-css&quot;&gt;auto&lt;/code&gt;로 스크롤 끝에 도달하면 상위 요소가 스크롤 된다. &lt;code class=&quot;language-css&quot;&gt;contain&lt;/code&gt;으로 지정하면 스크롤 체인이 방지되어 스크롤 끝에 도달하더라도 상위 요소로 전파되지 않는다. &lt;code class=&quot;language-css&quot;&gt;none&lt;/code&gt;은 브라우저 기본 오버 스크롤 동작까지 막는다.&lt;/p&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;반드시 body 태그에 위 속성을 줘야 당겨서 새로고침 기능이 작동하지 않는다. 다른 곳에 넣으면 효과 없음... 무조건 페이지 전체에 적용해야 하는 게 별로라면 자바스크립트로 동적으로 속성을 조절하면 된다.&lt;/p&gt;
&lt;pre class=&quot;line-numbers&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;
document.body.style.overscrollBehaviorY = 'none';
&lt;/code&gt;&lt;/pre&gt;
&lt;p data-ke-size=&quot;size16&quot;&gt;대충 이렇게?&lt;/p&gt;            &lt;div class=&quot;revenue_unit_wrap &quot;&gt;
               &lt;div class=&quot;revenue_unit_item adsense  responsive&quot; &gt;
                    &lt;div class=&quot;revenue_unit_info&quot;&gt;반응형&lt;/div&gt;
                    &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block;&quot; data-ad-host=&quot;ca-host-pub-9691043933427338&quot; data-ad-client=&quot;ca-pub-2710582912921553&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                    &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;
               &lt;/div&gt;
            &lt;/div&gt;</description>
<category>웹</category>
<category>CSS</category>
<category>HTML</category>
<category>Style</category>
<category>개발</category>
<category>스마트폰</category>
<category>웹</category>
<category>프로그래밍</category>
<author>joyfuI</author>
<guid isPermaLink="true">https://blog.joyfui.com/1226</guid>
<comments>https://blog.joyfui.com/1226#entry1226comment</comments>
<pubDate>Fri, 09 Jul 2021 21:46:08 +0900</pubDate>
</item>
</channel>
</rss>